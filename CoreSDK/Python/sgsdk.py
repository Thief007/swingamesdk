
import sys
from ctypes import * 
from sgsdk_types import *

print sys.platform

if sys.platform == "win32":
    sgsdk = CDLL("sgsdk\SGSDK.dll")   #to check
elif sys.platform == "darwin":
    sgsdk = CDLL("sgsdk/libSGSDK.dylib")
else: #assume linux
    sgsdk = CDLL("sgsdk/libSGSDK.so")   #to check

#
# This file has been generated by sgsdk_pas_to_py.py. Do not edit by hand! :)
#
class SGSDKException(Exception):
    pass

def _sg_errcheck(result, func, args):
    # ask the SGSDK if there was an error, raise exception if so...
    if ExceptionOccured() == sgTrue.value:
        msg = GetExceptionMessage()
        raise SGSDKException(msg)
    return result
        
def _decorate_function(func, name):
    # decorate with _sg_errcheck if needed for debug 
    if options['debug']:
        if name not in ('ExceptionOccured','GetExceptionMessage'):
            func.errcheck = _sg_errcheck

    
GetExceptionMessage = sgsdk.GetExceptionMessage
GetExceptionMessage.argtypes = []
GetExceptionMessage.restype = c_char_p
_decorate_function(GetExceptionMessage, "GetExceptionMessage")

ExceptionOccured = sgsdk.ExceptionOccured
ExceptionOccured.argtypes = []
ExceptionOccured.restype = c_int
_decorate_function(ExceptionOccured, "ExceptionOccured")

ProcessEvents = sgsdk.ProcessEvents
ProcessEvents.argtypes = []
ProcessEvents.restype = None
_decorate_function(ProcessEvents, "ProcessEvents")

OpenGraphicsWindow = sgsdk.OpenGraphicsWindow
OpenGraphicsWindow.argtypes = [c_char_p, c_int, c_int]
OpenGraphicsWindow.restype = None
_decorate_function(OpenGraphicsWindow, "OpenGraphicsWindow")

WindowCloseRequested = sgsdk.WindowCloseRequested
WindowCloseRequested.argtypes = []
WindowCloseRequested.restype = c_int
_decorate_function(WindowCloseRequested, "WindowCloseRequested")

SetIcon = sgsdk.SetIcon
SetIcon.argtypes = [c_char_p]
SetIcon.restype = None
_decorate_function(SetIcon, "SetIcon")

ChangeScreenSize = sgsdk.ChangeScreenSize
ChangeScreenSize.argtypes = [c_int, c_int]
ChangeScreenSize.restype = None
_decorate_function(ChangeScreenSize, "ChangeScreenSize")

ToggleFullScreen = sgsdk.ToggleFullScreen
ToggleFullScreen.argtypes = []
ToggleFullScreen.restype = None
_decorate_function(ToggleFullScreen, "ToggleFullScreen")

RefreshScreenWithFrame = sgsdk.RefreshScreenWithFrame
RefreshScreenWithFrame.argtypes = [c_int]
RefreshScreenWithFrame.restype = None
_decorate_function(RefreshScreenWithFrame, "RefreshScreenWithFrame")

RefreshScreen = sgsdk.RefreshScreen
RefreshScreen.argtypes = []
RefreshScreen.restype = None
_decorate_function(RefreshScreen, "RefreshScreen")

TakeScreenShot = sgsdk.TakeScreenShot
TakeScreenShot.argtypes = [c_char_p]
TakeScreenShot.restype = None
_decorate_function(TakeScreenShot, "TakeScreenShot")

ScreenWidth = sgsdk.ScreenWidth
ScreenWidth.argtypes = []
ScreenWidth.restype = c_int
_decorate_function(ScreenWidth, "ScreenWidth")

ScreenHeight = sgsdk.ScreenHeight
ScreenHeight.argtypes = []
ScreenHeight.restype = c_int
_decorate_function(ScreenHeight, "ScreenHeight")

ToSDLColor = sgsdk.ToSDLColor
ToSDLColor.argtypes = [c_uint32]
ToSDLColor.restype = c_uint32
_decorate_function(ToSDLColor, "ToSDLColor")

GetColourBitmap = sgsdk.GetColourBitmap
GetColourBitmap.argtypes = [c_void_p, c_uint32]
GetColourBitmap.restype = c_uint32
_decorate_function(GetColourBitmap, "GetColourBitmap")

GetColourRGBA = sgsdk.GetColourRGBA
GetColourRGBA.argtypes = [c_byte, c_byte, c_byte, c_byte]
GetColourRGBA.restype = c_uint32
_decorate_function(GetColourRGBA, "GetColourRGBA")

GetFramerate = sgsdk.GetFramerate
GetFramerate.argtypes = []
GetFramerate.restype = c_int
_decorate_function(GetFramerate, "GetFramerate")

GetTicks = sgsdk.GetTicks
GetTicks.argtypes = []
GetTicks.restype = c_uint32
_decorate_function(GetTicks, "GetTicks")

Sleep = sgsdk.Sleep
Sleep.argtypes = [c_uint32]
Sleep.restype = None
_decorate_function(Sleep, "Sleep")

GetPathToResourceWithKind = sgsdk.GetPathToResourceWithKind
GetPathToResourceWithKind.argtypes = [c_char_p, ResourceKind]
GetPathToResourceWithKind.restype = c_char_p
_decorate_function(GetPathToResourceWithKind, "GetPathToResourceWithKind")

GetPathToResource = sgsdk.GetPathToResource
GetPathToResource.argtypes = [c_char_p]
GetPathToResource.restype = c_char_p
_decorate_function(GetPathToResource, "GetPathToResource")

GetPathToResourceWithBaseAndKind = sgsdk.GetPathToResourceWithBaseAndKind
GetPathToResourceWithBaseAndKind.argtypes = [c_char_p, c_char_p, ResourceKind]
GetPathToResourceWithBaseAndKind.restype = c_char_p
_decorate_function(GetPathToResourceWithBaseAndKind, "GetPathToResourceWithBaseAndKind")

GetPathToResourceWithBase = sgsdk.GetPathToResourceWithBase
GetPathToResourceWithBase.argtypes = [c_char_p, c_char_p]
GetPathToResourceWithBase.restype = c_char_p
_decorate_function(GetPathToResourceWithBase, "GetPathToResourceWithBase")

CreateTimer = sgsdk.CreateTimer
CreateTimer.argtypes = []
CreateTimer.restype = c_void_p
_decorate_function(CreateTimer, "CreateTimer")

FreeTimer = sgsdk.FreeTimer
FreeTimer.argtypes = [c_void_p]
FreeTimer.restype = None
_decorate_function(FreeTimer, "FreeTimer")

StartTimer = sgsdk.StartTimer
StartTimer.argtypes = [c_void_p]
StartTimer.restype = None
_decorate_function(StartTimer, "StartTimer")

StopTimer = sgsdk.StopTimer
StopTimer.argtypes = [c_void_p]
StopTimer.restype = None
_decorate_function(StopTimer, "StopTimer")

PauseTimer = sgsdk.PauseTimer
PauseTimer.argtypes = [c_void_p]
PauseTimer.restype = None
_decorate_function(PauseTimer, "PauseTimer")

UnpauseTimer = sgsdk.UnpauseTimer
UnpauseTimer.argtypes = [c_void_p]
UnpauseTimer.restype = None
_decorate_function(UnpauseTimer, "UnpauseTimer")

GetTimerTicks = sgsdk.GetTimerTicks
GetTimerTicks.argtypes = [c_void_p]
GetTimerTicks.restype = c_uint32
_decorate_function(GetTimerTicks, "GetTimerTicks")

ShowMouse = sgsdk.ShowMouse
ShowMouse.argtypes = [c_int]
ShowMouse.restype = None
_decorate_function(ShowMouse, "ShowMouse")

IsMouseShown = sgsdk.IsMouseShown
IsMouseShown.argtypes = []
IsMouseShown.restype = c_int
_decorate_function(IsMouseShown, "IsMouseShown")

MoveMouse = sgsdk.MoveMouse
MoveMouse.argtypes = [c_uint16, c_uint16]
MoveMouse.restype = None
_decorate_function(MoveMouse, "MoveMouse")

GetMouseXY = sgsdk.GetMouseXY
GetMouseXY.argtypes = [c_float, c_float]
GetMouseXY.restype = None
_decorate_function(GetMouseXY, "GetMouseXY")

GetMouseMovement = sgsdk.GetMouseMovement
GetMouseMovement.argtypes = []
GetMouseMovement.restype = Vector
_decorate_function(GetMouseMovement, "GetMouseMovement")

IsMouseDown = sgsdk.IsMouseDown
IsMouseDown.argtypes = [MouseButton]
IsMouseDown.restype = c_int
_decorate_function(IsMouseDown, "IsMouseDown")

IsMouseUp = sgsdk.IsMouseUp
IsMouseUp.argtypes = [MouseButton]
IsMouseUp.restype = c_int
_decorate_function(IsMouseUp, "IsMouseUp")

MouseWasClicked = sgsdk.MouseWasClicked
MouseWasClicked.argtypes = [MouseButton]
MouseWasClicked.restype = c_int
_decorate_function(MouseWasClicked, "MouseWasClicked")

StartReadingText = sgsdk.StartReadingText
StartReadingText.argtypes = [c_uint32, c_int, c_void_p, c_int, c_int]
StartReadingText.restype = None
_decorate_function(StartReadingText, "StartReadingText")

IsReadingText = sgsdk.IsReadingText
IsReadingText.argtypes = []
IsReadingText.restype = c_int
_decorate_function(IsReadingText, "IsReadingText")

TextReadAsASCII = sgsdk.TextReadAsASCII
TextReadAsASCII.argtypes = [c_char_p]
TextReadAsASCII.restype = None
_decorate_function(TextReadAsASCII, "TextReadAsASCII")

IsKeyPressed = sgsdk.IsKeyPressed
IsKeyPressed.argtypes = [c_int]
IsKeyPressed.restype = c_int
_decorate_function(IsKeyPressed, "IsKeyPressed")

WasKeyTyped = sgsdk.WasKeyTyped
WasKeyTyped.argtypes = [c_int]
WasKeyTyped.restype = c_int
_decorate_function(WasKeyTyped, "WasKeyTyped")

OpenAudio = sgsdk.OpenAudio
OpenAudio.argtypes = []
OpenAudio.restype = None
_decorate_function(OpenAudio, "OpenAudio")

CloseAudio = sgsdk.CloseAudio
CloseAudio.argtypes = []
CloseAudio.restype = None
_decorate_function(CloseAudio, "CloseAudio")

LoadSoundEffect = sgsdk.LoadSoundEffect
LoadSoundEffect.argtypes = [c_char_p]
LoadSoundEffect.restype = c_void_p
_decorate_function(LoadSoundEffect, "LoadSoundEffect")

LoadMusic = sgsdk.LoadMusic
LoadMusic.argtypes = [c_char_p]
LoadMusic.restype = c_void_p
_decorate_function(LoadMusic, "LoadMusic")

FreeMusic = sgsdk.FreeMusic
FreeMusic.argtypes = [c_void_p]
FreeMusic.restype = None
_decorate_function(FreeMusic, "FreeMusic")

FreeSoundEffect = sgsdk.FreeSoundEffect
FreeSoundEffect.argtypes = [c_void_p]
FreeSoundEffect.restype = None
_decorate_function(FreeSoundEffect, "FreeSoundEffect")

PlaySoundEffectLoop = sgsdk.PlaySoundEffectLoop
PlaySoundEffectLoop.argtypes = [c_void_p, c_int]
PlaySoundEffectLoop.restype = None
_decorate_function(PlaySoundEffectLoop, "PlaySoundEffectLoop")

PlayMusic = sgsdk.PlayMusic
PlayMusic.argtypes = [c_void_p, c_int]
PlayMusic.restype = None
_decorate_function(PlayMusic, "PlayMusic")

IsMusicPlaying = sgsdk.IsMusicPlaying
IsMusicPlaying.argtypes = []
IsMusicPlaying.restype = c_int
_decorate_function(IsMusicPlaying, "IsMusicPlaying")

IsSoundEffectPlaying = sgsdk.IsSoundEffectPlaying
IsSoundEffectPlaying.argtypes = [c_void_p]
IsSoundEffectPlaying.restype = c_int
_decorate_function(IsSoundEffectPlaying, "IsSoundEffectPlaying")

StopSoundEffect = sgsdk.StopSoundEffect
StopSoundEffect.argtypes = [c_void_p]
StopSoundEffect.restype = None
_decorate_function(StopSoundEffect, "StopSoundEffect")

StopMusic = sgsdk.StopMusic
StopMusic.argtypes = []
StopMusic.restype = None
_decorate_function(StopMusic, "StopMusic")

LoadFont = sgsdk.LoadFont
LoadFont.argtypes = [c_char_p, c_int]
LoadFont.restype = c_void_p
_decorate_function(LoadFont, "LoadFont")

SetFontStyle = sgsdk.SetFontStyle
SetFontStyle.argtypes = [c_void_p, FontStyle]
SetFontStyle.restype = None
_decorate_function(SetFontStyle, "SetFontStyle")

FreeFont = sgsdk.FreeFont
FreeFont.argtypes = [c_void_p]
FreeFont.restype = None
_decorate_function(FreeFont, "FreeFont")

DrawText = sgsdk.DrawText
DrawText.argtypes = [c_char_p, c_uint32, c_void_p, c_float, c_float]
DrawText.restype = None
_decorate_function(DrawText, "DrawText")

DrawTextLines = sgsdk.DrawTextLines
DrawTextLines.argtypes = [c_char_p, c_uint32, c_uint32, c_void_p, FontAlignment, c_float, c_float, c_int, c_int]
DrawTextLines.restype = None
_decorate_function(DrawTextLines, "DrawTextLines")

DrawTextOnScreen = sgsdk.DrawTextOnScreen
DrawTextOnScreen.argtypes = [c_char_p, c_uint32, c_void_p, c_int, c_int]
DrawTextOnScreen.restype = None
_decorate_function(DrawTextOnScreen, "DrawTextOnScreen")

DrawTextLinesOnScreen = sgsdk.DrawTextLinesOnScreen
DrawTextLinesOnScreen.argtypes = [c_char_p, c_uint32, c_uint32, c_void_p, FontAlignment, c_int, c_int, c_int, c_int]
DrawTextLinesOnScreen.restype = None
_decorate_function(DrawTextLinesOnScreen, "DrawTextLinesOnScreen")

DrawTextOnBitmap = sgsdk.DrawTextOnBitmap
DrawTextOnBitmap.argtypes = [c_void_p, c_char_p, c_uint32, c_void_p, c_int, c_int]
DrawTextOnBitmap.restype = None
_decorate_function(DrawTextOnBitmap, "DrawTextOnBitmap")

DrawTextLinesOnBitmap = sgsdk.DrawTextLinesOnBitmap
DrawTextLinesOnBitmap.argtypes = [c_void_p, c_char_p, c_uint32, c_uint32, c_void_p, FontAlignment, c_int, c_int, c_int, c_int]
DrawTextLinesOnBitmap.restype = None
_decorate_function(DrawTextLinesOnBitmap, "DrawTextLinesOnBitmap")

TextWidth = sgsdk.TextWidth
TextWidth.argtypes = [c_char_p, c_void_p]
TextWidth.restype = c_int
_decorate_function(TextWidth, "TextWidth")

TextHeight = sgsdk.TextHeight
TextHeight.argtypes = [c_char_p, c_void_p]
TextHeight.restype = c_int
_decorate_function(TextHeight, "TextHeight")

DrawFramerate = sgsdk.DrawFramerate
DrawFramerate.argtypes = [c_int, c_int, c_void_p]
DrawFramerate.restype = None
_decorate_function(DrawFramerate, "DrawFramerate")

RectangleHasCollidedWithLine = sgsdk.RectangleHasCollidedWithLine
RectangleHasCollidedWithLine.argtypes = [Rectangle, LineSegment]
RectangleHasCollidedWithLine.restype = c_int
_decorate_function(RectangleHasCollidedWithLine, "RectangleHasCollidedWithLine")

IsSpriteOnScreenAt = sgsdk.IsSpriteOnScreenAt
IsSpriteOnScreenAt.argtypes = [c_void_p, c_int, c_int]
IsSpriteOnScreenAt.restype = c_int
_decorate_function(IsSpriteOnScreenAt, "IsSpriteOnScreenAt")

CircleHasCollidedWithLine = sgsdk.CircleHasCollidedWithLine
CircleHasCollidedWithLine.argtypes = [c_void_p, LineSegment]
CircleHasCollidedWithLine.restype = c_int
_decorate_function(CircleHasCollidedWithLine, "CircleHasCollidedWithLine")

HasSpriteCollidedX = sgsdk.HasSpriteCollidedX
HasSpriteCollidedX.argtypes = [c_void_p, c_int, CollisionDetectionRange]
HasSpriteCollidedX.restype = c_int
_decorate_function(HasSpriteCollidedX, "HasSpriteCollidedX")

HasSpriteCollidedY = sgsdk.HasSpriteCollidedY
HasSpriteCollidedY.argtypes = [c_void_p, c_int, CollisionDetectionRange]
HasSpriteCollidedY.restype = c_int
_decorate_function(HasSpriteCollidedY, "HasSpriteCollidedY")

HasSpriteCollidedWithRect = sgsdk.HasSpriteCollidedWithRect
HasSpriteCollidedWithRect.argtypes = [c_void_p, c_float, c_float, c_int, c_int]
HasSpriteCollidedWithRect.restype = c_int
_decorate_function(HasSpriteCollidedWithRect, "HasSpriteCollidedWithRect")

HaveSpritesCollided = sgsdk.HaveSpritesCollided
HaveSpritesCollided.argtypes = [c_void_p, c_void_p]
HaveSpritesCollided.restype = c_int
_decorate_function(HaveSpritesCollided, "HaveSpritesCollided")

HasSpriteCollidedWithBitmap = sgsdk.HasSpriteCollidedWithBitmap
HasSpriteCollidedWithBitmap.argtypes = [c_void_p, c_void_p, c_float, c_float, c_int]
HasSpriteCollidedWithBitmap.restype = c_int
_decorate_function(HasSpriteCollidedWithBitmap, "HasSpriteCollidedWithBitmap")

HasSpriteCollidedWithBitmapPart = sgsdk.HasSpriteCollidedWithBitmapPart
HasSpriteCollidedWithBitmapPart.argtypes = [c_void_p, c_void_p, Point2D, Rectangle, c_int]
HasSpriteCollidedWithBitmapPart.restype = c_int
_decorate_function(HasSpriteCollidedWithBitmapPart, "HasSpriteCollidedWithBitmapPart")

HaveBitmapsCollided = sgsdk.HaveBitmapsCollided
HaveBitmapsCollided.argtypes = [c_void_p, c_int, c_int, c_int, c_void_p, c_int, c_int, c_int]
HaveBitmapsCollided.restype = c_int
_decorate_function(HaveBitmapsCollided, "HaveBitmapsCollided")

HaveBitmapPartsCollided = sgsdk.HaveBitmapPartsCollided
HaveBitmapPartsCollided.argtypes = [c_void_p, Point2D, Rectangle, c_int, c_void_p, Point2D, Rectangle, c_int]
HaveBitmapPartsCollided.restype = c_int
_decorate_function(HaveBitmapPartsCollided, "HaveBitmapPartsCollided")

LimitMagnitude = sgsdk.LimitMagnitude
LimitMagnitude.argtypes = [Vector, c_float]
LimitMagnitude.restype = Vector
_decorate_function(LimitMagnitude, "LimitMagnitude")

GetUnitVector = sgsdk.GetUnitVector
GetUnitVector.argtypes = [Vector]
GetUnitVector.restype = Vector
_decorate_function(GetUnitVector, "GetUnitVector")

CalculateAngle = sgsdk.CalculateAngle
CalculateAngle.argtypes = [c_float, c_float, c_float, c_float]
CalculateAngle.restype = c_float
_decorate_function(CalculateAngle, "CalculateAngle")

TranslationMatrix = sgsdk.TranslationMatrix
TranslationMatrix.argtypes = [c_float, c_float]
TranslationMatrix.restype = c_void_p
_decorate_function(TranslationMatrix, "TranslationMatrix")

ScaleMatrix = sgsdk.ScaleMatrix
ScaleMatrix.argtypes = [c_float]
ScaleMatrix.restype = c_void_p
_decorate_function(ScaleMatrix, "ScaleMatrix")

RotationMatrix = sgsdk.RotationMatrix
RotationMatrix.argtypes = [c_float]
RotationMatrix.restype = c_void_p
_decorate_function(RotationMatrix, "RotationMatrix")

MultiplyMatrix2D = sgsdk.MultiplyMatrix2D
MultiplyMatrix2D.argtypes = [c_void_p, c_void_p]
MultiplyMatrix2D.restype = c_void_p
_decorate_function(MultiplyMatrix2D, "MultiplyMatrix2D")

MultiplyMatrix2DAndVector = sgsdk.MultiplyMatrix2DAndVector
MultiplyMatrix2DAndVector.argtypes = [c_void_p, Vector]
MultiplyMatrix2DAndVector.restype = Vector
_decorate_function(MultiplyMatrix2DAndVector, "MultiplyMatrix2DAndVector")

VectorCollision = sgsdk.VectorCollision
VectorCollision.argtypes = [c_void_p, c_void_p]
VectorCollision.restype = None
_decorate_function(VectorCollision, "VectorCollision")

CircleCollisionWithLine = sgsdk.CircleCollisionWithLine
CircleCollisionWithLine.argtypes = [c_void_p, LineSegment]
CircleCollisionWithLine.restype = None
_decorate_function(CircleCollisionWithLine, "CircleCollisionWithLine")

CircularCollision = sgsdk.CircularCollision
CircularCollision.argtypes = [c_void_p, c_void_p]
CircularCollision.restype = None
_decorate_function(CircularCollision, "CircularCollision")

GetMatrix2DElement = sgsdk.GetMatrix2DElement
GetMatrix2DElement.argtypes = [c_void_p, c_int, c_int]
GetMatrix2DElement.restype = c_float
_decorate_function(GetMatrix2DElement, "GetMatrix2DElement")

SetMatrix2DElement = sgsdk.SetMatrix2DElement
SetMatrix2DElement.argtypes = [c_void_p, c_int, c_int, c_float]
SetMatrix2DElement.restype = None
_decorate_function(SetMatrix2DElement, "SetMatrix2DElement")

FreeMatrix2D = sgsdk.FreeMatrix2D
FreeMatrix2D.argtypes = [c_void_p]
FreeMatrix2D.restype = None
_decorate_function(FreeMatrix2D, "FreeMatrix2D")

VectorOutOfCircleFromPoint = sgsdk.VectorOutOfCircleFromPoint
VectorOutOfCircleFromPoint.argtypes = [Point2D, Point2D, c_float, Vector]
VectorOutOfCircleFromPoint.restype = Vector
_decorate_function(VectorOutOfCircleFromPoint, "VectorOutOfCircleFromPoint")

VectorOutOfCircleFromCircle = sgsdk.VectorOutOfCircleFromCircle
VectorOutOfCircleFromCircle.argtypes = [Point2D, c_float, Point2D, c_float, Vector]
VectorOutOfCircleFromCircle.restype = Vector
_decorate_function(VectorOutOfCircleFromCircle, "VectorOutOfCircleFromCircle")

VectorOutOfRectFromPoint = sgsdk.VectorOutOfRectFromPoint
VectorOutOfRectFromPoint.argtypes = [Point2D, Rectangle, Vector]
VectorOutOfRectFromPoint.restype = Vector
_decorate_function(VectorOutOfRectFromPoint, "VectorOutOfRectFromPoint")

VectorOutOfRectFromRect = sgsdk.VectorOutOfRectFromRect
VectorOutOfRectFromRect.argtypes = [Rectangle, Rectangle, Vector]
VectorOutOfRectFromRect.restype = Vector
_decorate_function(VectorOutOfRectFromRect, "VectorOutOfRectFromRect")

GetPixel = sgsdk.GetPixel
GetPixel.argtypes = [c_void_p, c_int, c_int]
GetPixel.restype = c_uint32
_decorate_function(GetPixel, "GetPixel")

GetPixelFromScreen = sgsdk.GetPixelFromScreen
GetPixelFromScreen.argtypes = [c_int, c_int]
GetPixelFromScreen.restype = c_uint32
_decorate_function(GetPixelFromScreen, "GetPixelFromScreen")

GetSpriteBitmap = sgsdk.GetSpriteBitmap
GetSpriteBitmap.argtypes = [c_void_p, c_int]
GetSpriteBitmap.restype = c_void_p
_decorate_function(GetSpriteBitmap, "GetSpriteBitmap")

GetSpriteX = sgsdk.GetSpriteX
GetSpriteX.argtypes = [c_void_p]
GetSpriteX.restype = c_float
_decorate_function(GetSpriteX, "GetSpriteX")

SetSpriteX = sgsdk.SetSpriteX
SetSpriteX.argtypes = [c_void_p, c_float]
SetSpriteX.restype = None
_decorate_function(SetSpriteX, "SetSpriteX")

GetSpriteY = sgsdk.GetSpriteY
GetSpriteY.argtypes = [c_void_p]
GetSpriteY.restype = c_float
_decorate_function(GetSpriteY, "GetSpriteY")

SetSpriteY = sgsdk.SetSpriteY
SetSpriteY.argtypes = [c_void_p, c_float]
SetSpriteY.restype = None
_decorate_function(SetSpriteY, "SetSpriteY")

GetSpriteCurrentFrame = sgsdk.GetSpriteCurrentFrame
GetSpriteCurrentFrame.argtypes = [c_void_p]
GetSpriteCurrentFrame.restype = c_int
_decorate_function(GetSpriteCurrentFrame, "GetSpriteCurrentFrame")

SetSpriteCurrentFrame = sgsdk.SetSpriteCurrentFrame
SetSpriteCurrentFrame.argtypes = [c_void_p, c_int]
SetSpriteCurrentFrame.restype = None
_decorate_function(SetSpriteCurrentFrame, "SetSpriteCurrentFrame")

GetSpriteUsePixelCollision = sgsdk.GetSpriteUsePixelCollision
GetSpriteUsePixelCollision.argtypes = [c_void_p]
GetSpriteUsePixelCollision.restype = c_int
_decorate_function(GetSpriteUsePixelCollision, "GetSpriteUsePixelCollision")

SetSpriteUsePixelCollision = sgsdk.SetSpriteUsePixelCollision
SetSpriteUsePixelCollision.argtypes = [c_void_p, c_int]
SetSpriteUsePixelCollision.restype = None
_decorate_function(SetSpriteUsePixelCollision, "SetSpriteUsePixelCollision")

CreateBitmap = sgsdk.CreateBitmap
CreateBitmap.argtypes = [c_int, c_int]
CreateBitmap.restype = c_void_p
_decorate_function(CreateBitmap, "CreateBitmap")

OptimiseBitmap = sgsdk.OptimiseBitmap
OptimiseBitmap.argtypes = [c_void_p]
OptimiseBitmap.restype = None
_decorate_function(OptimiseBitmap, "OptimiseBitmap")

LoadBitmapWithTransparentColor = sgsdk.LoadBitmapWithTransparentColor
LoadBitmapWithTransparentColor.argtypes = [c_char_p, c_int, c_uint32]
LoadBitmapWithTransparentColor.restype = c_void_p
_decorate_function(LoadBitmapWithTransparentColor, "LoadBitmapWithTransparentColor")

LoadTransparentBitmap = sgsdk.LoadTransparentBitmap
LoadTransparentBitmap.argtypes = [c_char_p, c_uint32]
LoadTransparentBitmap.restype = c_void_p
_decorate_function(LoadTransparentBitmap, "LoadTransparentBitmap")

FreeBitmap = sgsdk.FreeBitmap
FreeBitmap.argtypes = [c_void_p]
FreeBitmap.restype = None
_decorate_function(FreeBitmap, "FreeBitmap")

GetBitmapWidth = sgsdk.GetBitmapWidth
GetBitmapWidth.argtypes = [c_void_p]
GetBitmapWidth.restype = c_int
_decorate_function(GetBitmapWidth, "GetBitmapWidth")

GetBitmapHeight = sgsdk.GetBitmapHeight
GetBitmapHeight.argtypes = [c_void_p]
GetBitmapHeight.restype = c_int
_decorate_function(GetBitmapHeight, "GetBitmapHeight")

ClearSurfaceWithColor = sgsdk.ClearSurfaceWithColor
ClearSurfaceWithColor.argtypes = [c_void_p, c_uint32]
ClearSurfaceWithColor.restype = None
_decorate_function(ClearSurfaceWithColor, "ClearSurfaceWithColor")

DrawBitmapWithDestination = sgsdk.DrawBitmapWithDestination
DrawBitmapWithDestination.argtypes = [c_void_p, c_void_p, c_int, c_int]
DrawBitmapWithDestination.restype = None
_decorate_function(DrawBitmapWithDestination, "DrawBitmapWithDestination")

DrawBitmapPartWithDestination = sgsdk.DrawBitmapPartWithDestination
DrawBitmapPartWithDestination.argtypes = [c_void_p, c_void_p, c_int, c_int, c_int, c_int, c_int, c_int]
DrawBitmapPartWithDestination.restype = None
_decorate_function(DrawBitmapPartWithDestination, "DrawBitmapPartWithDestination")

DrawPixelWithDestination = sgsdk.DrawPixelWithDestination
DrawPixelWithDestination.argtypes = [c_void_p, c_uint32, c_int, c_int]
DrawPixelWithDestination.restype = None
_decorate_function(DrawPixelWithDestination, "DrawPixelWithDestination")

DrawRectangleWithDestination = sgsdk.DrawRectangleWithDestination
DrawRectangleWithDestination.argtypes = [c_void_p, c_uint32, c_int, c_int, c_int, c_int, c_int]
DrawRectangleWithDestination.restype = None
_decorate_function(DrawRectangleWithDestination, "DrawRectangleWithDestination")

FillRectangleWithDestination = sgsdk.FillRectangleWithDestination
FillRectangleWithDestination.argtypes = [c_void_p, c_uint32, c_int, c_int, c_int, c_int]
FillRectangleWithDestination.restype = None
_decorate_function(FillRectangleWithDestination, "FillRectangleWithDestination")

DrawLineWithDestination = sgsdk.DrawLineWithDestination
DrawLineWithDestination.argtypes = [c_void_p, c_uint32, c_int, c_int, c_int, c_int]
DrawLineWithDestination.restype = None
_decorate_function(DrawLineWithDestination, "DrawLineWithDestination")

DrawHorizontalLineWithDestination = sgsdk.DrawHorizontalLineWithDestination
DrawHorizontalLineWithDestination.argtypes = [c_void_p, c_uint32, c_int, c_int, c_int]
DrawHorizontalLineWithDestination.restype = None
_decorate_function(DrawHorizontalLineWithDestination, "DrawHorizontalLineWithDestination")

DrawVerticalLineWithDestination = sgsdk.DrawVerticalLineWithDestination
DrawVerticalLineWithDestination.argtypes = [c_void_p, c_uint32, c_int, c_int, c_int]
DrawVerticalLineWithDestination.restype = None
_decorate_function(DrawVerticalLineWithDestination, "DrawVerticalLineWithDestination")

DrawCircleWithDestination = sgsdk.DrawCircleWithDestination
DrawCircleWithDestination.argtypes = [c_void_p, c_uint32, c_int, c_int, c_int, c_int]
DrawCircleWithDestination.restype = None
_decorate_function(DrawCircleWithDestination, "DrawCircleWithDestination")

DrawEllipseWithDestination = sgsdk.DrawEllipseWithDestination
DrawEllipseWithDestination.argtypes = [c_void_p, c_uint32, c_int, c_int, c_int, c_int, c_int]
DrawEllipseWithDestination.restype = None
_decorate_function(DrawEllipseWithDestination, "DrawEllipseWithDestination")

ClearScreen = sgsdk.ClearScreen
ClearScreen.argtypes = [c_uint32]
ClearScreen.restype = None
_decorate_function(ClearScreen, "ClearScreen")

DrawBitmap = sgsdk.DrawBitmap
DrawBitmap.argtypes = [c_void_p, c_float, c_float]
DrawBitmap.restype = None
_decorate_function(DrawBitmap, "DrawBitmap")

DrawBitmapPart = sgsdk.DrawBitmapPart
DrawBitmapPart.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_float, c_float]
DrawBitmapPart.restype = None
_decorate_function(DrawBitmapPart, "DrawBitmapPart")

DrawPixel = sgsdk.DrawPixel
DrawPixel.argtypes = [c_uint32, c_float, c_float]
DrawPixel.restype = None
_decorate_function(DrawPixel, "DrawPixel")

DrawRectangle = sgsdk.DrawRectangle
DrawRectangle.argtypes = [c_uint32, c_int, c_float, c_float, c_int, c_int]
DrawRectangle.restype = None
_decorate_function(DrawRectangle, "DrawRectangle")

DrawLine = sgsdk.DrawLine
DrawLine.argtypes = [c_uint32, c_float, c_float, c_float, c_float]
DrawLine.restype = None
_decorate_function(DrawLine, "DrawLine")

DrawHorizontalLine = sgsdk.DrawHorizontalLine
DrawHorizontalLine.argtypes = [c_uint32, c_float, c_float, c_float]
DrawHorizontalLine.restype = None
_decorate_function(DrawHorizontalLine, "DrawHorizontalLine")

DrawVerticalLine = sgsdk.DrawVerticalLine
DrawVerticalLine.argtypes = [c_uint32, c_float, c_float, c_float]
DrawVerticalLine.restype = None
_decorate_function(DrawVerticalLine, "DrawVerticalLine")

DrawCircle = sgsdk.DrawCircle
DrawCircle.argtypes = [c_uint32, c_int, c_float, c_float, c_int]
DrawCircle.restype = None
_decorate_function(DrawCircle, "DrawCircle")

DrawEllipse = sgsdk.DrawEllipse
DrawEllipse.argtypes = [c_uint32, c_int, c_float, c_float, c_int, c_int]
DrawEllipse.restype = None
_decorate_function(DrawEllipse, "DrawEllipse")

CreateSprite = sgsdk.CreateSprite
CreateSprite.argtypes = [c_void_p]
CreateSprite.restype = c_void_p
_decorate_function(CreateSprite, "CreateSprite")

CreateSpriteMultiFPC = sgsdk.CreateSpriteMultiFPC
CreateSpriteMultiFPC.argtypes = [c_void_p, c_int, c_int, c_int, c_int]
CreateSpriteMultiFPC.restype = c_void_p
_decorate_function(CreateSpriteMultiFPC, "CreateSpriteMultiFPC")

CreateSpriteArrayFPC = sgsdk.CreateSpriteArrayFPC
CreateSpriteArrayFPC.argtypes = [c_int, c_void_p, c_int, c_int]
CreateSpriteArrayFPC.restype = c_void_p
_decorate_function(CreateSpriteArrayFPC, "CreateSpriteArrayFPC")

CreateSpriteMultiEnding = sgsdk.CreateSpriteMultiEnding
CreateSpriteMultiEnding.argtypes = [c_void_p, c_int, c_int, c_void_p, SpriteEndingAction, c_int, c_int]
CreateSpriteMultiEnding.restype = c_void_p
_decorate_function(CreateSpriteMultiEnding, "CreateSpriteMultiEnding")

CreateSpriteMulti = sgsdk.CreateSpriteMulti
CreateSpriteMulti.argtypes = [c_void_p, c_int, c_int, c_void_p, c_int, c_int]
CreateSpriteMulti.restype = c_void_p
_decorate_function(CreateSpriteMulti, "CreateSpriteMulti")

CreateSpriteArrayEnding = sgsdk.CreateSpriteArrayEnding
CreateSpriteArrayEnding.argtypes = [c_int, c_void_p, c_int, c_void_p, SpriteEndingAction]
CreateSpriteArrayEnding.restype = c_void_p
_decorate_function(CreateSpriteArrayEnding, "CreateSpriteArrayEnding")

CreateSpriteArray = sgsdk.CreateSpriteArray
CreateSpriteArray.argtypes = [c_int, c_void_p, c_int, c_void_p]
CreateSpriteArray.restype = c_void_p
_decorate_function(CreateSpriteArray, "CreateSpriteArray")

UpdateSpriteAnimation = sgsdk.UpdateSpriteAnimation
UpdateSpriteAnimation.argtypes = [c_void_p]
UpdateSpriteAnimation.restype = None
_decorate_function(UpdateSpriteAnimation, "UpdateSpriteAnimation")

UpdateSprite = sgsdk.UpdateSprite
UpdateSprite.argtypes = [c_void_p]
UpdateSprite.restype = None
_decorate_function(UpdateSprite, "UpdateSprite")

GetSpriteKind = sgsdk.GetSpriteKind
GetSpriteKind.argtypes = [c_void_p]
GetSpriteKind.restype = c_int
_decorate_function(GetSpriteKind, "GetSpriteKind")

SetSpriteKind = sgsdk.SetSpriteKind
SetSpriteKind.argtypes = [c_void_p, SpriteKind]
SetSpriteKind.restype = None
_decorate_function(SetSpriteKind, "SetSpriteKind")

SetSpriteFramesPerCell = sgsdk.SetSpriteFramesPerCell
SetSpriteFramesPerCell.argtypes = [c_void_p, c_void_p, c_int]
SetSpriteFramesPerCell.restype = None
_decorate_function(SetSpriteFramesPerCell, "SetSpriteFramesPerCell")

GetSpriteFramesPerCell = sgsdk.GetSpriteFramesPerCell
GetSpriteFramesPerCell.argtypes = [c_void_p, c_int]
GetSpriteFramesPerCell.restype = c_int
_decorate_function(GetSpriteFramesPerCell, "GetSpriteFramesPerCell")

GetSpriteCols = sgsdk.GetSpriteCols
GetSpriteCols.argtypes = [c_void_p]
GetSpriteCols.restype = c_int
_decorate_function(GetSpriteCols, "GetSpriteCols")

GetSpriteRow = sgsdk.GetSpriteRow
GetSpriteRow.argtypes = [c_void_p]
GetSpriteRow.restype = c_int
_decorate_function(GetSpriteRow, "GetSpriteRow")

GetSpriteFrameCount = sgsdk.GetSpriteFrameCount
GetSpriteFrameCount.argtypes = [c_void_p]
GetSpriteFrameCount.restype = c_int
_decorate_function(GetSpriteFrameCount, "GetSpriteFrameCount")

GetSpriteEndingAction = sgsdk.GetSpriteEndingAction
GetSpriteEndingAction.argtypes = [c_void_p]
GetSpriteEndingAction.restype = c_int
_decorate_function(GetSpriteEndingAction, "GetSpriteEndingAction")

SetSpriteEndingAction = sgsdk.SetSpriteEndingAction
SetSpriteEndingAction.argtypes = [c_void_p, SpriteEndingAction]
SetSpriteEndingAction.restype = None
_decorate_function(SetSpriteEndingAction, "SetSpriteEndingAction")

GetSpritehasEnded = sgsdk.GetSpritehasEnded
GetSpritehasEnded.argtypes = [c_void_p]
GetSpritehasEnded.restype = c_int
_decorate_function(GetSpritehasEnded, "GetSpritehasEnded")

GetSpriteReverse = sgsdk.GetSpriteReverse
GetSpriteReverse.argtypes = [c_void_p]
GetSpriteReverse.restype = c_int
_decorate_function(GetSpriteReverse, "GetSpriteReverse")

GetSpriteMass = sgsdk.GetSpriteMass
GetSpriteMass.argtypes = [c_void_p]
GetSpriteMass.restype = c_float
_decorate_function(GetSpriteMass, "GetSpriteMass")

GetSpriteMovement = sgsdk.GetSpriteMovement
GetSpriteMovement.argtypes = [c_void_p]
GetSpriteMovement.restype = Vector
_decorate_function(GetSpriteMovement, "GetSpriteMovement")

SetSpriteMass = sgsdk.SetSpriteMass
SetSpriteMass.argtypes = [c_void_p, c_float]
SetSpriteMass.restype = None
_decorate_function(SetSpriteMass, "SetSpriteMass")

SetSpriteMovement = sgsdk.SetSpriteMovement
SetSpriteMovement.argtypes = [c_void_p, Vector]
SetSpriteMovement.restype = None
_decorate_function(SetSpriteMovement, "SetSpriteMovement")

FreeSprite = sgsdk.FreeSprite
FreeSprite.argtypes = [c_void_p]
FreeSprite.restype = None
_decorate_function(FreeSprite, "FreeSprite")

AddBitmapToSprite = sgsdk.AddBitmapToSprite
AddBitmapToSprite.argtypes = [c_void_p, c_void_p]
AddBitmapToSprite.restype = c_int
_decorate_function(AddBitmapToSprite, "AddBitmapToSprite")

CurrentHeight = sgsdk.CurrentHeight
CurrentHeight.argtypes = [c_void_p]
CurrentHeight.restype = c_int
_decorate_function(CurrentHeight, "CurrentHeight")

CurrentWidth = sgsdk.CurrentWidth
CurrentWidth.argtypes = [c_void_p]
CurrentWidth.restype = c_int
_decorate_function(CurrentWidth, "CurrentWidth")

DrawSprite = sgsdk.DrawSprite
DrawSprite.argtypes = [c_void_p, c_int, c_int]
DrawSprite.restype = None
_decorate_function(DrawSprite, "DrawSprite")

MoveSpriteItself = sgsdk.MoveSpriteItself
MoveSpriteItself.argtypes = [c_void_p]
MoveSpriteItself.restype = None
_decorate_function(MoveSpriteItself, "MoveSpriteItself")

MoveSprite = sgsdk.MoveSprite
MoveSprite.argtypes = [c_void_p, Vector]
MoveSprite.restype = None
_decorate_function(MoveSprite, "MoveSprite")

MoveSpriteTo = sgsdk.MoveSpriteTo
MoveSpriteTo.argtypes = [c_void_p, c_int, c_int]
MoveSpriteTo.restype = None
_decorate_function(MoveSpriteTo, "MoveSpriteTo")

IsSpriteOffscreen = sgsdk.IsSpriteOffscreen
IsSpriteOffscreen.argtypes = [c_void_p]
IsSpriteOffscreen.restype = c_int
_decorate_function(IsSpriteOffscreen, "IsSpriteOffscreen")

ReplayAnimation = sgsdk.ReplayAnimation
ReplayAnimation.argtypes = [c_void_p]
ReplayAnimation.restype = None
_decorate_function(ReplayAnimation, "ReplayAnimation")

DrawBitmapPartOnScreen = sgsdk.DrawBitmapPartOnScreen
DrawBitmapPartOnScreen.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_int]
DrawBitmapPartOnScreen.restype = None
_decorate_function(DrawBitmapPartOnScreen, "DrawBitmapPartOnScreen")

DrawBitmapOnScreen = sgsdk.DrawBitmapOnScreen
DrawBitmapOnScreen.argtypes = [c_void_p, c_int, c_int]
DrawBitmapOnScreen.restype = None
_decorate_function(DrawBitmapOnScreen, "DrawBitmapOnScreen")

DrawPixelOnScreen = sgsdk.DrawPixelOnScreen
DrawPixelOnScreen.argtypes = [c_uint32, c_int, c_int]
DrawPixelOnScreen.restype = None
_decorate_function(DrawPixelOnScreen, "DrawPixelOnScreen")

DrawRectangleOnScreen = sgsdk.DrawRectangleOnScreen
DrawRectangleOnScreen.argtypes = [c_uint32, c_int, c_int, c_int, c_int, c_int]
DrawRectangleOnScreen.restype = None
_decorate_function(DrawRectangleOnScreen, "DrawRectangleOnScreen")

DrawLineOnScreen = sgsdk.DrawLineOnScreen
DrawLineOnScreen.argtypes = [c_uint32, c_int, c_int, c_int, c_int]
DrawLineOnScreen.restype = None
_decorate_function(DrawLineOnScreen, "DrawLineOnScreen")

DrawHorizontalLineOnScreen = sgsdk.DrawHorizontalLineOnScreen
DrawHorizontalLineOnScreen.argtypes = [c_uint32, c_int, c_int, c_int]
DrawHorizontalLineOnScreen.restype = None
_decorate_function(DrawHorizontalLineOnScreen, "DrawHorizontalLineOnScreen")

DrawVerticalLineOnScreen = sgsdk.DrawVerticalLineOnScreen
DrawVerticalLineOnScreen.argtypes = [c_uint32, c_int, c_int, c_int]
DrawVerticalLineOnScreen.restype = None
_decorate_function(DrawVerticalLineOnScreen, "DrawVerticalLineOnScreen")

DrawCircleOnScreen = sgsdk.DrawCircleOnScreen
DrawCircleOnScreen.argtypes = [c_uint32, c_int, c_int, c_int, c_int]
DrawCircleOnScreen.restype = None
_decorate_function(DrawCircleOnScreen, "DrawCircleOnScreen")

DrawEllipseOnScreen = sgsdk.DrawEllipseOnScreen
DrawEllipseOnScreen.argtypes = [c_uint32, c_int, c_int, c_int, c_int, c_int]
DrawEllipseOnScreen.restype = None
_decorate_function(DrawEllipseOnScreen, "DrawEllipseOnScreen")

XOffset = sgsdk.XOffset
XOffset.argtypes = []
XOffset.restype = c_int
_decorate_function(XOffset, "XOffset")

YOffset = sgsdk.YOffset
YOffset.argtypes = []
YOffset.restype = c_int
_decorate_function(YOffset, "YOffset")

ScreenX = sgsdk.ScreenX
ScreenX.argtypes = [c_float]
ScreenX.restype = c_int
_decorate_function(ScreenX, "ScreenX")

ScreenY = sgsdk.ScreenY
ScreenY.argtypes = [c_float]
ScreenY.restype = c_int
_decorate_function(ScreenY, "ScreenY")

GameX = sgsdk.GameX
GameX.argtypes = [c_int]
GameX.restype = c_float
_decorate_function(GameX, "GameX")

GameY = sgsdk.GameY
GameY.argtypes = [c_int]
GameY.restype = c_float
_decorate_function(GameY, "GameY")

ToGameCoordinates = sgsdk.ToGameCoordinates
ToGameCoordinates.argtypes = [Point2D]
ToGameCoordinates.restype = Point2D
_decorate_function(ToGameCoordinates, "ToGameCoordinates")

MoveVisualArea = sgsdk.MoveVisualArea
MoveVisualArea.argtypes = [c_float, c_float]
MoveVisualArea.restype = None
_decorate_function(MoveVisualArea, "MoveVisualArea")

SetScreenOffset = sgsdk.SetScreenOffset
SetScreenOffset.argtypes = [c_float, c_float]
SetScreenOffset.restype = None
_decorate_function(SetScreenOffset, "SetScreenOffset")

FollowSprite = sgsdk.FollowSprite
FollowSprite.argtypes = [c_void_p, c_int, c_int]
FollowSprite.restype = None
_decorate_function(FollowSprite, "FollowSprite")

SetClip = sgsdk.SetClip
SetClip.argtypes = [c_void_p, c_int, c_int, c_int, c_int]
SetClip.restype = None
_decorate_function(SetClip, "SetClip")

ResetClip = sgsdk.ResetClip
ResetClip.argtypes = [c_void_p]
ResetClip.restype = None
_decorate_function(ResetClip, "ResetClip")

LoadMap = sgsdk.LoadMap
LoadMap.argtypes = [c_char_p, c_char_p]
LoadMap.restype = c_void_p
_decorate_function(LoadMap, "LoadMap")

DrawMap = sgsdk.DrawMap
DrawMap.argtypes = [c_void_p]
DrawMap.restype = None
_decorate_function(DrawMap, "DrawMap")

CollisionWithMapVector = sgsdk.CollisionWithMapVector
CollisionWithMapVector.argtypes = [c_void_p, c_void_p, Vector]
CollisionWithMapVector.restype = CollisionSide
_decorate_function(CollisionWithMapVector, "CollisionWithMapVector")

EventCount = sgsdk.EventCount
EventCount.argtypes = [c_void_p, EventKind]
EventCount.restype = c_int
_decorate_function(EventCount, "EventCount")

EventPositionX = sgsdk.EventPositionX
EventPositionX.argtypes = [c_void_p, EventKind, c_int]
EventPositionX.restype = c_int
_decorate_function(EventPositionX, "EventPositionX")

EventPositionY = sgsdk.EventPositionY
EventPositionY.argtypes = [c_void_p, EventKind, c_int]
EventPositionY.restype = c_int
_decorate_function(EventPositionY, "EventPositionY")

FreeMap = sgsdk.FreeMap
FreeMap.argtypes = [c_void_p]
FreeMap.restype = None
_decorate_function(FreeMap, "FreeMap")

SpriteHasCollidedWithMapTile = sgsdk.SpriteHasCollidedWithMapTile
SpriteHasCollidedWithMapTile.argtypes = [c_void_p, c_void_p, c_int, c_int]
SpriteHasCollidedWithMapTile.restype = c_int
_decorate_function(SpriteHasCollidedWithMapTile, "SpriteHasCollidedWithMapTile")

WillCollideOnSide = sgsdk.WillCollideOnSide
WillCollideOnSide.argtypes = [c_void_p, c_void_p]
WillCollideOnSide.restype = CollisionSide
_decorate_function(WillCollideOnSide, "WillCollideOnSide")

MoveSpriteOutOfTile = sgsdk.MoveSpriteOutOfTile
MoveSpriteOutOfTile.argtypes = [c_void_p, c_void_p, c_int, c_int]
MoveSpriteOutOfTile.restype = None
_decorate_function(MoveSpriteOutOfTile, "MoveSpriteOutOfTile")

DistancePointToLine = sgsdk.DistancePointToLine
DistancePointToLine.argtypes = [c_float, c_float, LineSegment]
DistancePointToLine.restype = c_float
_decorate_function(DistancePointToLine, "DistancePointToLine")

ClosestPointOnLine = sgsdk.ClosestPointOnLine
ClosestPointOnLine.argtypes = [c_float, c_float, LineSegment]
ClosestPointOnLine.restype = Point2D
_decorate_function(ClosestPointOnLine, "ClosestPointOnLine")

CenterPoint = sgsdk.CenterPoint
CenterPoint.argtypes = [c_void_p]
CenterPoint.restype = Point2D
_decorate_function(CenterPoint, "CenterPoint")

IsPointOnLine = sgsdk.IsPointOnLine
IsPointOnLine.argtypes = [Point2D, LineSegment]
IsPointOnLine.restype = c_int
_decorate_function(IsPointOnLine, "IsPointOnLine")

GetLineIntersectionPoint = sgsdk.GetLineIntersectionPoint
GetLineIntersectionPoint.argtypes = [LineSegment, LineSegment, Point2D]
GetLineIntersectionPoint.restype = c_int
_decorate_function(GetLineIntersectionPoint, "GetLineIntersectionPoint")

LineIntersectsWithLines = sgsdk.LineIntersectsWithLines
LineIntersectsWithLines.argtypes = [LineSegment, c_int, c_void_p]
LineIntersectsWithLines.restype = c_int
_decorate_function(LineIntersectsWithLines, "LineIntersectsWithLines")

HasBitmapCollidedWithRect = sgsdk.HasBitmapCollidedWithRect
HasBitmapCollidedWithRect.argtypes = [c_void_p, c_int, c_int, c_int, c_int, c_int, c_int]
HasBitmapCollidedWithRect.restype = c_int
_decorate_function(HasBitmapCollidedWithRect, "HasBitmapCollidedWithRect")

__all__ = ['AddBitmapToSprite', 'CalculateAngle', 'CenterPoint',
           'ChangeScreenSize', 'CircleCollisionWithLine',
           'CircleHasCollidedWithLine', 'CircularCollision', 'ClearScreen',
           'ClearSurfaceWithColor', 'CloseAudio', 'ClosestPointOnLine',
           'CollisionWithMapVector', 'CreateBitmap', 'CreateSprite',
           'CreateSpriteArray', 'CreateSpriteArrayEnding',
           'CreateSpriteArrayFPC', 'CreateSpriteMulti',
           'CreateSpriteMultiEnding', 'CreateSpriteMultiFPC', 'CreateTimer',
           'CurrentHeight', 'CurrentWidth', 'DistancePointToLine', 'DrawBitmap',
           'DrawBitmapOnScreen', 'DrawBitmapPart', 'DrawBitmapPartOnScreen',
           'DrawBitmapPartWithDestination', 'DrawBitmapWithDestination',
           'DrawCircle', 'DrawCircleOnScreen', 'DrawCircleWithDestination',
           'DrawEllipse', 'DrawEllipseOnScreen', 'DrawEllipseWithDestination',
           'DrawFramerate', 'DrawHorizontalLine', 'DrawHorizontalLineOnScreen',
           'DrawHorizontalLineWithDestination', 'DrawLine', 'DrawLineOnScreen',
           'DrawLineWithDestination', 'DrawMap', 'DrawPixel',
           'DrawPixelOnScreen', 'DrawPixelWithDestination', 'DrawRectangle',
           'DrawRectangleOnScreen', 'DrawRectangleWithDestination',
           'DrawSprite', 'DrawText', 'DrawTextLines', 'DrawTextLinesOnBitmap',
           'DrawTextLinesOnScreen', 'DrawTextOnBitmap', 'DrawTextOnScreen',
           'DrawVerticalLine', 'DrawVerticalLineOnScreen',
           'DrawVerticalLineWithDestination', 'EventCount', 'EventPositionX',
           'EventPositionY', 'ExceptionOccured', 'FillRectangleWithDestination',
           'FollowSprite', 'FreeBitmap', 'FreeFont', 'FreeMap', 'FreeMatrix2D',
           'FreeMusic', 'FreeSoundEffect', 'FreeSprite', 'FreeTimer', 'GameX',
           'GameY', 'GetBitmapHeight', 'GetBitmapWidth', 'GetColourBitmap',
           'GetColourRGBA', 'GetExceptionMessage', 'GetFramerate',
           'GetLineIntersectionPoint', 'GetMatrix2DElement', 'GetMouseMovement',
           'GetMouseXY', 'GetPathToResource', 'GetPathToResourceWithBase',
           'GetPathToResourceWithBaseAndKind', 'GetPathToResourceWithKind',
           'GetPixel', 'GetPixelFromScreen', 'GetSpriteBitmap', 'GetSpriteCols',
           'GetSpriteCurrentFrame', 'GetSpriteEndingAction',
           'GetSpriteFrameCount', 'GetSpriteFramesPerCell', 'GetSpriteKind',
           'GetSpriteMass', 'GetSpriteMovement', 'GetSpriteReverse',
           'GetSpriteRow', 'GetSpriteUsePixelCollision', 'GetSpriteX',
           'GetSpriteY', 'GetSpritehasEnded', 'GetTicks', 'GetTimerTicks',
           'GetUnitVector', 'HasBitmapCollidedWithRect',
           'HasSpriteCollidedWithBitmap', 'HasSpriteCollidedWithBitmapPart',
           'HasSpriteCollidedWithRect', 'HasSpriteCollidedX',
           'HasSpriteCollidedY', 'HaveBitmapPartsCollided',
           'HaveBitmapsCollided', 'HaveSpritesCollided', 'IsKeyPressed',
           'IsMouseDown', 'IsMouseShown', 'IsMouseUp', 'IsMusicPlaying',
           'IsPointOnLine', 'IsReadingText', 'IsSoundEffectPlaying',
           'IsSpriteOffscreen', 'IsSpriteOnScreenAt', 'LimitMagnitude',
           'LineIntersectsWithLines', 'LoadBitmapWithTransparentColor',
           'LoadFont', 'LoadMap', 'LoadMusic', 'LoadSoundEffect',
           'LoadTransparentBitmap', 'MouseWasClicked', 'MoveMouse',
           'MoveSprite', 'MoveSpriteItself', 'MoveSpriteOutOfTile',
           'MoveSpriteTo', 'MoveVisualArea', 'MultiplyMatrix2D',
           'MultiplyMatrix2DAndVector', 'OpenAudio', 'OpenGraphicsWindow',
           'OptimiseBitmap', 'PauseTimer', 'PlayMusic', 'PlaySoundEffectLoop',
           'ProcessEvents', 'RectangleHasCollidedWithLine', 'RefreshScreen',
           'RefreshScreenWithFrame', 'ReplayAnimation', 'ResetClip',
           'RotationMatrix', 'ScaleMatrix', 'ScreenHeight', 'ScreenWidth',
           'ScreenX', 'ScreenY', 'SetClip', 'SetFontStyle', 'SetIcon',
           'SetMatrix2DElement', 'SetScreenOffset', 'SetSpriteCurrentFrame',
           'SetSpriteEndingAction', 'SetSpriteFramesPerCell', 'SetSpriteKind',
           'SetSpriteMass', 'SetSpriteMovement', 'SetSpriteUsePixelCollision',
           'SetSpriteX', 'SetSpriteY', 'ShowMouse', 'Sleep',
           'SpriteHasCollidedWithMapTile', 'StartReadingText', 'StartTimer',
           'StopMusic', 'StopSoundEffect', 'StopTimer', 'TakeScreenShot',
           'TextHeight', 'TextReadAsASCII', 'TextWidth', 'ToGameCoordinates',
           'ToSDLColor', 'ToggleFullScreen', 'TranslationMatrix',
           'UnpauseTimer', 'UpdateSprite', 'UpdateSpriteAnimation',
           'VectorCollision', 'VectorOutOfCircleFromCircle',
           'VectorOutOfCircleFromPoint', 'VectorOutOfRectFromPoint',
           'VectorOutOfRectFromRect', 'WasKeyTyped', 'WillCollideOnSide',
           'WindowCloseRequested', 'XOffset', 'YOffset']
using System;
using System.Text;
using System.Runtime.InteropServices;
using System.Drawing;

//
// This file has been generated by sgsdk_pas_to_cs.py. Do not edit by hand! :)
//

namespace SwinGame
{

    internal class SGSDK
    {
		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DLLVersion", CharSet=CharSet.Ansi)]
		private static extern int DLL_DLLVersion();

		public static int DLLVersion()
		{
			int localResult;
			try
			{
				localResult = DLL_DLLVersion();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetExceptionMessage", CharSet=CharSet.Ansi)]
		private static extern void DLL_GetExceptionMessage([MarshalAs(UnmanagedType.LPStr), Out] StringBuilder result);

		public static void GetExceptionMessage([MarshalAs(UnmanagedType.LPStr), Out] StringBuilder result)
		{
			try
			{
				DLL_GetExceptionMessage( result);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ExceptionOccured", CharSet=CharSet.Ansi)]
		private static extern int DLL_ExceptionOccured();

		public static int ExceptionOccured()
		{
			int localResult;
			try
			{
				localResult = DLL_ExceptionOccured();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ProcessEvents", CharSet=CharSet.Ansi)]
		private static extern void DLL_ProcessEvents();

		public static void ProcessEvents()
		{
			try
			{
				DLL_ProcessEvents();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="OpenGraphicsWindow", CharSet=CharSet.Ansi)]
		private static extern void DLL_OpenGraphicsWindow([MarshalAs(UnmanagedType.LPStr)]string caption, int width, int height);

		public static void OpenGraphicsWindow([MarshalAs(UnmanagedType.LPStr)]string caption, int width, int height)
		{
			try
			{
				DLL_OpenGraphicsWindow( caption,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="WindowCloseRequested", CharSet=CharSet.Ansi)]
		private static extern int DLL_WindowCloseRequested();

		public static int WindowCloseRequested()
		{
			int localResult;
			try
			{
				localResult = DLL_WindowCloseRequested();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetIcon", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetIcon([MarshalAs(UnmanagedType.LPStr)]string iconFilename);

		public static void SetIcon([MarshalAs(UnmanagedType.LPStr)]string iconFilename)
		{
			try
			{
				DLL_SetIcon( iconFilename);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ChangeScreenSize", CharSet=CharSet.Ansi)]
		private static extern void DLL_ChangeScreenSize(int width, int height);

		public static void ChangeScreenSize(int width, int height)
		{
			try
			{
				DLL_ChangeScreenSize( width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ToggleFullScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_ToggleFullScreen();

		public static void ToggleFullScreen()
		{
			try
			{
				DLL_ToggleFullScreen();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="RefreshScreenWithFrame", CharSet=CharSet.Ansi)]
		private static extern void DLL_RefreshScreenWithFrame(int TargetFPS);

		public static void RefreshScreenWithFrame(int TargetFPS)
		{
			try
			{
				DLL_RefreshScreenWithFrame( TargetFPS);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="RefreshScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_RefreshScreen();

		public static void RefreshScreen()
		{
			try
			{
				DLL_RefreshScreen();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="TakeScreenShot", CharSet=CharSet.Ansi)]
		private static extern void DLL_TakeScreenShot([MarshalAs(UnmanagedType.LPStr)]string basename);

		public static void TakeScreenShot([MarshalAs(UnmanagedType.LPStr)]string basename)
		{
			try
			{
				DLL_TakeScreenShot( basename);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ScreenWidth", CharSet=CharSet.Ansi)]
		private static extern int DLL_ScreenWidth();

		public static int ScreenWidth()
		{
			int localResult;
			try
			{
				localResult = DLL_ScreenWidth();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ScreenHeight", CharSet=CharSet.Ansi)]
		private static extern int DLL_ScreenHeight();

		public static int ScreenHeight()
		{
			int localResult;
			try
			{
				localResult = DLL_ScreenHeight();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ToSDLColor", CharSet=CharSet.Ansi)]
		private static extern uint DLL_ToSDLColor(uint color);

		public static uint ToSDLColor(uint color)
		{
			uint localResult;
			try
			{
				localResult = DLL_ToSDLColor( color);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetColourBitmap", CharSet=CharSet.Ansi)]
		private static extern uint DLL_GetColourBitmap(IntPtr forBitmap, uint apiColor);

		public static uint GetColourBitmap(IntPtr forBitmap, uint apiColor)
		{
			uint localResult;
			try
			{
				localResult = DLL_GetColourBitmap( forBitmap,  apiColor);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetColourRGBA", CharSet=CharSet.Ansi)]
		private static extern uint DLL_GetColourRGBA(byte red, byte green, byte blue, byte alpha);

		public static uint GetColourRGBA(byte red, byte green, byte blue, byte alpha)
		{
			uint localResult;
			try
			{
				localResult = DLL_GetColourRGBA( red,  green,  blue,  alpha);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetFramerate", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetFramerate();

		public static int GetFramerate()
		{
			int localResult;
			try
			{
				localResult = DLL_GetFramerate();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetTicks", CharSet=CharSet.Ansi)]
		private static extern uint DLL_GetTicks();

		public static uint GetTicks()
		{
			uint localResult;
			try
			{
				localResult = DLL_GetTicks();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="Sleep", CharSet=CharSet.Ansi)]
		private static extern void DLL_Sleep(uint time);

		public static void Sleep(uint time)
		{
			try
			{
				DLL_Sleep( time);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetPathToResourceWithBaseAndKind", CharSet=CharSet.Ansi)]
		private static extern void DLL_GetPathToResourceWithBaseAndKind([MarshalAs(UnmanagedType.LPStr)]string path, [MarshalAs(UnmanagedType.LPStr)]string filename, int kind, [MarshalAs(UnmanagedType.LPStr)]string result);

		public static void GetPathToResourceWithBaseAndKind([MarshalAs(UnmanagedType.LPStr)]string path, [MarshalAs(UnmanagedType.LPStr)]string filename, int kind, [MarshalAs(UnmanagedType.LPStr)]string result)
		{
			try
			{
				DLL_GetPathToResourceWithBaseAndKind( path,  filename,  kind,  result);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateTimer", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateTimer();

		public static IntPtr CreateTimer()
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateTimer();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FreeTimer", CharSet=CharSet.Ansi)]
		private static extern void DLL_FreeTimer(IntPtr toFree);

		public static void FreeTimer(IntPtr toFree)
		{
			try
			{
				DLL_FreeTimer( toFree);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="StartTimer", CharSet=CharSet.Ansi)]
		private static extern void DLL_StartTimer(IntPtr toStart);

		public static void StartTimer(IntPtr toStart)
		{
			try
			{
				DLL_StartTimer( toStart);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="StopTimer", CharSet=CharSet.Ansi)]
		private static extern void DLL_StopTimer(IntPtr toStop);

		public static void StopTimer(IntPtr toStop)
		{
			try
			{
				DLL_StopTimer( toStop);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="PauseTimer", CharSet=CharSet.Ansi)]
		private static extern void DLL_PauseTimer(IntPtr toPause);

		public static void PauseTimer(IntPtr toPause)
		{
			try
			{
				DLL_PauseTimer( toPause);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="UnpauseTimer", CharSet=CharSet.Ansi)]
		private static extern void DLL_UnpauseTimer(IntPtr toUnpause);

		public static void UnpauseTimer(IntPtr toUnpause)
		{
			try
			{
				DLL_UnpauseTimer( toUnpause);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetTimerTicks", CharSet=CharSet.Ansi)]
		private static extern uint DLL_GetTimerTicks(IntPtr toGet);

		public static uint GetTimerTicks(IntPtr toGet)
		{
			uint localResult;
			try
			{
				localResult = DLL_GetTimerTicks( toGet);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ShowMouse", CharSet=CharSet.Ansi)]
		private static extern void DLL_ShowMouse(int show);

		public static void ShowMouse(int show)
		{
			try
			{
				DLL_ShowMouse( show);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsMouseShown", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsMouseShown();

		public static int IsMouseShown()
		{
			int localResult;
			try
			{
				localResult = DLL_IsMouseShown();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MoveMouse", CharSet=CharSet.Ansi)]
		private static extern void DLL_MoveMouse(UInt16 x, UInt16 y);

		public static void MoveMouse(UInt16 x, UInt16 y)
		{
			try
			{
				DLL_MoveMouse( x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetMouseXY", CharSet=CharSet.Ansi)]
		private static extern void DLL_GetMouseXY([Out] out float x, [Out] out float y);

		public static void GetMouseXY([Out] out float x, [Out] out float y)
		{
			try
			{
				DLL_GetMouseXY(out x, out y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetMouseMovement", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_GetMouseMovement();

		public static Vector GetMouseMovement()
		{
			Vector localResult;
			try
			{
				localResult = DLL_GetMouseMovement();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsMouseDown", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsMouseDown(MouseButton button);

		public static int IsMouseDown(MouseButton button)
		{
			int localResult;
			try
			{
				localResult = DLL_IsMouseDown( button);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsMouseUp", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsMouseUp(MouseButton button);

		public static int IsMouseUp(MouseButton button)
		{
			int localResult;
			try
			{
				localResult = DLL_IsMouseUp( button);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MouseWasClicked", CharSet=CharSet.Ansi)]
		private static extern int DLL_MouseWasClicked(MouseButton button);

		public static int MouseWasClicked(MouseButton button)
		{
			int localResult;
			try
			{
				localResult = DLL_MouseWasClicked( button);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="StartReadingText", CharSet=CharSet.Ansi)]
		private static extern void DLL_StartReadingText(uint textColor, int maxLength, IntPtr theFont, int x, int y);

		public static void StartReadingText(uint textColor, int maxLength, IntPtr theFont, int x, int y)
		{
			try
			{
				DLL_StartReadingText( textColor,  maxLength,  theFont,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsReadingText", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsReadingText();

		public static int IsReadingText()
		{
			int localResult;
			try
			{
				localResult = DLL_IsReadingText();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="EndReadingText", CharSet=CharSet.Ansi)]
		private static extern void DLL_EndReadingText([MarshalAs(UnmanagedType.LPStr), Out] StringBuilder result);

		public static void EndReadingText([MarshalAs(UnmanagedType.LPStr), Out] StringBuilder result)
		{
			try
			{
				DLL_EndReadingText( result);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="TextReadAsASCII", CharSet=CharSet.Ansi)]
		private static extern void DLL_TextReadAsASCII([MarshalAs(UnmanagedType.LPStr), Out] StringBuilder result);

		public static void TextReadAsASCII([MarshalAs(UnmanagedType.LPStr), Out] StringBuilder result)
		{
			try
			{
				DLL_TextReadAsASCII( result);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsKeyPressed", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsKeyPressed(int virtKeyCode);

		public static int IsKeyPressed(int virtKeyCode)
		{
			int localResult;
			try
			{
				localResult = DLL_IsKeyPressed( virtKeyCode);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="WasKeyTyped", CharSet=CharSet.Ansi)]
		private static extern int DLL_WasKeyTyped(int virtKeyCode);

		public static int WasKeyTyped(int virtKeyCode)
		{
			int localResult;
			try
			{
				localResult = DLL_WasKeyTyped( virtKeyCode);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="OpenAudio", CharSet=CharSet.Ansi)]
		private static extern void DLL_OpenAudio();

		public static void OpenAudio()
		{
			try
			{
				DLL_OpenAudio();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CloseAudio", CharSet=CharSet.Ansi)]
		private static extern void DLL_CloseAudio();

		public static void CloseAudio()
		{
			try
			{
				DLL_CloseAudio();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="LoadSoundEffect", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_LoadSoundEffect([MarshalAs(UnmanagedType.LPStr)]string path);

		public static IntPtr LoadSoundEffect([MarshalAs(UnmanagedType.LPStr)]string path)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_LoadSoundEffect( path);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="LoadMusic", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_LoadMusic([MarshalAs(UnmanagedType.LPStr)]string path);

		public static IntPtr LoadMusic([MarshalAs(UnmanagedType.LPStr)]string path)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_LoadMusic( path);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FreeMusic", CharSet=CharSet.Ansi)]
		private static extern void DLL_FreeMusic(IntPtr mus);

		public static void FreeMusic(IntPtr mus)
		{
			try
			{
				DLL_FreeMusic( mus);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FreeSoundEffect", CharSet=CharSet.Ansi)]
		private static extern void DLL_FreeSoundEffect(IntPtr effect);

		public static void FreeSoundEffect(IntPtr effect)
		{
			try
			{
				DLL_FreeSoundEffect( effect);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="PlaySoundEffect", CharSet=CharSet.Ansi)]
		private static extern void DLL_PlaySoundEffect(IntPtr effect);

		public static void PlaySoundEffect(IntPtr effect)
		{
			try
			{
				DLL_PlaySoundEffect( effect);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="PlaySoundEffectLoop", CharSet=CharSet.Ansi)]
		private static extern void DLL_PlaySoundEffectLoop(IntPtr effect, int loops);

		public static void PlaySoundEffectLoop(IntPtr effect, int loops)
		{
			try
			{
				DLL_PlaySoundEffectLoop( effect,  loops);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="PlayMusic", CharSet=CharSet.Ansi)]
		private static extern void DLL_PlayMusic(IntPtr mus, int loops);

		public static void PlayMusic(IntPtr mus, int loops)
		{
			try
			{
				DLL_PlayMusic( mus,  loops);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsMusicPlaying", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsMusicPlaying();

		public static int IsMusicPlaying()
		{
			int localResult;
			try
			{
				localResult = DLL_IsMusicPlaying();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsSoundEffectPlaying", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsSoundEffectPlaying(IntPtr effect);

		public static int IsSoundEffectPlaying(IntPtr effect)
		{
			int localResult;
			try
			{
				localResult = DLL_IsSoundEffectPlaying( effect);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="StopSoundEffect", CharSet=CharSet.Ansi)]
		private static extern void DLL_StopSoundEffect(IntPtr effect);

		public static void StopSoundEffect(IntPtr effect)
		{
			try
			{
				DLL_StopSoundEffect( effect);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="StopMusic", CharSet=CharSet.Ansi)]
		private static extern void DLL_StopMusic();

		public static void StopMusic()
		{
			try
			{
				DLL_StopMusic();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="LoadFont", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_LoadFont([MarshalAs(UnmanagedType.LPStr)]string fontName, int size);

		public static IntPtr LoadFont([MarshalAs(UnmanagedType.LPStr)]string fontName, int size)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_LoadFont( fontName,  size);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetFontStyle", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetFontStyle(IntPtr font, int style);

		public static void SetFontStyle(IntPtr font, int style)
		{
			try
			{
				DLL_SetFontStyle( font,  style);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FreeFont", CharSet=CharSet.Ansi)]
		private static extern void DLL_FreeFont(IntPtr fontToFree);

		public static void FreeFont(IntPtr fontToFree)
		{
			try
			{
				DLL_FreeFont( fontToFree);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawText", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawText([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, IntPtr theFont, float x, float y);

		public static void DrawText([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, IntPtr theFont, float x, float y)
		{
			try
			{
				DLL_DrawText( theText,  textColor,  theFont,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawTextLines", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawTextLines([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, uint backColor, IntPtr theFont, int align, float x, float y, int w, int h);

		public static void DrawTextLines([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, uint backColor, IntPtr theFont, int align, float x, float y, int w, int h)
		{
			try
			{
				DLL_DrawTextLines( theText,  textColor,  backColor,  theFont,  align,  x,  y,  w,  h);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawTextOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawTextOnScreen([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, IntPtr theFont, int x, int y);

		public static void DrawTextOnScreen([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, IntPtr theFont, int x, int y)
		{
			try
			{
				DLL_DrawTextOnScreen( theText,  textColor,  theFont,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawTextLinesOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawTextLinesOnScreen([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, uint backColor, IntPtr theFont, int align, int x, int y, int w, int h);

		public static void DrawTextLinesOnScreen([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, uint backColor, IntPtr theFont, int align, int x, int y, int w, int h)
		{
			try
			{
				DLL_DrawTextLinesOnScreen( theText,  textColor,  backColor,  theFont,  align,  x,  y,  w,  h);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawTextOnBitmap", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawTextOnBitmap(IntPtr dest, [MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, IntPtr theFont, int x, int y);

		public static void DrawTextOnBitmap(IntPtr dest, [MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, IntPtr theFont, int x, int y)
		{
			try
			{
				DLL_DrawTextOnBitmap( dest,  theText,  textColor,  theFont,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawTextLinesOnBitmap", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawTextLinesOnBitmap(IntPtr dest, [MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, uint backColor, IntPtr theFont, int align, int x, int y, int w, int h);

		public static void DrawTextLinesOnBitmap(IntPtr dest, [MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, uint backColor, IntPtr theFont, int align, int x, int y, int w, int h)
		{
			try
			{
				DLL_DrawTextLinesOnBitmap( dest,  theText,  textColor,  backColor,  theFont,  align,  x,  y,  w,  h);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="TextWidth", CharSet=CharSet.Ansi)]
		private static extern int DLL_TextWidth([MarshalAs(UnmanagedType.LPStr)]string theText, IntPtr theFont);

		public static int TextWidth([MarshalAs(UnmanagedType.LPStr)]string theText, IntPtr theFont)
		{
			int localResult;
			try
			{
				localResult = DLL_TextWidth( theText,  theFont);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="TextHeight", CharSet=CharSet.Ansi)]
		private static extern int DLL_TextHeight([MarshalAs(UnmanagedType.LPStr)]string theText, IntPtr theFont);

		public static int TextHeight([MarshalAs(UnmanagedType.LPStr)]string theText, IntPtr theFont)
		{
			int localResult;
			try
			{
				localResult = DLL_TextHeight( theText,  theFont);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawFramerate", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawFramerate(int x, int y, IntPtr font);

		public static void DrawFramerate(int x, int y, IntPtr font)
		{
			try
			{
				DLL_DrawFramerate( x,  y,  font);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="RectangleHasCollidedWithLine", CharSet=CharSet.Ansi)]
		private static extern int DLL_RectangleHasCollidedWithLine(SGSDKRectangle rect, LineSegment line);

		public static int RectangleHasCollidedWithLine(SGSDKRectangle rect, LineSegment line)
		{
			int localResult;
			try
			{
				localResult = DLL_RectangleHasCollidedWithLine( rect,  line);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsSpriteOnScreenAt", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsSpriteOnScreenAt(IntPtr theSprite, int x, int y);

		public static int IsSpriteOnScreenAt(IntPtr theSprite, int x, int y)
		{
			int localResult;
			try
			{
				localResult = DLL_IsSpriteOnScreenAt( theSprite,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CircleHasCollidedWithLine", CharSet=CharSet.Ansi)]
		private static extern int DLL_CircleHasCollidedWithLine(IntPtr p1, LineSegment line);

		public static int CircleHasCollidedWithLine(IntPtr p1, LineSegment line)
		{
			int localResult;
			try
			{
				localResult = DLL_CircleHasCollidedWithLine( p1,  line);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HasSpriteCollidedX", CharSet=CharSet.Ansi)]
		private static extern int DLL_HasSpriteCollidedX(IntPtr theSprite, int x, int range);

		public static int HasSpriteCollidedX(IntPtr theSprite, int x, int range)
		{
			int localResult;
			try
			{
				localResult = DLL_HasSpriteCollidedX( theSprite,  x,  range);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HasSpriteCollidedY", CharSet=CharSet.Ansi)]
		private static extern int DLL_HasSpriteCollidedY(IntPtr theSprite, int y, int range);

		public static int HasSpriteCollidedY(IntPtr theSprite, int y, int range)
		{
			int localResult;
			try
			{
				localResult = DLL_HasSpriteCollidedY( theSprite,  y,  range);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HasSpriteCollidedWithRect", CharSet=CharSet.Ansi)]
		private static extern int DLL_HasSpriteCollidedWithRect(IntPtr theSprite, float x, float y, int width, int height);

		public static int HasSpriteCollidedWithRect(IntPtr theSprite, float x, float y, int width, int height)
		{
			int localResult;
			try
			{
				localResult = DLL_HasSpriteCollidedWithRect( theSprite,  x,  y,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HaveSpritesCollided", CharSet=CharSet.Ansi)]
		private static extern int DLL_HaveSpritesCollided(IntPtr sprite1, IntPtr sprite2);

		public static int HaveSpritesCollided(IntPtr sprite1, IntPtr sprite2)
		{
			int localResult;
			try
			{
				localResult = DLL_HaveSpritesCollided( sprite1,  sprite2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HasSpriteCollidedWithBitmap", CharSet=CharSet.Ansi)]
		private static extern int DLL_HasSpriteCollidedWithBitmap(IntPtr theSprite, IntPtr theBitmap, float x, float y, int bounded);

		public static int HasSpriteCollidedWithBitmap(IntPtr theSprite, IntPtr theBitmap, float x, float y, int bounded)
		{
			int localResult;
			try
			{
				localResult = DLL_HasSpriteCollidedWithBitmap( theSprite,  theBitmap,  x,  y,  bounded);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HasSpriteCollidedWithBitmapPart", CharSet=CharSet.Ansi)]
		private static extern int DLL_HasSpriteCollidedWithBitmapPart(IntPtr theSprite, IntPtr theBitmap, Point2D pt, SGSDKRectangle src, int bounded);

		public static int HasSpriteCollidedWithBitmapPart(IntPtr theSprite, IntPtr theBitmap, Point2D pt, SGSDKRectangle src, int bounded)
		{
			int localResult;
			try
			{
				localResult = DLL_HasSpriteCollidedWithBitmapPart( theSprite,  theBitmap,  pt,  src,  bounded);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HaveBitmapsCollided", CharSet=CharSet.Ansi)]
		private static extern int DLL_HaveBitmapsCollided(IntPtr image1, int x1, int y1, int bounded1, IntPtr image2, int x2, int y2, int bounded2);

		public static int HaveBitmapsCollided(IntPtr image1, int x1, int y1, int bounded1, IntPtr image2, int x2, int y2, int bounded2)
		{
			int localResult;
			try
			{
				localResult = DLL_HaveBitmapsCollided( image1,  x1,  y1,  bounded1,  image2,  x2,  y2,  bounded2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HaveBitmapPartsCollided", CharSet=CharSet.Ansi)]
		private static extern int DLL_HaveBitmapPartsCollided(IntPtr image1, Point2D pt1, SGSDKRectangle src1, int bounded1, IntPtr image2, Point2D pt2, SGSDKRectangle src2, int bounded2);

		public static int HaveBitmapPartsCollided(IntPtr image1, Point2D pt1, SGSDKRectangle src1, int bounded1, IntPtr image2, Point2D pt2, SGSDKRectangle src2, int bounded2)
		{
			int localResult;
			try
			{
				localResult = DLL_HaveBitmapPartsCollided( image1,  pt1,  src1,  bounded1,  image2,  pt2,  src2,  bounded2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="LimitMagnitude", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_LimitMagnitude(Vector theVector, float maxMagnitude);

		public static Vector LimitMagnitude(Vector theVector, float maxMagnitude)
		{
			Vector localResult;
			try
			{
				localResult = DLL_LimitMagnitude( theVector,  maxMagnitude);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetUnitVector", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_GetUnitVector(Vector theVector);

		public static Vector GetUnitVector(Vector theVector)
		{
			Vector localResult;
			try
			{
				localResult = DLL_GetUnitVector( theVector);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CalculateAngle", CharSet=CharSet.Ansi)]
		private static extern float DLL_CalculateAngle(float x1, float y1, float x2, float y2);

		public static float CalculateAngle(float x1, float y1, float x2, float y2)
		{
			float localResult;
			try
			{
				localResult = DLL_CalculateAngle( x1,  y1,  x2,  y2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="TranslationMatrix", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_TranslationMatrix(float dx, float dy);

		public static IntPtr TranslationMatrix(float dx, float dy)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_TranslationMatrix( dx,  dy);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ScaleMatrix", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_ScaleMatrix(float scale);

		public static IntPtr ScaleMatrix(float scale)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_ScaleMatrix( scale);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="RotationMatrix", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_RotationMatrix(float deg);

		public static IntPtr RotationMatrix(float deg)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_RotationMatrix( deg);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MultiplyMatrix2D", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_MultiplyMatrix2D(IntPtr m1, IntPtr m2);

		public static IntPtr MultiplyMatrix2D(IntPtr m1, IntPtr m2)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_MultiplyMatrix2D( m1,  m2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MultiplyMatrix2DAndVector", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_MultiplyMatrix2DAndVector(IntPtr m, Vector v);

		public static Vector MultiplyMatrix2DAndVector(IntPtr m, Vector v)
		{
			Vector localResult;
			try
			{
				localResult = DLL_MultiplyMatrix2DAndVector( m,  v);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="VectorCollision", CharSet=CharSet.Ansi)]
		private static extern void DLL_VectorCollision(IntPtr p1, IntPtr p2);

		public static void VectorCollision(IntPtr p1, IntPtr p2)
		{
			try
			{
				DLL_VectorCollision( p1,  p2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CircleCollisionWithLine", CharSet=CharSet.Ansi)]
		private static extern void DLL_CircleCollisionWithLine(IntPtr p1, LineSegment line);

		public static void CircleCollisionWithLine(IntPtr p1, LineSegment line)
		{
			try
			{
				DLL_CircleCollisionWithLine( p1,  line);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CircularCollision", CharSet=CharSet.Ansi)]
		private static extern void DLL_CircularCollision(IntPtr p1, IntPtr p2);

		public static void CircularCollision(IntPtr p1, IntPtr p2)
		{
			try
			{
				DLL_CircularCollision( p1,  p2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetMatrix2DElement", CharSet=CharSet.Ansi)]
		private static extern float DLL_GetMatrix2DElement(IntPtr matrix, int x, int y);

		public static float GetMatrix2DElement(IntPtr matrix, int x, int y)
		{
			float localResult;
			try
			{
				localResult = DLL_GetMatrix2DElement( matrix,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetMatrix2DElement", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetMatrix2DElement(IntPtr matrix, int x, int y, float val);

		public static void SetMatrix2DElement(IntPtr matrix, int x, int y, float val)
		{
			try
			{
				DLL_SetMatrix2DElement( matrix,  x,  y,  val);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FreeMatrix2D", CharSet=CharSet.Ansi)]
		private static extern void DLL_FreeMatrix2D(IntPtr matrix);

		public static void FreeMatrix2D(IntPtr matrix)
		{
			try
			{
				DLL_FreeMatrix2D( matrix);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="VectorOutOfCircleFromPoint", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_VectorOutOfCircleFromPoint(Point2D pnt, Point2D center, float radius, Vector movement);

		public static Vector VectorOutOfCircleFromPoint(Point2D pnt, Point2D center, float radius, Vector movement)
		{
			Vector localResult;
			try
			{
				localResult = DLL_VectorOutOfCircleFromPoint( pnt,  center,  radius,  movement);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="VectorOutOfCircleFromCircle", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_VectorOutOfCircleFromCircle(Point2D pnt, float radius, Point2D center, float radius2, Vector movement);

		public static Vector VectorOutOfCircleFromCircle(Point2D pnt, float radius, Point2D center, float radius2, Vector movement)
		{
			Vector localResult;
			try
			{
				localResult = DLL_VectorOutOfCircleFromCircle( pnt,  radius,  center,  radius2,  movement);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="VectorOutOfRectFromPoint", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_VectorOutOfRectFromPoint(Point2D pnt, SGSDKRectangle rect, Vector movement);

		public static Vector VectorOutOfRectFromPoint(Point2D pnt, SGSDKRectangle rect, Vector movement)
		{
			Vector localResult;
			try
			{
				localResult = DLL_VectorOutOfRectFromPoint( pnt,  rect,  movement);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="VectorOutOfRectFromRect", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_VectorOutOfRectFromRect(SGSDKRectangle srcRect, SGSDKRectangle targetRect, Vector movement);

		public static Vector VectorOutOfRectFromRect(SGSDKRectangle srcRect, SGSDKRectangle targetRect, Vector movement)
		{
			Vector localResult;
			try
			{
				localResult = DLL_VectorOutOfRectFromRect( srcRect,  targetRect,  movement);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetPixel", CharSet=CharSet.Ansi)]
		private static extern uint DLL_GetPixel(IntPtr bmp, int x, int y);

		public static uint GetPixel(IntPtr bmp, int x, int y)
		{
			uint localResult;
			try
			{
				localResult = DLL_GetPixel( bmp,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetPixelFromScreen", CharSet=CharSet.Ansi)]
		private static extern uint DLL_GetPixelFromScreen(int x, int y);

		public static uint GetPixelFromScreen(int x, int y)
		{
			uint localResult;
			try
			{
				localResult = DLL_GetPixelFromScreen( x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteBitmap", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_GetSpriteBitmap(IntPtr surface, int id);

		public static IntPtr GetSpriteBitmap(IntPtr surface, int id)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_GetSpriteBitmap( surface,  id);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteX", CharSet=CharSet.Ansi)]
		private static extern float DLL_GetSpriteX(IntPtr surface);

		public static float GetSpriteX(IntPtr surface)
		{
			float localResult;
			try
			{
				localResult = DLL_GetSpriteX( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteX", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteX(IntPtr surface, float val);

		public static void SetSpriteX(IntPtr surface, float val)
		{
			try
			{
				DLL_SetSpriteX( surface,  val);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteY", CharSet=CharSet.Ansi)]
		private static extern float DLL_GetSpriteY(IntPtr surface);

		public static float GetSpriteY(IntPtr surface)
		{
			float localResult;
			try
			{
				localResult = DLL_GetSpriteY( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteY", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteY(IntPtr surface, float val);

		public static void SetSpriteY(IntPtr surface, float val)
		{
			try
			{
				DLL_SetSpriteY( surface,  val);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteCurrentFrame", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteCurrentFrame(IntPtr surface);

		public static int GetSpriteCurrentFrame(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteCurrentFrame( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteCurrentFrame", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteCurrentFrame(IntPtr surface, int val);

		public static void SetSpriteCurrentFrame(IntPtr surface, int val)
		{
			try
			{
				DLL_SetSpriteCurrentFrame( surface,  val);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteUsePixelCollision", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteUsePixelCollision(IntPtr surface);

		public static int GetSpriteUsePixelCollision(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteUsePixelCollision( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteUsePixelCollision", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteUsePixelCollision(IntPtr surface, int val);

		public static void SetSpriteUsePixelCollision(IntPtr surface, int val)
		{
			try
			{
				DLL_SetSpriteUsePixelCollision( surface,  val);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateBitmap", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateBitmap(int width, int height);

		public static IntPtr CreateBitmap(int width, int height)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateBitmap( width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="OptimiseBitmap", CharSet=CharSet.Ansi)]
		private static extern void DLL_OptimiseBitmap(IntPtr surface);

		public static void OptimiseBitmap(IntPtr surface)
		{
			try
			{
				DLL_OptimiseBitmap( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="LoadBitmapWithTransparentColor", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_LoadBitmapWithTransparentColor([MarshalAs(UnmanagedType.LPStr)]string pathToBitmap, int transparent, uint transparentColor);

		public static IntPtr LoadBitmapWithTransparentColor([MarshalAs(UnmanagedType.LPStr)]string pathToBitmap, int transparent, uint transparentColor)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_LoadBitmapWithTransparentColor( pathToBitmap,  transparent,  transparentColor);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="LoadTransparentBitmap", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_LoadTransparentBitmap([MarshalAs(UnmanagedType.LPStr)]string pathToBitmap, uint transparentColor);

		public static IntPtr LoadTransparentBitmap([MarshalAs(UnmanagedType.LPStr)]string pathToBitmap, uint transparentColor)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_LoadTransparentBitmap( pathToBitmap,  transparentColor);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FreeBitmap", CharSet=CharSet.Ansi)]
		private static extern void DLL_FreeBitmap(IntPtr bitmapToFree);

		public static void FreeBitmap(IntPtr bitmapToFree)
		{
			try
			{
				DLL_FreeBitmap( bitmapToFree);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetBitmapWidth", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetBitmapWidth(IntPtr targetbitmap);

		public static int GetBitmapWidth(IntPtr targetbitmap)
		{
			int localResult;
			try
			{
				localResult = DLL_GetBitmapWidth( targetbitmap);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetBitmapHeight", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetBitmapHeight(IntPtr targetbitmap);

		public static int GetBitmapHeight(IntPtr targetbitmap)
		{
			int localResult;
			try
			{
				localResult = DLL_GetBitmapHeight( targetbitmap);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ClearSurfaceWithColor", CharSet=CharSet.Ansi)]
		private static extern void DLL_ClearSurfaceWithColor(IntPtr dest, uint toColour);

		public static void ClearSurfaceWithColor(IntPtr dest, uint toColour)
		{
			try
			{
				DLL_ClearSurfaceWithColor( dest,  toColour);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawBitmapWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawBitmapWithDestination(IntPtr dest, IntPtr bitmapToDraw, int x, int y);

		public static void DrawBitmapWithDestination(IntPtr dest, IntPtr bitmapToDraw, int x, int y)
		{
			try
			{
				DLL_DrawBitmapWithDestination( dest,  bitmapToDraw,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawBitmapPartWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawBitmapPartWithDestination(IntPtr dest, IntPtr bitmapToDraw, int srcX, int srcY, int srcW, int srcH, int x, int y);

		public static void DrawBitmapPartWithDestination(IntPtr dest, IntPtr bitmapToDraw, int srcX, int srcY, int srcW, int srcH, int x, int y)
		{
			try
			{
				DLL_DrawBitmapPartWithDestination( dest,  bitmapToDraw,  srcX,  srcY,  srcW,  srcH,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawPixelWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawPixelWithDestination(IntPtr dest, uint theColour, int x, int y);

		public static void DrawPixelWithDestination(IntPtr dest, uint theColour, int x, int y)
		{
			try
			{
				DLL_DrawPixelWithDestination( dest,  theColour,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawRectangleWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawRectangleWithDestination(IntPtr dest, uint theColour, int filled, int xPos, int yPos, int width, int height);

		public static void DrawRectangleWithDestination(IntPtr dest, uint theColour, int filled, int xPos, int yPos, int width, int height)
		{
			try
			{
				DLL_DrawRectangleWithDestination( dest,  theColour,  filled,  xPos,  yPos,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FillRectangleWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_FillRectangleWithDestination(IntPtr dest, uint theColour, int xPos, int yPos, int width, int height);

		public static void FillRectangleWithDestination(IntPtr dest, uint theColour, int xPos, int yPos, int width, int height)
		{
			try
			{
				DLL_FillRectangleWithDestination( dest,  theColour,  xPos,  yPos,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawLineWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawLineWithDestination(IntPtr dest, uint theColour, int xPosStart, int yPosStart, int xPosEnd, int yPosEnd);

		public static void DrawLineWithDestination(IntPtr dest, uint theColour, int xPosStart, int yPosStart, int xPosEnd, int yPosEnd)
		{
			try
			{
				DLL_DrawLineWithDestination( dest,  theColour,  xPosStart,  yPosStart,  xPosEnd,  yPosEnd);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawHorizontalLineWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawHorizontalLineWithDestination(IntPtr dest, uint theColor, int y, int x1, int x2);

		public static void DrawHorizontalLineWithDestination(IntPtr dest, uint theColor, int y, int x1, int x2)
		{
			try
			{
				DLL_DrawHorizontalLineWithDestination( dest,  theColor,  y,  x1,  x2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawVerticalLineWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawVerticalLineWithDestination(IntPtr dest, uint theColor, int x, int y1, int y2);

		public static void DrawVerticalLineWithDestination(IntPtr dest, uint theColor, int x, int y1, int y2)
		{
			try
			{
				DLL_DrawVerticalLineWithDestination( dest,  theColor,  x,  y1,  y2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawCircleWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawCircleWithDestination(IntPtr dest, uint theColour, int filled, int xc, int yc, int radius);

		public static void DrawCircleWithDestination(IntPtr dest, uint theColour, int filled, int xc, int yc, int radius)
		{
			try
			{
				DLL_DrawCircleWithDestination( dest,  theColour,  filled,  xc,  yc,  radius);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawEllipseWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawEllipseWithDestination(IntPtr dest, uint theColour, int filled, int xPos, int yPos, int width, int height);

		public static void DrawEllipseWithDestination(IntPtr dest, uint theColour, int filled, int xPos, int yPos, int width, int height)
		{
			try
			{
				DLL_DrawEllipseWithDestination( dest,  theColour,  filled,  xPos,  yPos,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ClearScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_ClearScreen(uint toColour);

		public static void ClearScreen(uint toColour)
		{
			try
			{
				DLL_ClearScreen( toColour);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawBitmap", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawBitmap(IntPtr bitmapToDraw, float x, float y);

		public static void DrawBitmap(IntPtr bitmapToDraw, float x, float y)
		{
			try
			{
				DLL_DrawBitmap( bitmapToDraw,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawBitmapPart", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawBitmapPart(IntPtr bitmapToDraw, int srcX, int srcY, int srcW, int srcH, float x, float y);

		public static void DrawBitmapPart(IntPtr bitmapToDraw, int srcX, int srcY, int srcW, int srcH, float x, float y)
		{
			try
			{
				DLL_DrawBitmapPart( bitmapToDraw,  srcX,  srcY,  srcW,  srcH,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawPixel", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawPixel(uint theColour, float x, float y);

		public static void DrawPixel(uint theColour, float x, float y)
		{
			try
			{
				DLL_DrawPixel( theColour,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawRectangle", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawRectangle(uint theColour, int filled, float xPos, float yPos, int width, int height);

		public static void DrawRectangle(uint theColour, int filled, float xPos, float yPos, int width, int height)
		{
			try
			{
				DLL_DrawRectangle( theColour,  filled,  xPos,  yPos,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawLine", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawLine(uint theColour, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd);

		public static void DrawLine(uint theColour, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd)
		{
			try
			{
				DLL_DrawLine( theColour,  xPosStart,  yPosStart,  xPosEnd,  yPosEnd);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawHorizontalLine", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawHorizontalLine(uint theColor, float y, float x1, float x2);

		public static void DrawHorizontalLine(uint theColor, float y, float x1, float x2)
		{
			try
			{
				DLL_DrawHorizontalLine( theColor,  y,  x1,  x2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawVerticalLine", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawVerticalLine(uint theColor, float x, float y1, float y2);

		public static void DrawVerticalLine(uint theColor, float x, float y1, float y2)
		{
			try
			{
				DLL_DrawVerticalLine( theColor,  x,  y1,  y2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawCircle", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawCircle(uint theColour, int filled, float xc, float yc, int radius);

		public static void DrawCircle(uint theColour, int filled, float xc, float yc, int radius)
		{
			try
			{
				DLL_DrawCircle( theColour,  filled,  xc,  yc,  radius);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawEllipse", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawEllipse(uint theColour, int filled, float xPos, float yPos, int width, int height);

		public static void DrawEllipse(uint theColour, int filled, float xPos, float yPos, int width, int height)
		{
			try
			{
				DLL_DrawEllipse( theColour,  filled,  xPos,  yPos,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawTriangle", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawTriangle(uint theColour, IntPtr firstPoint);

		public static void DrawTriangle(uint theColour, IntPtr firstPoint)
		{
			try
			{
				DLL_DrawTriangle( theColour,  firstPoint);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateSprite", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateSprite(IntPtr startBitmap);

		public static IntPtr CreateSprite(IntPtr startBitmap)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateSprite( startBitmap);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateSpriteMultiFPC", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateSpriteMultiFPC(IntPtr image, int framesPerCell, int frames, int width, int height);

		public static IntPtr CreateSpriteMultiFPC(IntPtr image, int framesPerCell, int frames, int width, int height)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateSpriteMultiFPC( image,  framesPerCell,  frames,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateSpriteArrayFPC", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateSpriteArrayFPC(int bitLength, [MarshalAs(UnmanagedType.LPArray)] IntPtr[] bitmaps, int framesPerCell, int frames);

		public static IntPtr CreateSpriteArrayFPC(int bitLength, [MarshalAs(UnmanagedType.LPArray)] IntPtr[] bitmaps, int framesPerCell, int frames)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateSpriteArrayFPC( bitLength,  bitmaps,  framesPerCell,  frames);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateSpriteMultiEnding", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateSpriteMultiEnding(IntPtr image, int isMulti, int length, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell, int endingAction, int width, int height);

		public static IntPtr CreateSpriteMultiEnding(IntPtr image, int isMulti, int length, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell, int endingAction, int width, int height)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateSpriteMultiEnding( image,  isMulti,  length,  framesPerCell,  endingAction,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateSpriteMulti", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateSpriteMulti(IntPtr image, int isMulti, int length, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell, int width, int height);

		public static IntPtr CreateSpriteMulti(IntPtr image, int isMulti, int length, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell, int width, int height)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateSpriteMulti( image,  isMulti,  length,  framesPerCell,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateSpriteArrayEnding", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateSpriteArrayEnding(int bitLength, [MarshalAs(UnmanagedType.LPArray)] IntPtr[] bitmaps, int length, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell, int endingAction);

		public static IntPtr CreateSpriteArrayEnding(int bitLength, [MarshalAs(UnmanagedType.LPArray)] IntPtr[] bitmaps, int length, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell, int endingAction)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateSpriteArrayEnding( bitLength,  bitmaps,  length,  framesPerCell,  endingAction);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CreateSpriteArray", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_CreateSpriteArray(int bitlength, [MarshalAs(UnmanagedType.LPArray)] IntPtr[] bitmaps, int length, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell);

		public static IntPtr CreateSpriteArray(int bitlength, [MarshalAs(UnmanagedType.LPArray)] IntPtr[] bitmaps, int length, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_CreateSpriteArray( bitlength,  bitmaps,  length,  framesPerCell);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="UpdateSpriteAnimation", CharSet=CharSet.Ansi)]
		private static extern void DLL_UpdateSpriteAnimation(IntPtr spriteToDraw);

		public static void UpdateSpriteAnimation(IntPtr spriteToDraw)
		{
			try
			{
				DLL_UpdateSpriteAnimation( spriteToDraw);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="UpdateSprite", CharSet=CharSet.Ansi)]
		private static extern void DLL_UpdateSprite(IntPtr spriteToDraw);

		public static void UpdateSprite(IntPtr spriteToDraw)
		{
			try
			{
				DLL_UpdateSprite( spriteToDraw);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteKind", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteKind(IntPtr surface);

		public static int GetSpriteKind(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteKind( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteKind", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteKind(IntPtr surface, int kind);

		public static void SetSpriteKind(IntPtr surface, int kind)
		{
			try
			{
				DLL_SetSpriteKind( surface,  kind);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteFramesPerCell", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteFramesPerCell(IntPtr surface, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell, int length);

		public static void SetSpriteFramesPerCell(IntPtr surface, [MarshalAs(UnmanagedType.LPArray)] int[] framesPerCell, int length)
		{
			try
			{
				DLL_SetSpriteFramesPerCell( surface,  framesPerCell,  length);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteFramesPerCell", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteFramesPerCell(IntPtr surface, int ind);

		public static int GetSpriteFramesPerCell(IntPtr surface, int ind)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteFramesPerCell( surface,  ind);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteCols", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteCols(IntPtr surface);

		public static int GetSpriteCols(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteCols( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteRow", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteRow(IntPtr surface);

		public static int GetSpriteRow(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteRow( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteFrameCount", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteFrameCount(IntPtr surface);

		public static int GetSpriteFrameCount(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteFrameCount( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteEndingAction", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteEndingAction(IntPtr surface);

		public static int GetSpriteEndingAction(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteEndingAction( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteEndingAction", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteEndingAction(IntPtr surface, int endingAction);

		public static void SetSpriteEndingAction(IntPtr surface, int endingAction)
		{
			try
			{
				DLL_SetSpriteEndingAction( surface,  endingAction);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpritehasEnded", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpritehasEnded(IntPtr surface);

		public static int GetSpritehasEnded(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpritehasEnded( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteReverse", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetSpriteReverse(IntPtr surface);

		public static int GetSpriteReverse(IntPtr surface)
		{
			int localResult;
			try
			{
				localResult = DLL_GetSpriteReverse( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteMass", CharSet=CharSet.Ansi)]
		private static extern float DLL_GetSpriteMass(IntPtr surface);

		public static float GetSpriteMass(IntPtr surface)
		{
			float localResult;
			try
			{
				localResult = DLL_GetSpriteMass( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetSpriteMovement", CharSet=CharSet.Ansi)]
		private static extern Vector DLL_GetSpriteMovement(IntPtr surface);

		public static Vector GetSpriteMovement(IntPtr surface)
		{
			Vector localResult;
			try
			{
				localResult = DLL_GetSpriteMovement( surface);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteMass", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteMass(IntPtr surface, float mass);

		public static void SetSpriteMass(IntPtr surface, float mass)
		{
			try
			{
				DLL_SetSpriteMass( surface,  mass);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetSpriteMovement", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetSpriteMovement(IntPtr surface, Vector v);

		public static void SetSpriteMovement(IntPtr surface, Vector v)
		{
			try
			{
				DLL_SetSpriteMovement( surface,  v);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FreeSprite", CharSet=CharSet.Ansi)]
		private static extern void DLL_FreeSprite(IntPtr spriteToFree);

		public static void FreeSprite(IntPtr spriteToFree)
		{
			try
			{
				DLL_FreeSprite( spriteToFree);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="AddBitmapToSprite", CharSet=CharSet.Ansi)]
		private static extern int DLL_AddBitmapToSprite(IntPtr spriteToAddTo, IntPtr bitmapToAdd);

		public static int AddBitmapToSprite(IntPtr spriteToAddTo, IntPtr bitmapToAdd)
		{
			int localResult;
			try
			{
				localResult = DLL_AddBitmapToSprite( spriteToAddTo,  bitmapToAdd);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CurrentHeight", CharSet=CharSet.Ansi)]
		private static extern int DLL_CurrentHeight(IntPtr sprite);

		public static int CurrentHeight(IntPtr sprite)
		{
			int localResult;
			try
			{
				localResult = DLL_CurrentHeight( sprite);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CurrentWidth", CharSet=CharSet.Ansi)]
		private static extern int DLL_CurrentWidth(IntPtr sprite);

		public static int CurrentWidth(IntPtr sprite)
		{
			int localResult;
			try
			{
				localResult = DLL_CurrentWidth( sprite);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawSprite", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawSprite(IntPtr spriteToDraw, int xOffset, int yOffset);

		public static void DrawSprite(IntPtr spriteToDraw, int xOffset, int yOffset)
		{
			try
			{
				DLL_DrawSprite( spriteToDraw,  xOffset,  yOffset);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MoveSpriteItself", CharSet=CharSet.Ansi)]
		private static extern void DLL_MoveSpriteItself(IntPtr sprite);

		public static void MoveSpriteItself(IntPtr sprite)
		{
			try
			{
				DLL_MoveSpriteItself( sprite);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MoveSprite", CharSet=CharSet.Ansi)]
		private static extern void DLL_MoveSprite(IntPtr spriteToMove, Vector movementVector);

		public static void MoveSprite(IntPtr spriteToMove, Vector movementVector)
		{
			try
			{
				DLL_MoveSprite( spriteToMove,  movementVector);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MoveSpriteTo", CharSet=CharSet.Ansi)]
		private static extern void DLL_MoveSpriteTo(IntPtr spriteToMove, int x, int y);

		public static void MoveSpriteTo(IntPtr spriteToMove, int x, int y)
		{
			try
			{
				DLL_MoveSpriteTo( spriteToMove,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsSpriteOffscreen", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsSpriteOffscreen(IntPtr theSprite);

		public static int IsSpriteOffscreen(IntPtr theSprite)
		{
			int localResult;
			try
			{
				localResult = DLL_IsSpriteOffscreen( theSprite);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ReplayAnimation", CharSet=CharSet.Ansi)]
		private static extern void DLL_ReplayAnimation(IntPtr theSprite);

		public static void ReplayAnimation(IntPtr theSprite)
		{
			try
			{
				DLL_ReplayAnimation( theSprite);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawBitmapPartOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawBitmapPartOnScreen(IntPtr bitmapToDraw, int srcX, int srcY, int srcW, int srcH, int x, int y);

		public static void DrawBitmapPartOnScreen(IntPtr bitmapToDraw, int srcX, int srcY, int srcW, int srcH, int x, int y)
		{
			try
			{
				DLL_DrawBitmapPartOnScreen( bitmapToDraw,  srcX,  srcY,  srcW,  srcH,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawBitmapOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawBitmapOnScreen(IntPtr bitmapToDraw, int x, int y);

		public static void DrawBitmapOnScreen(IntPtr bitmapToDraw, int x, int y)
		{
			try
			{
				DLL_DrawBitmapOnScreen( bitmapToDraw,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawPixelOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawPixelOnScreen(uint theColour, int x, int y);

		public static void DrawPixelOnScreen(uint theColour, int x, int y)
		{
			try
			{
				DLL_DrawPixelOnScreen( theColour,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawRectangleOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawRectangleOnScreen(uint theColour, int filled, int xPos, int yPos, int width, int height);

		public static void DrawRectangleOnScreen(uint theColour, int filled, int xPos, int yPos, int width, int height)
		{
			try
			{
				DLL_DrawRectangleOnScreen( theColour,  filled,  xPos,  yPos,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawLineOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawLineOnScreen(uint theColour, int xPosStart, int yPosStart, int xPosEnd, int yPosEnd);

		public static void DrawLineOnScreen(uint theColour, int xPosStart, int yPosStart, int xPosEnd, int yPosEnd)
		{
			try
			{
				DLL_DrawLineOnScreen( theColour,  xPosStart,  yPosStart,  xPosEnd,  yPosEnd);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawHorizontalLineOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawHorizontalLineOnScreen(uint theColor, int y, int x1, int x2);

		public static void DrawHorizontalLineOnScreen(uint theColor, int y, int x1, int x2)
		{
			try
			{
				DLL_DrawHorizontalLineOnScreen( theColor,  y,  x1,  x2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawVerticalLineOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawVerticalLineOnScreen(uint theColor, int x, int y1, int y2);

		public static void DrawVerticalLineOnScreen(uint theColor, int x, int y1, int y2)
		{
			try
			{
				DLL_DrawVerticalLineOnScreen( theColor,  x,  y1,  y2);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawCircleOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawCircleOnScreen(uint theColour, int filled, int xc, int yc, int radius);

		public static void DrawCircleOnScreen(uint theColour, int filled, int xc, int yc, int radius)
		{
			try
			{
				DLL_DrawCircleOnScreen( theColour,  filled,  xc,  yc,  radius);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawEllipseOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawEllipseOnScreen(uint theColour, int filled, int xPos, int yPos, int width, int height);

		public static void DrawEllipseOnScreen(uint theColour, int filled, int xPos, int yPos, int width, int height)
		{
			try
			{
				DLL_DrawEllipseOnScreen( theColour,  filled,  xPos,  yPos,  width,  height);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="XOffset", CharSet=CharSet.Ansi)]
		private static extern int DLL_XOffset();

		public static int XOffset()
		{
			int localResult;
			try
			{
				localResult = DLL_XOffset();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="YOffset", CharSet=CharSet.Ansi)]
		private static extern int DLL_YOffset();

		public static int YOffset()
		{
			int localResult;
			try
			{
				localResult = DLL_YOffset();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ScreenX", CharSet=CharSet.Ansi)]
		private static extern int DLL_ScreenX(float x);

		public static int ScreenX(float x)
		{
			int localResult;
			try
			{
				localResult = DLL_ScreenX( x);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ScreenY", CharSet=CharSet.Ansi)]
		private static extern int DLL_ScreenY(float y);

		public static int ScreenY(float y)
		{
			int localResult;
			try
			{
				localResult = DLL_ScreenY( y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GameX", CharSet=CharSet.Ansi)]
		private static extern float DLL_GameX(int x);

		public static float GameX(int x)
		{
			float localResult;
			try
			{
				localResult = DLL_GameX( x);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GameY", CharSet=CharSet.Ansi)]
		private static extern float DLL_GameY(int y);

		public static float GameY(int y)
		{
			float localResult;
			try
			{
				localResult = DLL_GameY( y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ToGameCoordinates", CharSet=CharSet.Ansi)]
		private static extern Point2D DLL_ToGameCoordinates(Point2D screenPoint);

		public static Point2D ToGameCoordinates(Point2D screenPoint)
		{
			Point2D localResult;
			try
			{
				localResult = DLL_ToGameCoordinates( screenPoint);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MoveVisualArea", CharSet=CharSet.Ansi)]
		private static extern void DLL_MoveVisualArea(float dx, float dy);

		public static void MoveVisualArea(float dx, float dy)
		{
			try
			{
				DLL_MoveVisualArea( dx,  dy);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetScreenOffset", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetScreenOffset(float x, float y);

		public static void SetScreenOffset(float x, float y)
		{
			try
			{
				DLL_SetScreenOffset( x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FollowSprite", CharSet=CharSet.Ansi)]
		private static extern void DLL_FollowSprite(IntPtr spr, int xOffset, int yOffset);

		public static void FollowSprite(IntPtr spr, int xOffset, int yOffset)
		{
			try
			{
				DLL_FollowSprite( spr,  xOffset,  yOffset);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetClip", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetClip(IntPtr bmp, int x, int y, int w, int h);

		public static void SetClip(IntPtr bmp, int x, int y, int w, int h)
		{
			try
			{
				DLL_SetClip( bmp,  x,  y,  w,  h);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ResetClip", CharSet=CharSet.Ansi)]
		private static extern void DLL_ResetClip(IntPtr bmp);

		public static void ResetClip(IntPtr bmp)
		{
			try
			{
				DLL_ResetClip( bmp);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="LoadMap", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_LoadMap([MarshalAs(UnmanagedType.LPStr)]string mapFile, [MarshalAs(UnmanagedType.LPStr)]string imgFile);

		public static IntPtr LoadMap([MarshalAs(UnmanagedType.LPStr)]string mapFile, [MarshalAs(UnmanagedType.LPStr)]string imgFile)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_LoadMap( mapFile,  imgFile);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawMap", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawMap(IntPtr m);

		public static void DrawMap(IntPtr m)
		{
			try
			{
				DLL_DrawMap( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CollisionWithMapVector", CharSet=CharSet.Ansi)]
		private static extern int DLL_CollisionWithMapVector(IntPtr m, IntPtr spr, Vector vec);

		public static int CollisionWithMapVector(IntPtr m, IntPtr spr, Vector vec)
		{
			int localResult;
			try
			{
				localResult = DLL_CollisionWithMapVector( m,  spr,  vec);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="EventCount", CharSet=CharSet.Ansi)]
		private static extern int DLL_EventCount(IntPtr m, Event anEvent);

		public static int EventCount(IntPtr m, Event anEvent)
		{
			int localResult;
			try
			{
				localResult = DLL_EventCount( m,  anEvent);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="EventPositionX", CharSet=CharSet.Ansi)]
		private static extern int DLL_EventPositionX(IntPtr m, Event anEvent, int eventnumber);

		public static int EventPositionX(IntPtr m, Event anEvent, int eventnumber)
		{
			int localResult;
			try
			{
				localResult = DLL_EventPositionX( m,  anEvent,  eventnumber);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="EventPositionY", CharSet=CharSet.Ansi)]
		private static extern int DLL_EventPositionY(IntPtr m, Event anEvent, int eventnumber);

		public static int EventPositionY(IntPtr m, Event anEvent, int eventnumber)
		{
			int localResult;
			try
			{
				localResult = DLL_EventPositionY( m,  anEvent,  eventnumber);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FreeMap", CharSet=CharSet.Ansi)]
		private static extern void DLL_FreeMap(IntPtr m);

		public static void FreeMap(IntPtr m)
		{
			try
			{
				DLL_FreeMap( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SpriteHasCollidedWithMapTile", CharSet=CharSet.Ansi)]
		private static extern int DLL_SpriteHasCollidedWithMapTile(IntPtr m, IntPtr spr, [Out] out int collidedX, [Out] out int collidedY);

		public static int SpriteHasCollidedWithMapTile(IntPtr m, IntPtr spr, [Out] out int collidedX, [Out] out int collidedY)
		{
			int localResult;
			try
			{
				localResult = DLL_SpriteHasCollidedWithMapTile( m,  spr, out collidedX, out collidedY);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="WillCollideOnSide", CharSet=CharSet.Ansi)]
		private static extern int DLL_WillCollideOnSide(IntPtr m, IntPtr spr);

		public static int WillCollideOnSide(IntPtr m, IntPtr spr)
		{
			int localResult;
			try
			{
				localResult = DLL_WillCollideOnSide( m,  spr);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MoveSpriteOutOfTile", CharSet=CharSet.Ansi)]
		private static extern void DLL_MoveSpriteOutOfTile(IntPtr m, IntPtr spr, int x, int y);

		public static void MoveSpriteOutOfTile(IntPtr m, IntPtr spr, int x, int y)
		{
			try
			{
				DLL_MoveSpriteOutOfTile( m,  spr,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MapWidth", CharSet=CharSet.Ansi)]
		private static extern int DLL_MapWidth(IntPtr m);

		public static int MapWidth(IntPtr m)
		{
			int localResult;
			try
			{
				localResult = DLL_MapWidth( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MapHeight", CharSet=CharSet.Ansi)]
		private static extern int DLL_MapHeight(IntPtr m);

		public static int MapHeight(IntPtr m)
		{
			int localResult;
			try
			{
				localResult = DLL_MapHeight( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="BlockWidth", CharSet=CharSet.Ansi)]
		private static extern int DLL_BlockWidth(IntPtr m);

		public static int BlockWidth(IntPtr m)
		{
			int localResult;
			try
			{
				localResult = DLL_BlockWidth( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="BlockHeight", CharSet=CharSet.Ansi)]
		private static extern int DLL_BlockHeight(IntPtr m);

		public static int BlockHeight(IntPtr m)
		{
			int localResult;
			try
			{
				localResult = DLL_BlockHeight( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GapX", CharSet=CharSet.Ansi)]
		private static extern int DLL_GapX(IntPtr m);

		public static int GapX(IntPtr m)
		{
			int localResult;
			try
			{
				localResult = DLL_GapX( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GapY", CharSet=CharSet.Ansi)]
		private static extern int DLL_GapY(IntPtr m);

		public static int GapY(IntPtr m)
		{
			int localResult;
			try
			{
				localResult = DLL_GapY( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="StaggerX", CharSet=CharSet.Ansi)]
		private static extern int DLL_StaggerX(IntPtr m);

		public static int StaggerX(IntPtr m)
		{
			int localResult;
			try
			{
				localResult = DLL_StaggerX( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="StaggerY", CharSet=CharSet.Ansi)]
		private static extern int DLL_StaggerY(IntPtr m);

		public static int StaggerY(IntPtr m)
		{
			int localResult;
			try
			{
				localResult = DLL_StaggerY( m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetTileFromPoint", CharSet=CharSet.Ansi)]
		private static extern Tile DLL_GetTileFromPoint(Point2D point, IntPtr m);

		public static Tile GetTileFromPoint(Point2D point, IntPtr m)
		{
			Tile localResult;
			try
			{
				localResult = DLL_GetTileFromPoint( point,  m);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetEventAtTile", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetEventAtTile(IntPtr m, int xIndex, int yIndex);

		public static int GetEventAtTile(IntPtr m, int xIndex, int yIndex)
		{
			int localResult;
			try
			{
				localResult = DLL_GetEventAtTile( m,  xIndex,  yIndex);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DistancePointToLine", CharSet=CharSet.Ansi)]
		private static extern float DLL_DistancePointToLine(float x, float y, LineSegment line);

		public static float DistancePointToLine(float x, float y, LineSegment line)
		{
			float localResult;
			try
			{
				localResult = DLL_DistancePointToLine( x,  y,  line);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="ClosestPointOnLine", CharSet=CharSet.Ansi)]
		private static extern Point2D DLL_ClosestPointOnLine(float x, float y, LineSegment line);

		public static Point2D ClosestPointOnLine(float x, float y, LineSegment line)
		{
			Point2D localResult;
			try
			{
				localResult = DLL_ClosestPointOnLine( x,  y,  line);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="CenterPoint", CharSet=CharSet.Ansi)]
		private static extern Point2D DLL_CenterPoint(IntPtr sprt);

		public static Point2D CenterPoint(IntPtr sprt)
		{
			Point2D localResult;
			try
			{
				localResult = DLL_CenterPoint( sprt);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsPointOnLine", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsPointOnLine(Point2D pnt, LineSegment line);

		public static int IsPointOnLine(Point2D pnt, LineSegment line)
		{
			int localResult;
			try
			{
				localResult = DLL_IsPointOnLine( pnt,  line);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="GetLineIntersectionPoint", CharSet=CharSet.Ansi)]
		private static extern int DLL_GetLineIntersectionPoint(LineSegment line1, LineSegment line2, [Out] out Point2D pnt);

		public static int GetLineIntersectionPoint(LineSegment line1, LineSegment line2, [Out] out Point2D pnt)
		{
			int localResult;
			try
			{
				localResult = DLL_GetLineIntersectionPoint( line1,  line2, out pnt);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="LineIntersectsWithLines", CharSet=CharSet.Ansi)]
		private static extern int DLL_LineIntersectsWithLines(LineSegment target, int len, IntPtr data);

		public static int LineIntersectsWithLines(LineSegment target, int len, IntPtr data)
		{
			int localResult;
			try
			{
				localResult = DLL_LineIntersectsWithLines( target,  len,  data);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="HasBitmapCollidedWithRect", CharSet=CharSet.Ansi)]
		private static extern int DLL_HasBitmapCollidedWithRect(IntPtr image, int x, int y, int rectX, int rectY, int rectWidth, int rectHeight);

		public static int HasBitmapCollidedWithRect(IntPtr image, int x, int y, int rectX, int rectY, int rectWidth, int rectHeight)
		{
			int localResult;
			try
			{
				localResult = DLL_HasBitmapCollidedWithRect( image,  x,  y,  rectX,  rectY,  rectWidth,  rectHeight);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="IsPointInTriangle", CharSet=CharSet.Ansi)]
		private static extern int DLL_IsPointInTriangle(Point2D point, IntPtr inTriangle);

		public static int IsPointInTriangle(Point2D point, IntPtr inTriangle)
		{
			int localResult;
			try
			{
				localResult = DLL_IsPointInTriangle( point,  inTriangle);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="StartReadingTextWithText", CharSet=CharSet.Ansi)]
		private static extern void DLL_StartReadingTextWithText([MarshalAs(UnmanagedType.LPStr)]string text, uint textColor, int maxLength, IntPtr theFont, int x, int y);

		public static void StartReadingTextWithText([MarshalAs(UnmanagedType.LPStr)]string text, uint textColor, int maxLength, IntPtr theFont, int x, int y)
		{
			try
			{
				DLL_StartReadingTextWithText( text,  textColor,  maxLength,  theFont,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawSimpleText", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawSimpleText([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, float x, float y);

		public static void DrawSimpleText([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, float x, float y)
		{
			try
			{
				DLL_DrawSimpleText( theText,  textColor,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawSimpleTextOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawSimpleTextOnScreen([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, float x, float y);

		public static void DrawSimpleTextOnScreen([MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, float x, float y)
		{
			try
			{
				DLL_DrawSimpleTextOnScreen( theText,  textColor,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawSimpleTextOn", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawSimpleTextOn(IntPtr dest, [MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, float x, float y);

		public static void DrawSimpleTextOn(IntPtr dest, [MarshalAs(UnmanagedType.LPStr)]string theText, uint textColor, float x, float y)
		{
			try
			{
				DLL_DrawSimpleTextOn( dest,  theText,  textColor,  x,  y);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawTriangleOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawTriangleOnScreen(uint theColour, IntPtr firstPoint);

		public static void DrawTriangleOnScreen(uint theColour, IntPtr firstPoint)
		{
			try
			{
				DLL_DrawTriangleOnScreen( theColour,  firstPoint);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="DrawTriangleWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_DrawTriangleWithDestination(IntPtr dest, uint theColour, IntPtr firstPoint);

		public static void DrawTriangleWithDestination(IntPtr dest, uint theColour, IntPtr firstPoint)
		{
			try
			{
				DLL_DrawTriangleWithDestination( dest,  theColour,  firstPoint);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FillTriangle", CharSet=CharSet.Ansi)]
		private static extern void DLL_FillTriangle(uint theColour, IntPtr firstPoint);

		public static void FillTriangle(uint theColour, IntPtr firstPoint)
		{
			try
			{
				DLL_FillTriangle( theColour,  firstPoint);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FillTriangleOnScreen", CharSet=CharSet.Ansi)]
		private static extern void DLL_FillTriangleOnScreen(uint theColour, IntPtr firstPoint);

		public static void FillTriangleOnScreen(uint theColour, IntPtr firstPoint)
		{
			try
			{
				DLL_FillTriangleOnScreen( theColour,  firstPoint);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="FillTriangleWithDestination", CharSet=CharSet.Ansi)]
		private static extern void DLL_FillTriangleWithDestination(IntPtr dest, uint theColour, IntPtr firstPoint);

		public static void FillTriangleWithDestination(IntPtr dest, uint theColour, IntPtr firstPoint)
		{
			try
			{
				DLL_FillTriangleWithDestination( dest,  theColour,  firstPoint);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="UpdateSpriteAnimationPct", CharSet=CharSet.Ansi)]
		private static extern void DLL_UpdateSpriteAnimationPct(IntPtr spriteToDraw, float pct);

		public static void UpdateSpriteAnimationPct(IntPtr spriteToDraw, float pct)
		{
			try
			{
				DLL_UpdateSpriteAnimationPct( spriteToDraw,  pct);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="UpdateSpritePct", CharSet=CharSet.Ansi)]
		private static extern void DLL_UpdateSpritePct(IntPtr spriteToDraw, float pct);

		public static void UpdateSpritePct(IntPtr spriteToDraw, float pct)
		{
			try
			{
				DLL_UpdateSpritePct( spriteToDraw,  pct);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="PlaySoundEffectLoopVolume", CharSet=CharSet.Ansi)]
		private static extern void DLL_PlaySoundEffectLoopVolume(IntPtr effect, int loops, float vol);

		public static void PlaySoundEffectLoopVolume(IntPtr effect, int loops, float vol)
		{
			try
			{
				DLL_PlaySoundEffectLoopVolume( effect,  loops,  vol);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetMusicVolume", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetMusicVolume(float vol);

		public static void SetMusicVolume(float vol)
		{
			try
			{
				DLL_SetMusicVolume( vol);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MusicVolume", CharSet=CharSet.Ansi)]
		private static extern float DLL_MusicVolume();

		public static float MusicVolume()
		{
			float localResult;
			try
			{
				localResult = DLL_MusicVolume();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MakeOpaque", CharSet=CharSet.Ansi)]
		private static extern void DLL_MakeOpaque(IntPtr bmp);

		public static void MakeOpaque(IntPtr bmp)
		{
			try
			{
				DLL_MakeOpaque( bmp);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="MakeTransparent", CharSet=CharSet.Ansi)]
		private static extern void DLL_MakeTransparent(IntPtr bmp);

		public static void MakeTransparent(IntPtr bmp)
		{
			try
			{
				DLL_MakeTransparent( bmp);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="RotateZoomBitmap", CharSet=CharSet.Ansi)]
		private static extern IntPtr DLL_RotateZoomBitmap(IntPtr src, float degRot, float zoom);

		public static IntPtr RotateZoomBitmap(IntPtr src, float degRot, float zoom)
		{
			IntPtr localResult;
			try
			{
				localResult = DLL_RotateZoomBitmap( src,  degRot,  zoom);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="SetupBitmapForCollisions", CharSet=CharSet.Ansi)]
		private static extern void DLL_SetupBitmapForCollisions(IntPtr src);

		public static void SetupBitmapForCollisions(IntPtr src)
		{
			try
			{
				DLL_SetupBitmapForCollisions( src);
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
		}


		[DllImport("SGSDK.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="AKeyWasPressed", CharSet=CharSet.Ansi)]
		private static extern int DLL_AKeyWasPressed();

		public static int AKeyWasPressed()
		{
			int localResult;
			try
			{
				localResult = DLL_AKeyWasPressed();
            }
            catch (Exception exc)
            {
                throw new SwinGameException(exc.Message);
            }
            
            if (Core.ExceptionOccured())
            {
                throw new SwinGameException(Core.GetExceptionMessage());
            }
			return localResult;

		}



    }
}

<?xml version="1.0"?>
<doc>
<assembly>
<name>
Battleships
</name>
</assembly>
<members>
<member name="F:Battleships.MenuController._menuStructure">
	<summary>
 The menu structure for the game.
 </summary>
	<remarks>
 These are the text captions for the menu items.
 </remarks>
</member><member name="M:Battleships.MenuController.HandleMainMenuInput">
	<summary>
 Handles the processing of user input when the main menu is showing
 </summary>
</member><member name="M:Battleships.MenuController.HandleSetupMenuInput">
	<summary>
 Handles the processing of user input when the main menu is showing
 </summary>
</member><member name="M:Battleships.MenuController.HandleGameMenuInput">
	<summary>
 Handle input in the game menu.
 </summary>
	<remarks>
 Player can return to the game, surrender, or quit entirely
 </remarks>
</member><member name="M:Battleships.MenuController.HandleMenuInput(System.Int32,System.Int32,System.Int32)">
	<summary>
 Handles input for the specified menu.
 </summary>
	<param name="menu">the identifier of the menu being processed</param>
	<param name="level">the vertical level of the menu</param>
	<param name="xOffset">the xoffset of the menu</param>
	<returns>false if a clicked missed the buttons. This can be used to check prior menus.</returns>
</member><member name="M:Battleships.MenuController.DrawMainMenu">
	<summary>
 Draws the main menu to the screen.
 </summary>
</member><member name="M:Battleships.MenuController.DrawGameMenu">
	<summary>
 Draws the Game menu to the screen
 </summary>
</member><member name="M:Battleships.MenuController.DrawSettings">
	<summary>
 Draws the settings menu to the screen.
 </summary>
	<remarks>
 Also shows the main menu
 </remarks>
</member><member name="M:Battleships.MenuController.DrawButtons(System.Int32)">
	<summary>
 Draw the buttons associated with a top level menu.
 </summary>
	<param name="menu">the index of the menu to draw</param>
</member><member name="M:Battleships.MenuController.DrawButtons(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Draws the menu at the indicated level.
 </summary>
	<param name="menu">the menu to draw</param>
	<param name="level">the level (height) of the menu</param>
	<param name="xOffset">the offset of the menu</param>
	<remarks>
 The menu text comes from the _menuStructure field. The level indicates the height
 of the menu, to enable sub menus. The xOffset repositions the menu horizontally
 to allow the submenus to be positioned correctly.
 </remarks>
</member><member name="M:Battleships.MenuController.IsMouseOverButton(System.Int32)">
	<summary>
 Determined if the mouse is over one of the button in the main menu.
 </summary>
	<param name="button">the index of the button to check</param>
	<returns>true if the mouse is over that button</returns>
</member><member name="M:Battleships.MenuController.IsMouseOverMenu(System.Int32,System.Int32,System.Int32)">
	<summary>
 Checks if the mouse is over one of the buttons in a menu.
 </summary>
	<param name="button">the index of the button to check</param>
	<param name="level">the level of the menu</param>
	<param name="xOffset">the xOffset of the menu</param>
	<returns>true if the mouse is over the button</returns>
</member><member name="M:Battleships.MenuController.PerformMenuAction(System.Int32,System.Int32)">
	<summary>
 A button has been clicked, perform the associated action.
 </summary>
	<param name="menu">the menu that has been clicked</param>
	<param name="button">the index of the button that was clicked</param>
</member><member name="M:Battleships.MenuController.PerformMainMenuAction(System.Int32)">
	<summary>
 The main menu was clicked, perform the button's action.
 </summary>
	<param name="button">the button pressed</param>
</member><member name="M:Battleships.MenuController.PerformSetupMenuAction(System.Int32)">
	<summary>
 The setup menu was clicked, perform the button's action.
 </summary>
	<param name="button">the button pressed</param>
</member><member name="M:Battleships.MenuController.PerformGameMenuAction(System.Int32)">
	<summary>
 The game menu was clicked, perform the button's action.
 </summary>
	<param name="button">the button pressed</param>
</member><member name="T:Battleships.MenuController">
	<summary>
 The menu controller handles the drawing and user interactions
 from the menus in the game. These include the main menu, game
 menu and the settings m,enu.
 </summary>
</member><member name="M:Battleships.EndingGameController.DrawEndOfGame">
	<summary>
 Draw the end of the game screen, shows the win/lose state
 </summary>
</member><member name="M:Battleships.EndingGameController.HandleEndOfGameInput">
	<summary>
 Handle the input during the end of the game. Any interaction
 will result in it reading in the highscore.
 </summary>
</member><member name="T:Battleships.EndingGameController">
	<summary>
 The EndingGameController is responsible for managing the interactions at the end
 of a game.
 </summary>
</member><member name="M:Battleships.UtilityFunctions.IsMouseInRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Determines if the mouse is in a given rectangle.
 </summary>
	<param name="x">the x location to check</param>
	<param name="y">the y location to check</param>
	<param name="w">the width to check</param>
	<param name="h">the height to check</param>
	<returns>true if the mouse is in the area checked</returns>
</member><member name="M:Battleships.UtilityFunctions.DrawField(Battleships.ISeaGrid,Battleships.Player,System.Boolean)">
	<summary>
 Draws a large field using the grid and the indicated player's ships.
 </summary>
	<param name="grid">the grid to draw</param>
	<param name="thePlayer">the players ships to show</param>
	<param name="showShips">indicates if the ships should be shown</param>
</member><member name="M:Battleships.UtilityFunctions.DrawSmallField(Battleships.ISeaGrid,Battleships.Player)">
	<summary>
 Draws a small field, showing the attacks made and the locations of the player's ships
 </summary>
	<param name="grid">the grid to show</param>
	<param name="thePlayer">the player to show the ships of</param>
</member><member name="M:Battleships.UtilityFunctions.SetDimensions(System.Boolean,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>
 Set the dimensions of the different aspects of the grid
 </summary>
	<param name="small">is it the small grid?</param>
	<param name="left">the left position to set</param>
	<param name="top">the top position to set</param>
	<param name="width">the width position to set</param>
	<param name="height">the height position to set</param>
	<param name="cellWidth">the cellWidth position to set</param>
	<param name="cellHeight">the cellHeight position to set</param>
	<param name="cellGap">the cellGap position to set</param>
</member><member name="M:Battleships.UtilityFunctions.DrawCustomField(Battleships.ISeaGrid,Battleships.Player,System.Boolean)">
	<summary>
 Draws the player's grid and ships.
 </summary>
	<param name="grid">the grid to show</param>
	<param name="thePlayer">the player to show the ships of</param>
	<param name="small">true if the small grid is shown</param>
</member><member name="M:Battleships.UtilityFunctions.DrawShips(Battleships.Player,System.Boolean)">
	<summary>
 Draws the ships over a given field.
 </summary>
	<param name="thePlayer">the player whos ships are to be drawn</param>
	<param name="small">indicates if this is being drawn to the small grid</param>
	<remarks></remarks>
</member><member name="P:Battleships.UtilityFunctions.Message">
	<summary>
 The message to display
 </summary>
	<value>The message to display</value>
	<returns>The message to display</returns>
</member><member name="M:Battleships.UtilityFunctions.DrawMessage">
	<summary>
 Draws the message to the screen
 </summary>
</member><member name="M:Battleships.UtilityFunctions.DrawBackground">
	<summary>
 Draws the background for the current state of the game
 </summary>
</member><member name="M:Battleships.UtilityFunctions.AddExplosion(System.Int32,System.Int32)">
	<summary>
 Add an explosion to the game.
 </summary>
	<param name="row">the row location of the explosion</param>
	<param name="col">the column location of the explosion</param>
</member><member name="M:Battleships.UtilityFunctions.AddSplash(System.Int32,System.Int32)">
	<summary>
 Add an splash to the game.
 </summary>
	<param name="row">the row location of the splash</param>
	<param name="col">the column location of the splash</param>
</member><member name="M:Battleships.UtilityFunctions.AddAnimation(System.Int32,System.Int32,System.String)">
	<summary>
 Adds a animation to the list of animations.
 </summary>
	<param name="row">the row of the animation</param>
	<param name="col">the column of the animation</param>
	<param name="image">the animation's image</param>
</member><member name="M:Battleships.UtilityFunctions.UpdateAnimations">
	<summary>
 Updates all of the animations in _animations, removing those that have ended.
 </summary>
</member><member name="M:Battleships.UtilityFunctions.DrawAnimations">
	<summary>
 Draws all of the animations in _animations
 </summary>
</member><member name="M:Battleships.UtilityFunctions.DrawAnimationSequence">
	<summary>
 Draw an entire animation sequence.
 </summary>
</member><member name="T:Battleships.UtilityFunctions">
	<summary>
 This includes a number of utility methods for
 drawing and interacting with the Mouse.
 </summary>
</member><member name="M:Battleships.GameResources.GameFont(System.String)">
	<summary>
 Gets a Font Loaded in the Resources
 </summary>
	<param name="font">Name of Font</param>
	<returns>The Font Loaded with this Name</returns>
</member><member name="M:Battleships.GameResources.GameImage(System.String)">
	<summary>
 Gets an Image loaded in the Resources
 </summary>
	<param name="image">Name of image</param>
	<returns>The image loaded with this name</returns>
</member><member name="M:Battleships.GameResources.GameSound(System.String)">
	<summary>
 Gets an sound loaded in the Resources
 </summary>
	<param name="sound">Name of sound</param>
	<returns>The sound with this name</returns>
</member><member name="M:Battleships.GameResources.GameMusic(System.String)">
	<summary>
 Gets the music loaded in the Resources
 </summary>
	<param name="music">Name of music</param>
	<returns>The music with this name</returns>
</member><member name="M:Battleships.GameResources.GameMap(System.String)">
	<summary>
 Gets a map loaded in the Resources
 </summary>
	<param name="map">Name of map</param>
	<returns>The map with this name</returns>
</member><member name="M:Battleships.GameResources.LoadResources">
	<summary>
 The Resources Class stores all of the Games Media Resources, such as Images, Fonts
 Sounds, Music, and Maps.
 </summary>
</member><member name="F:Battleships.Direction.LeftRight">
	<summary>
 The ship is oriented left/right
 </summary>
</member><member name="F:Battleships.Direction.UpDown">
	<summary>
 The ship is oriented up/down
 </summary>
</member><member name="T:Battleships.Direction">
	<summary>
 The direction the ship can be oriented.
 </summary>
</member><member name="P:Battleships.GameController.CurrentState">
	<summary>
 Returns the current state of the game, indicating which screen is
 currently being used
 </summary>
	<value>The current state</value>
	<returns>The current state</returns>
</member><member name="P:Battleships.GameController.HumanPlayer">
	<summary>
 Returns the human player.
 </summary>
	<value>the human player</value>
	<returns>the human player</returns>
</member><member name="P:Battleships.GameController.ComputerPlayer">
	<summary>
 Returns the computer player.
 </summary>
	<value>the computer player</value>
	<returns>the conputer player</returns>
</member><member name="M:Battleships.GameController.StartGame">
	<summary>
 Starts a new game.
 </summary>
	<remarks>
 Creates an AI player based upon the _aiSetting.
 </remarks>
</member><member name="M:Battleships.GameController.EndGame">
	<summary>
 Stops listening to the old game once a new game is started
 </summary>
</member><member name="M:Battleships.GameController.GridChanged(System.Object,System.EventArgs)">
	<summary>
 Listens to the game grids for any changes and redraws the screen
 when the grids change
 </summary>
	<param name="sender">the grid that changed</param>
	<param name="args">not used</param>
</member><member name="M:Battleships.GameController.PlayHitSequence(System.Int32,System.Int32,System.Boolean)">
	<summary>
 Play the required sounds and animations for the hit sequence.
 </summary>
	<param name="row">the index of the row hit</param>
	<param name="column">the index of the column hit</param>
	<param name="showAnimation">if animation should be shown</param>
</member><member name="M:Battleships.GameController.PlayMissSequence(System.Int32,System.Int32,System.Boolean)">
	<summary>
 Plays the required sound effects and animations for the miss sequence.
 </summary>
	<param name="row">the row where the miss occurred</param>
	<param name="column">the column where the miss occurred</param>
	<param name="showAnimation">if animations are shown</param>
</member><member name="M:Battleships.GameController.PlaySinkSequence(System.Int32,System.Int32,System.Boolean)">
	<summary>
 Play the hit and sinking sound effects when a ship is sunk.
 </summary>
	<param name="row">the index of the row hit</param>
	<param name="column">the index of the column hit</param>
	<param name="showAnimation">if animation should be shown</param>
</member><member name="M:Battleships.GameController.PlayGameOverSounds">
	<summary>
 Play the sounds at the end of a game.
 </summary>
</member><member name="M:Battleships.GameController.AttackCompleted(System.Object,Battleships.AttackResult)">
	<summary>
 Listens for attacks to be completed.
 </summary>
	<param name="sender">the game</param>
	<param name="result">the result of the attack</param>
	<remarks>
 Displays a message, plays sound and redraws the screen
 </remarks>
</member><member name="M:Battleships.GameController.EndDeployment">
	<summary>
 Completes the deployment phase of the game and 
 switches to the battle mode (Discovering state)
 </summary>
	<remarks>
 This adds the players to the game before switching 
 state.
 </remarks>
</member><member name="M:Battleships.GameController.Attack(System.Int32,System.Int32)">
	<summary>
 Gets the player to attack the indicated row and column.
 </summary>
	<param name="row">the row to attack</param>
	<param name="col">the column to attack</param>
	<remarks>
 Checks the attack result once the attack is complete
 </remarks>
</member><member name="M:Battleships.GameController.AIAttack">
	<summary>
 Gets the AI to attack.
 </summary>
	<remarks>
 Checks the attack result once the attack is complete.
 </remarks>
</member><member name="M:Battleships.GameController.CheckAttackResult(Battleships.AttackResult)">
	<summary>
 Checks the results of the attack and switches to
 Ending the Game if the result was game over.
 </summary>
	<param name="result">the result of the last
 attack</param>
	<remarks>Gets the AI to attack if the result switched
 to the AI player.</remarks>
</member><member name="M:Battleships.GameController.HandleUserInput">
	<summary>
 Handles the user input.
 </summary>
	<remarks>
 Reads key and mouse input and converts these into
 actions for the game to perform. The actions 
 performed depend upon the state of the game.
 </remarks>
</member><member name="M:Battleships.GameController.DrawScreen">
	<summary>
 Draws the current state of the game to the screen.
 </summary>
	<remarks>
 What is drawn depends upon the state of the game.
 </remarks>
</member><member name="M:Battleships.GameController.AddNewState(Battleships.GameState)">
	<summary>
 Move the game to a new state. The current state is maintained
 so that it can be returned to.
 </summary>
	<param name="state">the new game state</param>
</member><member name="M:Battleships.GameController.SwitchState(Battleships.GameState)">
	<summary>
 End the current state and add in the new state.
 </summary>
	<param name="newState">the new state of the game</param>
</member><member name="M:Battleships.GameController.EndCurrentState">
	<summary>
 Ends the current state, returning to the prior state
 </summary>
</member><member name="M:Battleships.GameController.SetDifficulty(Battleships.AIOption)">
	<summary>
 Sets the difficulty for the next level of the game.
 </summary>
	<param name="setting">the new difficulty level</param>
</member><member name="P:Battleships.GameController.AISetting">
	<summary>
 Returns the current AI setting for the game.
 </summary>
</member><member name="T:Battleships.GameController">
	<summary>
 The GameController is responsible for controlling the game,
 managing user input, and displaying the current state of the
 game.
 </summary>
</member><member name="T:Battleships.BattleShipsGame.AttackCompletedHandler">
	<summary>
 The attack delegate type is used to send notifications of the end of an
 attack by a player or the AI.
 </summary>
	<param name="sender">the game sending the notification</param>
	<param name="result">the result of the attack</param>
</member><member name="E:Battleships.BattleShipsGame.AttackCompleted">
	<summary>
 The AttackCompleted event is raised when an attack has completed.
 </summary>
	<remarks>
 This is used by the UI to play sound effects etc.
 </remarks>
</member><member name="P:Battleships.BattleShipsGame.Player">
	<summary>
 The current player.
 </summary>
	<value>The current player</value>
	<returns>The current player</returns>
	<remarks>This value will switch between the two players as they have their attacks</remarks>
</member><member name="M:Battleships.BattleShipsGame.AddDeployedPlayer(Battleships.Player)">
	<summary>
 AddDeployedPlayer adds both players and will make sure
 that the AI player deploys all ships
 </summary>
	<param name="p"></param>
</member><member name="M:Battleships.BattleShipsGame.CompleteDeployment">
	<summary>
 Assigns each player the other's grid as the enemy grid. This allows each player
 to examine the details visable on the other's sea grid.
 </summary>
</member><member name="M:Battleships.BattleShipsGame.Shoot(System.Int32,System.Int32)">
	<summary>
 Shoot will swap between players and check if a player has been killed.
 It also allows the current player to hit on the enemygrid.
 </summary>
	<param name="row">the row fired upon</param>
	<param name="col">the column fired upon</param>
	<returns>The result of the attack</returns>
</member><member name="T:Battleships.BattleShipsGame">
	<summary>
 The BattleShipsGame controls a big part of the game. It will add the two players
 to the game and make sure that both players ships are all deployed before starting the game.
 It also allows players to shoot and swap turns between player. It will also check if players 
 are destroyed.
 </summary>
</member><member name="P:Battleships.ISeaGrid.Width">
	<summary>
 The width of the grid.
 </summary>
	<value>The width of the grid.</value>
	<returns>The width of the grid.</returns>
</member><member name="P:Battleships.ISeaGrid.Height">
	<summary>
 The height of the grid.
 </summary>
	<value>The height of the grid.</value>
	<returns>The height of the grid.</returns>
</member><member name="E:Battleships.ISeaGrid.Changed">
	<summary>
 Indicates that the grid has changed.
 </summary>
</member><member name="P:Battleships.ISeaGrid.Item(System.Int32,System.Int32)">
	<summary>
 Provides access to the given row/column
 </summary>
	<param name="row">the row to access</param>
	<param name="column">the column to access</param>
	<value>what the player can see at that location</value>
	<returns>what the player can see at that location</returns>
</member><member name="M:Battleships.ISeaGrid.HitTile(System.Int32,System.Int32)">
	<summary>
 Mark the indicated tile as shot.
 </summary>
	<param name="row">the row of the tile</param>
	<param name="col">the column of the tile</param>
	<returns>the result of the attack</returns>
</member><member name="T:Battleships.ISeaGrid">
	<summary>
 The ISeaGrid defines the read only interface of a Grid. This
 allows each player to see and attack their opponents grid.
 </summary>
</member><member name="M:Battleships.DiscoveryController.HandleDiscoveryInput">
	<summary>
 Handles input during the discovery phase of the game.
 </summary>
	<remarks>
 Escape opens the game menu. Clicking the mouse will
 attack a location.
 </remarks>
</member><member name="M:Battleships.DiscoveryController.DoAttack">
	<summary>
 Attack the location that the mouse if over.
 </summary>
</member><member name="M:Battleships.DiscoveryController.DrawDiscovery">
	<summary>
 Draws the game during the attack phase.
 </summary>s

</member><member name="T:Battleships.DiscoveryController">
	<summary>
 The battle phase is handled by the DiscoveryController.
 </summary>
</member><member name="E:Battleships.SeaGrid.Changed">
	<summary>
 The sea grid has changed and should be redrawn.
 </summary>
</member><member name="P:Battleships.SeaGrid.Width">
	<summary>
 The width of the sea grid.
 </summary>
	<value>The width of the sea grid.</value>
	<returns>The width of the sea grid.</returns>
</member><member name="P:Battleships.SeaGrid.Height">
	<summary>
 The height of the sea grid
 </summary>
	<value>The height of the sea grid</value>
	<returns>The height of the sea grid</returns>
</member><member name="P:Battleships.SeaGrid.ShipsKilled">
	<summary>
 ShipsKilled returns the number of ships killed
 </summary>
</member><member name="P:Battleships.SeaGrid.Item(System.Int32,System.Int32)">
	<summary>
 Show the tile view
 </summary>
	<param name="x">x coordinate of the tile</param>
	<param name="y">y coordiante of the tile</param>
	<returns></returns>
</member><member name="P:Battleships.SeaGrid.AllDeployed">
	<summary>
 AllDeployed checks if all the ships are deployed
 </summary>
</member><member name="M:Battleships.SeaGrid.#ctor(System.Collections.Generic.Dictionary{Battleships.ShipName,Battleships.Ship})">
	<summary>
 SeaGrid constructor, a seagrid has a number of tiles stored in an array
 </summary>
</member><member name="M:Battleships.SeaGrid.MoveShip(System.Int32,System.Int32,Battleships.ShipName,Battleships.Direction)">
	<summary>
 MoveShips allows for ships to be placed on the seagrid
 </summary>
	<param name="row">the row selected</param>
	<param name="col">the column selected</param>
	<param name="ship">the ship selected</param>
	<param name="direction">the direction the ship is going</param>
</member><member name="M:Battleships.SeaGrid.AddShip(System.Int32,System.Int32,Battleships.Direction,Battleships.Ship)">
	<summary>
 AddShip add a ship to the SeaGrid
 </summary>
	<param name="row">row coordinate</param>
	<param name="col">col coordinate</param>
	<param name="direction">direction of ship</param>
	<param name="newShip">the ship</param>
</member><member name="M:Battleships.SeaGrid.HitTile(System.Int32,System.Int32)">
	<summary>
 HitTile hits a tile at a row/col, and whatever tile has been hit, a
 result will be displayed.
 </summary>
	<param name="row">the row at which is being shot</param>
	<param name="col">the cloumn at which is being shot</param>
	<returns>An attackresult (hit, miss, sunk, shotalready)</returns>
</member><member name="T:Battleships.SeaGrid">
	<summary>
 The SeaGrid is the grid upon which the ships are deployed.
 </summary>
	<remarks>
 The grid is viewable via the ISeaGrid interface as a read only
 grid. This can be used in conjuncture with the SeaGridAdapter to 
 mask the position of the ships.
 </remarks>
</member><member name="F:Battleships.AIOption.Easy">
	<summary>
 Easy, total random shooting
 </summary>
</member><member name="F:Battleships.AIOption.Medium">
	<summary>
 Medium, marks squares around hits
 </summary>
</member><member name="F:Battleships.AIOption.Hard">
	<summary>
 As medium, but removes shots once it misses
 </summary>
</member><member name="T:Battleships.AIOption">
	<summary>
 The different AI levels.
 </summary>
</member><member name="M:Battleships.SeaGridAdapter.#ctor(Battleships.SeaGrid)">
	<summary>
 Create the SeaGridAdapter, with the grid, and it will allow it to be changed
 </summary>
	<param name="grid">the grid that needs to be adapted</param>
</member><member name="M:Battleships.SeaGridAdapter.MyGrid_Changed(System.Object,System.EventArgs)">
	<summary>
 MyGrid_Changed causes the grid to be redrawn by raising a changed event
 </summary>
	<param name="sender">the object that caused the change</param>
	<param name="e">what needs to be redrawn</param>
</member><member name="P:Battleships.SeaGridAdapter.Item(System.Int32,System.Int32)">
	<summary>
 Changes the discovery grid. Where there is a ship we will sea water
 </summary>
	<param name="x">tile x coordinate</param>
	<param name="y">tile y coordinate</param>
	<returns>a tile, either what it actually is, or if it was a ship then return a sea tile</returns>
</member><member name="E:Battleships.SeaGridAdapter.Changed">
	<summary>
 Indicates that the grid has been changed
 </summary>
</member><member name="P:Battleships.SeaGridAdapter.Width">
	<summary>
 Get the width of a tile
 </summary>
</member><member name="P:Battleships.SeaGridAdapter.Height">
	<summary>
 Get the height of the tile
 </summary>
</member><member name="M:Battleships.SeaGridAdapter.HitTile(System.Int32,System.Int32)">
	<summary>
 HitTile calls oppon _MyGrid to hit a tile at the row, col
 </summary>
	<param name="row">the row its hitting at</param>
	<param name="col">the column its hitting at</param>
	<returns>The result from hitting that tile</returns>
</member><member name="T:Battleships.SeaGridAdapter">
	<summary>
 The SeaGridAdapter allows for the change in a sea grid view. Whenever a ship is
 presented it changes the view into a sea tile instead of a ship tile.
 </summary>
</member><member name="M:Battleships.HighScoreController.Score.CompareTo(System.Object)">
	<summary>
 Allows scores to be compared to facilitate sorting
 </summary>
	<param name="obj">the object to compare to</param>
	<returns>a value that indicates the sort order</returns>
</member><member name="T:Battleships.HighScoreController.Score">
	<summary>
 The score structure is used to keep the name and
 score of the top players together.
 </summary>
</member><member name="M:Battleships.HighScoreController.LoadScores">
	<summary>
 Loads the scores from the highscores text file.
 </summary>
	<remarks>
 The format is
 # of scores
 NNNSSS
 
 Where NNN is the name and SSS is the score
 </remarks>
</member><member name="M:Battleships.HighScoreController.SaveScores">
	<summary>
 Saves the scores back to the highscores text file.
 </summary>
	<remarks>
 The format is
 # of scores
 NNNSSS
 
 Where NNN is the name and SSS is the score
 </remarks>
</member><member name="M:Battleships.HighScoreController.DrawHighScores">
	<summary>
 Draws the high scores to the screen.
 </summary>
</member><member name="M:Battleships.HighScoreController.HandleHighScoreInput">
	<summary>
 Handles the user input during the top score screen.
 </summary>
	<remarks></remarks>
</member><member name="M:Battleships.HighScoreController.ReadHighScore(System.Int32)">
	<summary>
 Read the user's name for their highscore.
 </summary>
	<param name="value">the player's score.</param>
	<remarks>
 This verifies if the score is a highscore.
 </remarks>
</member><member name="T:Battleships.HighScoreController">
	<summary>
 Controls displaying and collecting high score data.
 </summary>
	<remarks>
 Data is saved to a file.
 </remarks>
</member><member name="P:Battleships.AIHardPlayer.Target.ShotAt">
	<summary>
 The target shot at
 </summary>
	<value>The target shot at</value>
	<returns>The target shot at</returns>
</member><member name="P:Battleships.AIHardPlayer.Target.Source">
	<summary>
 The source that added this location as a target.
 </summary>
	<value>The source that added this location as a target.</value>
	<returns>The source that added this location as a target.</returns>
</member><member name="P:Battleships.AIHardPlayer.Target.SameRow">
	<summary>
 If source shot and shootat shot are on the same row then 
 give a boolean true
 </summary>
</member><member name="P:Battleships.AIHardPlayer.Target.SameColumn">
	<summary>
 If source shot and shootat shot are on the same column then 
 give a boolean true 
 </summary>
</member><member name="T:Battleships.AIHardPlayer.Target">
	<summary>
 Target allows the AI to know more things, for example the source of a
 shot target
 </summary>
</member><member name="F:Battleships.AIHardPlayer.AIStates.Searching">
	<summary>
 The AI is searching for its next target
 </summary>
</member><member name="F:Battleships.AIHardPlayer.AIStates.TargetingShip">
	<summary>
 The AI is trying to target a ship
 </summary>
</member><member name="F:Battleships.AIHardPlayer.AIStates.HittingShip">
	<summary>
 The AI is locked onto a ship
 </summary>
</member><member name="T:Battleships.AIHardPlayer.AIStates">
	<summary>
 Private enumarator for AI states. currently there are two states,
 the AI can be searching for a ship, or if it has found a ship it will
 target the same ship
 </summary>
</member><member name="M:Battleships.AIHardPlayer.GenerateCoords(System.Int32@,System.Int32@)">
	<summary>
 GenerateCoords will call upon the right methods to generate the appropriate shooting
 coordinates
 </summary>
	<param name="row">the row that will be shot at</param>
	<param name="column">the column that will be shot at</param>
</member><member name="M:Battleships.AIHardPlayer.TargetCoords(System.Int32@,System.Int32@)">
	<summary>
 TargetCoords is used when a ship has been hit and it will try and destroy
 this ship
 </summary>
	<param name="row">row generated around the hit tile</param>
	<param name="column">column generated around the hit tile</param>
</member><member name="M:Battleships.AIHardPlayer.SearchCoords(System.Int32@,System.Int32@)">
	<summary>
 SearchCoords will randomly generate shots within the grid as long as its not hit that tile already
 </summary>
	<param name="row">the generated row</param>
	<param name="column">the generated column</param>
</member><member name="M:Battleships.AIHardPlayer.ProcessShot(System.Int32,System.Int32,Battleships.AttackResult)">
	<summary>
 ProcessShot is able to process each shot that is made and call the right methods belonging
 to that shot. For example, if its a miss = do nothing, if it's a hit = process that hit location
 </summary>
	<param name="row">the row that was shot at</param>
	<param name="col">the column that was shot at</param>
	<param name="result">the result from that hit</param>
</member><member name="M:Battleships.AIHardPlayer.ProcessDestroy(System.Int32,System.Int32,Battleships.Ship)">
	<summary>
 ProcessDetroy is able to process the destroyed ships targets and remove _LastHit targets.
 It will also call RemoveShotsAround to remove targets that it was going to shoot at
 </summary>
	<param name="row">the row that was shot at and destroyed</param>
	<param name="col">the row that was shot at and destroyed</param>
	<param name="ship">the row that was shot at and destroyed</param>
</member><member name="M:Battleships.AIHardPlayer.RemoveShotsAround(Battleships.AIPlayer.Location)">
	<summary>
 RemoveShotsAround will remove targets that belong to the destroyed ship by checking if 
 the source of the targets belong to the destroyed ship. If they don't put them on a new stack.
 Then clear the targets stack and move all the targets that still need to be shot at back 
 onto the targets stack
 </summary>
	<param name="toRemove"></param>
</member><member name="M:Battleships.AIHardPlayer.ProcessHit(System.Int32,System.Int32)">
	<summary>
 ProcessHit gets the last hit location coordinates and will ask AddTarget to
 create targets around that location by calling the method four times each time with
 a new location around the last hit location.
 It will then set the state of the AI and if it's not Searching or targetingShip then 
 start ReOrderTargets.
 </summary>
	<param name="row"></param>
	<param name="col"></param>
</member><member name="M:Battleships.AIHardPlayer.ReOrderTargets">
	<summary>
 ReOrderTargets will optimise the targeting by re-orderin the stack that the targets are in.
 By putting the most important targets at the top they are the ones that will be shot at first.
 </summary>
</member><member name="M:Battleships.AIHardPlayer.MoveToTopOfStack(System.Int32,System.Int32)">
	<summary>
 MoveToTopOfStack will re-order the stack by checkin the coordinates of each target
 If they have the right column or row values it will be moved to the _Match stack else 
 put it on the _NoMatch stack. Then move all the targets from the _NoMatch stack back on the 
 _Targets stack, these will be at the bottom making them less important. The move all the
 targets from the _Match stack on the _Targets stack, these will be on the top and will there
 for be shot at first
 </summary>
	<param name="row">the row of the optimisation</param>
	<param name="column">the column of the optimisation</param>
</member><member name="M:Battleships.AIHardPlayer.AddTarget(System.Int32,System.Int32)">
	<summary>
 AddTarget will add the targets it will shoot onto a stack
 </summary>
	<param name="row">the row of the targets location</param>
	<param name="column">the column of the targets location</param>
</member><member name="T:Battleships.AIHardPlayer">
	<summary>
 AIHardPlayer is a type of player. This AI will know directions of ships
 when it has found 2 ship tiles and will try to destroy that ship. If that ship
 is not destroyed it will shoot the other way. Ship still not destroyed, then
 the AI knows it has hit multiple ships. Then will try to destoy all around tiles
 that have been hit.
 </summary>
</member><member name="P:Battleships.AIPlayer.Location.Row">
	<summary>
 The row of the shot
 </summary>
	<value>The row of the shot</value>
	<returns>The row of the shot</returns>
</member><member name="P:Battleships.AIPlayer.Location.Column">
	<summary>
 The column of the shot
 </summary>
	<value>The column of the shot</value>
	<returns>The column of the shot</returns>
</member><member name="M:Battleships.AIPlayer.Location.#ctor(System.Int32,System.Int32)">
	<summary>
 Sets the last hit made to the local variables
 </summary>
	<param name="row">the row of the location</param>
	<param name="column">the column of the location</param>
</member><member name="M:Battleships.AIPlayer.Location.op_Equality(Battleships.AIPlayer.Location,Battleships.AIPlayer.Location)">
	<summary>
 Check if two locations are equal
 </summary>
	<param name="this">location 1</param>
	<param name="other">location 2</param>
	<returns>true if location 1 and location 2 are at the same spot</returns>
</member><member name="M:Battleships.AIPlayer.Location.op_Inequality(Battleships.AIPlayer.Location,Battleships.AIPlayer.Location)">
	<summary>
 Check if two locations are not equal
 </summary>
	<param name="this">location 1</param>
	<param name="other">location 2</param>
	<returns>true if location 1 and location 2 are not at the same spot</returns>
</member><member name="T:Battleships.AIPlayer.Location">
	<summary>
 Location can store the location of the last hit made by an
 AI Player. The use of which determines the difficulty.
 </summary>
</member><member name="M:Battleships.AIPlayer.GenerateCoords(System.Int32@,System.Int32@)">
	<summary>
 Generate a valid row, column to shoot at
 </summary>
	<param name="row">output the row for the next shot</param>
	<param name="column">output the column for the next show</param>
</member><member name="M:Battleships.AIPlayer.ProcessShot(System.Int32,System.Int32,Battleships.AttackResult)">
	<summary>
 The last shot had the following result. Child classes can use this
 to prepare for the next shot.
 </summary>
	<param name="result">The result of the shot</param>
	<param name="row">the row shot</param>
	<param name="col">the column shot</param>
</member><member name="M:Battleships.AIPlayer.Attack">
	<summary>
 The AI takes its attacks until its go is over.
 </summary>
	<returns>The result of the last attack</returns>
</member><member name="M:Battleships.AIPlayer.Delay">
	<summary>
 Wait a short period to simulate the think time
 </summary>
</member><member name="T:Battleships.AIPlayer">
	<summary>
 The AIPlayer is a type of player. It can readomly deploy ships, it also has the
 functionality to generate coordinates and shoot at tiles
 </summary>
</member><member name="F:Battleships.ResultOfAttack.Hit">
	<summary>
 The player hit something
 </summary>
</member><member name="F:Battleships.ResultOfAttack.Miss">
	<summary>
 The player missed
 </summary>
</member><member name="F:Battleships.ResultOfAttack.Destroyed">
	<summary>
 The player destroyed a ship
 </summary>
</member><member name="F:Battleships.ResultOfAttack.ShotAlready">
	<summary>
 That location was already shot.
 </summary>
</member><member name="F:Battleships.ResultOfAttack.GameOver">
	<summary>
 The player killed all of the opponents ships
 </summary>
</member><member name="T:Battleships.ResultOfAttack">
	<summary>
 The result of an attack.
 </summary>
</member><member name="P:Battleships.Ship.Name">
	<summary>
 The type of ship
 </summary>
	<value>The type of ship</value>
	<returns>The type of ship</returns>
</member><member name="P:Battleships.Ship.Size">
	<summary>
 The number of cells that this ship occupies.
 </summary>
	<value>The number of hits the ship can take</value>
	<returns>The number of hits the ship can take</returns>
</member><member name="P:Battleships.Ship.Hits">
	<summary>
 The number of hits that the ship has taken.
 </summary>
	<value>The number of hits the ship has taken.</value>
	<returns>The number of hits the ship has taken</returns>
	<remarks>When this equals Size the ship is sunk</remarks>
</member><member name="P:Battleships.Ship.Row">
	<summary>
 The row location of the ship
 </summary>
	<value>The topmost location of the ship</value>
	<returns>the row of the ship</returns>
</member><member name="P:Battleships.Ship.Column">
	<summary>
 The column location of the ship
 </summary>
	<value>The leftmost location of the ship</value>
	<returns>the column of the ship</returns>
</member><member name="P:Battleships.Ship.Direction">
	<summary>
 The direction that the ship is lying
 </summary>
	<value>Up/Down or Left/Right</value>
	<returns>The direction that the ship is lying</returns>
</member><member name="M:Battleships.Ship.AddTile(Battleships.Tile)">
	<summary>
 Add tile adds the ship tile
 </summary>
	<param name="tile">one of the tiles the ship is on</param>
</member><member name="M:Battleships.Ship.Remove">
	<summary>
 Remove clears the tile back to a sea tile
 </summary>
</member><member name="M:Battleships.Ship.Hit">
	<summary>
 Hit increases the number of hits taken
 </summary>
</member><member name="P:Battleships.Ship.IsDeployed">
	<summary>
 IsDeployed returns if the ships is deployed, if its deplyed it has more than
 0 tiles
 </summary>
</member><member name="P:Battleships.Ship.IsDestroyed">
	<summary>
 IsDestroyed will return true if number of hits taken is the size
 of the ship
 </summary>
</member><member name="M:Battleships.Ship.Deployed(Battleships.Direction,System.Int32,System.Int32)">
	<summary>
 Record that the ship is now deployed.
 </summary>
	<param name="direction"></param>
	<param name="row"></param>
	<param name="col"></param>
</member><member name="T:Battleships.Ship">
	<summary>
 A Ship has all the details about itself. For example the shipname, 
 size, number of hits taken and the location. Its able to add tiles,
 remove, hits taken and if its deployed and destroyed.
 </summary>
	<remarks>
 Deployment information is supplied to allow ships to be drawn.
 </remarks>
</member><member name="T:Battleships.ShipName">
	<summary>
 The names of all of the ships in the gam
 </summary>
	<remarks></remarks>
</member><member name="F:Battleships.GameState.ViewingMainMenu">
	<summary>
 The player is viewing the main menu.
 </summary>
</member><member name="F:Battleships.GameState.ViewingGameMenu">
	<summary>
 The player is viewing the game menu
 </summary>
</member><member name="F:Battleships.GameState.ViewingHighScores">
	<summary>
 The player is looking at the high scores
 </summary>
</member><member name="F:Battleships.GameState.AlteringSettings">
	<summary>
 The player is altering the game settings
 </summary>
</member><member name="F:Battleships.GameState.Deploying">
	<summary>
 Players are deploying their ships
 </summary>
</member><member name="F:Battleships.GameState.Discovering">
	<summary>
 Players are attempting to locate each others ships
 </summary>
</member><member name="F:Battleships.GameState.EndingGame">
	<summary>
 One player has won, showing the victory screen
 </summary>
</member><member name="F:Battleships.GameState.Quitting">
	<summary>
 The player has quit. Show ending credits and terminate the game
 </summary>
</member><member name="T:Battleships.GameState">
	<summary>
 The GameStates represent the state of the Battleships game play.
 This is used to control the actions and view displayed to
 the player.
 </summary>
</member><member name="M:Battleships.AIEasyPlayer.GenerateCoords(System.Int32@,System.Int32@)">
	<summary>
 GenerateCoords generates shots at random location.
 </summary>
	<param name="row">the row it generates</param>
	<param name="column">the column it generates</param>
</member><member name="M:Battleships.AIEasyPlayer.ProcessShot(System.Int32,System.Int32,Battleships.AttackResult)">
	<summary>
 ProcessShot does nothing with the easy AIPlayer because this player
 doesn't know anything beside generating random coordinates
 </summary>
	<param name="row">row it shot at</param>
	<param name="col">the col it shot at</param>
	<param name="result">the result from the last shot</param>
</member><member name="T:Battleships.AIEasyPlayer">
	<summary>
 EasyAIPlayer is a type of AIPlayer. All shot that are taken are random
 shot generated witht the GenerateCoords
 </summary>
</member><member name="P:Battleships.AttackResult.Value">
	<summary>
 The result of the attack
 </summary>
	<value>The result of the attack</value>
	<returns>The result of the attack</returns>
</member><member name="P:Battleships.AttackResult.Ship">
	<summary>
 The ship, if any, involved in this result
 </summary>
	<value>The ship, if any, involved in this result</value>
	<returns>The ship, if any, involved in this result</returns>
</member><member name="P:Battleships.AttackResult.Text">
	<summary>
 A textual description of the result.
 </summary>
	<value>A textual description of the result.</value>
	<returns>A textual description of the result.</returns>
	<remarks>A textual description of the result.</remarks>
</member><member name="P:Battleships.AttackResult.Row">
	<summary>
 The row where the attack occurred
 </summary>
</member><member name="P:Battleships.AttackResult.Column">
	<summary>
 The column where the attack occurred
 </summary>
</member><member name="M:Battleships.AttackResult.#ctor(Battleships.ResultOfAttack,System.String,System.Int32,System.Int32)">
	<summary>
 Set the _Value to the PossibleAttack value
 </summary>
	<param name="value">either hit, miss, destroyed, shotalready</param>
</member><member name="M:Battleships.AttackResult.#ctor(Battleships.ResultOfAttack,Battleships.Ship,System.String,System.Int32,System.Int32)">
	<summary>
 Set the _Value to the PossibleAttack value, and the _Ship to the ship
 </summary>
	<param name="value">either hit, miss, destroyed, shotalready</param>
	<param name="ship">the ship information</param>
</member><member name="M:Battleships.AttackResult.ToString">
	<summary>
 Displays the textual information about the attack
 </summary>
	<returns>The textual information about the attack</returns>
</member><member name="T:Battleships.AttackResult">
	<summary>
 AttackResult gives the result after a shot has been made.
 </summary>
</member><member name="M:Battleships.DeploymentController.HandleDeploymentInput">
	<summary>
 Handles user input for the Deployment phase of the game.
 </summary>
	<remarks>
 Involves selecting the ships, deloying ships, changing the direction
 of the ships to add, randomising deployment, end then ending
 deployment
 </remarks>
</member><member name="M:Battleships.DeploymentController.DoDeployClick">
	<summary>
 The user has clicked somewhere on the screen, check if its is a deployment and deploy
 the current ship if that is the case.
 </summary>
	<remarks>
 If the click is in the grid it deploys to the selected location
 with the indicated direction
 </remarks>
</member><member name="M:Battleships.DeploymentController.DrawDeployment">
	<summary>
 Draws the deployment screen showing the field and the ships
 that the player can deploy.
 </summary>
</member><member name="M:Battleships.DeploymentController.GetShipMouseIsOver">
	<summary>
 Gets the ship that the mouse is currently over in the selection panel.
 </summary>
	<returns>The ship selected or none</returns>
</member><member name="T:Battleships.DeploymentController">
	<summary>
 The DeploymentController controls the players actions
 during the deployment phase.
 </summary>
</member><member name="T:Battleships.AIMediumPlayer.AIStates">
	<summary>
 Private enumarator for AI states. currently there are two states,
 the AI can be searching for a ship, or if it has found a ship it will
 target the same ship
 </summary>
</member><member name="M:Battleships.AIMediumPlayer.GenerateCoords(System.Int32@,System.Int32@)">
	<summary>
 GenerateCoordinates should generate random shooting coordinates
 only when it has not found a ship, or has destroyed a ship and 
 needs new shooting coordinates
 </summary>
	<param name="row">the generated row</param>
	<param name="column">the generated column</param>
</member><member name="M:Battleships.AIMediumPlayer.TargetCoords(System.Int32@,System.Int32@)">
	<summary>
 TargetCoords is used when a ship has been hit and it will try and destroy
 this ship
 </summary>
	<param name="row">row generated around the hit tile</param>
	<param name="column">column generated around the hit tile</param>
</member><member name="M:Battleships.AIMediumPlayer.SearchCoords(System.Int32@,System.Int32@)">
	<summary>
 SearchCoords will randomly generate shots within the grid as long as its not hit that tile already
 </summary>
	<param name="row">the generated row</param>
	<param name="column">the generated column</param>
</member><member name="M:Battleships.AIMediumPlayer.ProcessShot(System.Int32,System.Int32,Battleships.AttackResult)">
	<summary>
 ProcessShot will be called uppon when a ship is found.
 It will create a stack with targets it will try to hit. These targets
 will be around the tile that has been hit.
 </summary>
	<param name="row">the row it needs to process</param>
	<param name="col">the column it needs to process</param>
	<param name="result">the result og the last shot (should be hit)</param>
</member><member name="M:Battleships.AIMediumPlayer.AddTarget(System.Int32,System.Int32)">
	<summary>
 AddTarget will add the targets it will shoot onto a stack
 </summary>
	<param name="row">the row of the targets location</param>
	<param name="column">the column of the targets location</param>
</member><member name="T:Battleships.AIMediumPlayer">
	<summary>
 The AIMediumPlayer is a type of AIPlayer where it will try and destroy a ship
 if it has found a ship
 </summary>
</member><member name="P:Battleships.Player.Game">
	<summary>
 Returns the game that the player is part of.
 </summary>
	<value>The game</value>
	<returns>The game that the player is playing</returns>
</member><member name="P:Battleships.Player.Enemy">
	<summary>
 Sets the grid of the enemy player
 </summary>
	<value>The enemy's sea grid</value>
</member><member name="P:Battleships.Player.EnemyGrid">
	<summary>
 The EnemyGrid is a ISeaGrid because you shouldn't be allowed to see the enemies ships
 </summary>
</member><member name="P:Battleships.Player.PlayerGrid">
	<summary>
 The PlayerGrid is just a normal SeaGrid where the players ships can be deployed and seen
 </summary>
</member><member name="P:Battleships.Player.ReadyToDeploy">
	<summary>
 ReadyToDeploy returns true if all ships are deployed
 </summary>
</member><member name="P:Battleships.Player.IsDestroyed">
	<summary>
 IsDestroyed returns true if all ships are destroyed
 </summary>
</member><member name="P:Battleships.Player.Ship(Battleships.ShipName)">
	<summary>
 Returns the Player's ship with the given name.
 </summary>
	<param name="name">the name of the ship to return</param>
	<value>The ship</value>
	<returns>The ship with the indicated name</returns>
	<remarks>The none ship returns nothing/null</remarks>
</member><member name="P:Battleships.Player.Shots">
	<summary>
 The number of shots the player has made
 </summary>
	<value>shots taken</value>
	<returns>teh number of shots taken</returns>
</member><member name="P:Battleships.Player.Hits">
	<summary>
 The number of times the player has hit a ship
 </summary>
	<value>total hits</value>
	<returns>the number of hits</returns>
</member><member name="P:Battleships.Player.Missed">
	<summary>
 Total number of shots that missed
 </summary>
	<value>miss count</value>
	<returns>the number of shots that have missed ships</returns>
</member><member name="P:Battleships.Player.Score">
	<summary>
 The players score
 </summary>
	<value>The players score</value>
	<returns>The players score</returns>
</member><member name="M:Battleships.Player.GetShipEnumerator">
	<summary>
 Makes it possible to enumerate over the ships the player
 has.
 </summary>
	<returns>A Ship enumerator</returns>
</member><member name="M:Battleships.Player.GetEnumerator">
	<summary>
 Makes it possible to enumerate over the ships the player
 has.
 </summary>
	<returns>A Ship enumerator</returns>
</member><member name="M:Battleships.Player.Attack">
	<summary>
 Vitual Attack allows the player to shoot
 </summary>
</member><member name="M:Battleships.Player.Shoot(System.Int32,System.Int32)">
	<summary>
 Shoot at a given row/column
 </summary>
	<param name="row">the row to attack</param>
	<param name="col">the column to attack</param>
	<returns>the result of the attack</returns>
</member><member name="M:Battleships.Player.RandomizeDeployment">
	<summary>
 RandomizeDeployment deploys all the ships for the AI player
 </summary>
</member><member name="T:Battleships.Player">
	<summary>
 Player has its own _PlayerGrid, and can see an _EnemyGrid, it can also check if
 all ships are deployed and if all ships are detroyed. A Player can also attach.
 </summary>
</member><member name="P:Battleships.Tile.Shot">
	<summary>
 Has the tile been shot?
 </summary>
	<value>indicate if the tile has been shot</value>
	<returns>true if the tile was shot</returns>
</member><member name="P:Battleships.Tile.Row">
	<summary>
 The row of the tile in the grid
 </summary>
	<value>the row index of the tile in the grid</value>
	<returns>the row index of the tile</returns>
</member><member name="P:Battleships.Tile.Column">
	<summary>
 The column of the tile in the grid
 </summary>
	<value>the column of the tile in the grid</value>
	<returns>the column of the tile in the grid</returns>
</member><member name="P:Battleships.Tile.Ship">
	<summary>
 Ship allows for a tile to check if there is ship and add a ship to a tile
 </summary>
</member><member name="M:Battleships.Tile.#ctor(System.Int32,System.Int32,Battleships.Ship)">
	<summary>
 The tile constructor will know where it is on the grid, and is its a ship
 </summary>
	<param name="row">the row on the grid</param>
	<param name="col">the col on the grid</param>
	<param name="ship">what ship it is</param>
</member><member name="M:Battleships.Tile.ClearShip">
	<summary>
 Clearship will remove the ship from the tile
 </summary>
</member><member name="P:Battleships.Tile.View">
	<summary>
 View is able to tell the grid what the tile is
 </summary>
</member><member name="M:Battleships.Tile.Shoot">
	<summary>
 Shoot allows a tile to be shot at, and if the tile has been hit before
 it will give an error
 </summary>
</member><member name="T:Battleships.Tile">
	<summary>
 Tile knows its location on the grid, if it is a ship and if it has been 
 shot before
 </summary>
</member><member name="F:Battleships.TileView.Sea">
	<summary>
 The viewer can see sea
 </summary>
	<remarks>
 May be masking a ship if viewed via a sea adapter
 </remarks>
</member><member name="F:Battleships.TileView.Miss">
	<summary>
 The viewer knows that site was attacked but nothing
 was hit
 </summary>
</member><member name="F:Battleships.TileView.Ship">
	<summary>
 The viewer can see a ship at this site
 </summary>
</member><member name="F:Battleships.TileView.Hit">
	<summary>
 The viewer knows that the site was attacked and
 something was hit
 </summary>
</member><member name="T:Battleships.TileView">
	<summary>
 The values that are visable for a given tile.
 </summary>
</member>
</members>
</doc>
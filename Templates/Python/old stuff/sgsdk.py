"""
This file has been generated by pas_py_writer.py. Do not edit by hand! :)
SGSDK Version 2.0 (200000)
Wrapper Date 1.3 (2009-05-01)
"""

from ctypes import (c_int, c_float, c_char_p, c_byte, c_uint32, c_uint16, 
                    c_void_p, CDLL, create_string_buffer)  

#pylint: disable-msg=W0614,E0602
from types import * 

#==============================================================================

if __name__ != '__main__':
    import sys, os
    
    if os.path.isdir("sgsdk"):
        os.chdir("./sgsdk")

    if sys.platform == "win32":
        lib = CDLL("SGSDK.dll")   #to check
    elif sys.platform == "darwin":
        lib = CDLL("libSGSDK.dylib")
    else: #assume linux
        lib = CDLL("libSGSDK.so")   #to check
else:
    lib = None
    
#==============================================================================

class SGSDKException(Exception):
    pass

def _sg_errcheck(result, func, args):
    # ask the SGSDK if there was an error, raise exception if so...
    #print 'err check', ExceptionOccured()
    if ExceptionOccured() == sgTrue.value:
        msg = create_string_buffer(" "*1023) # + 1 null termination char
        GetExceptionMessage(msg)
        raise SGSDKException(msg.value)
    return result
        

def _decorate(name, argtypes, restype, doc=''):
    # use the name to get the function pointer from the current library
    func = getattr(lib, name)
    # decorate with _sg_errcheck if needed for debug 
    if sg_options['debug']:
        if name not in ['ExceptionOccured', 'GetExceptionMessage']:
            func.errcheck = _sg_errcheck
    # set arguments
    func.argtypes = argtypes
    # set return type
    func.restype = restype
    # add docstring if provided
    if doc != '': 
        func.__doc__ = doc
    # return the new function pointer
    return func
    

DLLVersion = _decorate(
    'DLLVersion',
    [],
    c_int,
    '''DLLVersion() -> c_int

'''
)


GetExceptionMessage = _decorate(
    'GetExceptionMessage',
    [c_char_p],
    None,
    '''GetExceptionMessage(result) -> None

result PChar'''
)


ExceptionOccured = _decorate(
    'ExceptionOccured',
    [],
    c_int,
    '''ExceptionOccured() -> c_int

'''
)


ProcessEvents = _decorate(
    'ProcessEvents',
    [],
    None,
    '''ProcessEvents() -> None

'''
)


OpenGraphicsWindow = _decorate(
    'OpenGraphicsWindow',
    [c_char_p, c_int, c_int],
    None,
    '''OpenGraphicsWindow(caption, width, height) -> None

caption PChar
width Longint
height Longint'''
)


WindowCloseRequested = _decorate(
    'WindowCloseRequested',
    [],
    c_int,
    '''WindowCloseRequested() -> c_int

'''
)


SetIcon = _decorate(
    'SetIcon',
    [c_char_p],
    None,
    '''SetIcon(iconFilename) -> None

iconFilename PChar'''
)


ChangeScreenSize = _decorate(
    'ChangeScreenSize',
    [c_int, c_int],
    None,
    '''ChangeScreenSize(width, height) -> None

width Longint
height Longint'''
)


ToggleFullScreen = _decorate(
    'ToggleFullScreen',
    [],
    None,
    '''ToggleFullScreen() -> None

'''
)


RefreshScreenWithFrame = _decorate(
    'RefreshScreenWithFrame',
    [c_int],
    None,
    '''RefreshScreenWithFrame(TargetFPS) -> None

TargetFPS Longint'''
)


RefreshScreen = _decorate(
    'RefreshScreen',
    [],
    None,
    '''RefreshScreen() -> None

'''
)


TakeScreenShot = _decorate(
    'TakeScreenShot',
    [c_char_p],
    None,
    '''TakeScreenShot(basename) -> None

basename PChar'''
)


ScreenWidth = _decorate(
    'ScreenWidth',
    [],
    c_int,
    '''ScreenWidth() -> c_int

'''
)


ScreenHeight = _decorate(
    'ScreenHeight',
    [],
    c_int,
    '''ScreenHeight() -> c_int

'''
)


ToSDLColor = _decorate(
    'ToSDLColor',
    [c_uint32],
    c_uint32,
    '''ToSDLColor(color) -> c_uint32

color UInt32'''
)


GetColourBitmap = _decorate(
    'GetColourBitmap',
    [c_void_p, c_uint32],
    c_uint32,
    '''GetColourBitmap(forBitmap, apiColor) -> c_uint32

forBitmap Bitmap
apiColor Color'''
)


GetColourRGBA = _decorate(
    'GetColourRGBA',
    [c_byte, c_byte, c_byte, c_byte],
    c_uint32,
    '''GetColourRGBA(red, green, blue, alpha) -> c_uint32

red Byte
green Byte
blue Byte
alpha Byte'''
)


GetFramerate = _decorate(
    'GetFramerate',
    [],
    c_int,
    '''GetFramerate() -> c_int

'''
)


GetTicks = _decorate(
    'GetTicks',
    [],
    c_uint32,
    '''GetTicks() -> c_uint32

'''
)


Sleep = _decorate(
    'Sleep',
    [c_uint32],
    None,
    '''Sleep(time) -> None

time UInt32'''
)


GetPathToResourceWithBaseAndKind = _decorate(
    'GetPathToResourceWithBaseAndKind',
    [c_char_p, c_char_p, ResourceKind, c_char_p],
    None,
    '''GetPathToResourceWithBaseAndKind(path, filename, kind, result) -> None

path PChar
filename PChar
kind ResourceKind
result PChar'''
)


CreateTimer = _decorate(
    'CreateTimer',
    [],
    c_void_p,
    '''CreateTimer() -> c_void_p

'''
)


FreeTimer = _decorate(
    'FreeTimer',
    [c_void_p],
    None,
    '''FreeTimer(toFree) -> None

toFree Timer'''
)


StartTimer = _decorate(
    'StartTimer',
    [c_void_p],
    None,
    '''StartTimer(toStart) -> None

toStart Timer'''
)


StopTimer = _decorate(
    'StopTimer',
    [c_void_p],
    None,
    '''StopTimer(toStop) -> None

toStop Timer'''
)


PauseTimer = _decorate(
    'PauseTimer',
    [c_void_p],
    None,
    '''PauseTimer(toPause) -> None

toPause Timer'''
)


UnpauseTimer = _decorate(
    'UnpauseTimer',
    [c_void_p],
    None,
    '''UnpauseTimer(toUnpause) -> None

toUnpause Timer'''
)


GetTimerTicks = _decorate(
    'GetTimerTicks',
    [c_void_p],
    c_uint32,
    '''GetTimerTicks(toGet) -> c_uint32

toGet Timer'''
)


ShowMouse = _decorate(
    'ShowMouse',
    [c_int],
    None,
    '''ShowMouse(show) -> None

show Longint'''
)


IsMouseShown = _decorate(
    'IsMouseShown',
    [],
    c_int,
    '''IsMouseShown() -> c_int

'''
)


MoveMouse = _decorate(
    'MoveMouse',
    [c_uint16, c_uint16],
    None,
    '''MoveMouse(x, y) -> None

x UInt16
y UInt16'''
)


GetMouseXY = _decorate(
    'GetMouseXY',
    [c_void_p, c_void_p],
    None,
    '''GetMouseXY(x (out), y (out)) -> None

x (out) Single
y (out) Single
"out" parameters are used as pointers to store the result.
'''
)


GetMouseMovement = _decorate(
    'GetMouseMovement',
    [],
    Vector,
    '''GetMouseMovement() -> Vector

'''
)


IsMouseDown = _decorate(
    'IsMouseDown',
    [MouseButton],
    c_int,
    '''IsMouseDown(button) -> c_int

button MouseButton'''
)


IsMouseUp = _decorate(
    'IsMouseUp',
    [MouseButton],
    c_int,
    '''IsMouseUp(button) -> c_int

button MouseButton'''
)


MouseWasClicked = _decorate(
    'MouseWasClicked',
    [MouseButton],
    c_int,
    '''MouseWasClicked(button) -> c_int

button MouseButton'''
)


StartReadingText = _decorate(
    'StartReadingText',
    [c_uint32, c_int, c_void_p, c_int, c_int],
    None,
    '''StartReadingText(textColor, maxLength, theFont, x, y) -> None

textColor Colour
maxLength Longint
theFont Font
x Longint
y Longint'''
)


IsReadingText = _decorate(
    'IsReadingText',
    [],
    c_int,
    '''IsReadingText() -> c_int

'''
)


EndReadingText = _decorate(
    'EndReadingText',
    [c_char_p],
    None,
    '''EndReadingText(result) -> None

result PChar'''
)


TextReadAsASCII = _decorate(
    'TextReadAsASCII',
    [c_char_p],
    None,
    '''TextReadAsASCII(result) -> None

result PChar'''
)


IsKeyPressed = _decorate(
    'IsKeyPressed',
    [c_int],
    c_int,
    '''IsKeyPressed(virtKeyCode) -> c_int

virtKeyCode Longint'''
)


WasKeyTyped = _decorate(
    'WasKeyTyped',
    [c_int],
    c_int,
    '''WasKeyTyped(virtKeyCode) -> c_int

virtKeyCode Longint'''
)


OpenAudio = _decorate(
    'OpenAudio',
    [],
    None,
    '''OpenAudio() -> None

'''
)


CloseAudio = _decorate(
    'CloseAudio',
    [],
    None,
    '''CloseAudio() -> None

'''
)


LoadSoundEffect = _decorate(
    'LoadSoundEffect',
    [c_char_p],
    c_void_p,
    '''LoadSoundEffect(path) -> c_void_p

path PChar'''
)


LoadMusic = _decorate(
    'LoadMusic',
    [c_char_p],
    c_void_p,
    '''LoadMusic(path) -> c_void_p

path PChar'''
)


FreeMusic = _decorate(
    'FreeMusic',
    [c_void_p],
    None,
    '''FreeMusic(mus) -> None

mus Music'''
)


FreeSoundEffect = _decorate(
    'FreeSoundEffect',
    [c_void_p],
    None,
    '''FreeSoundEffect(effect) -> None

effect SoundEffect'''
)


PlaySoundEffect = _decorate(
    'PlaySoundEffect',
    [c_void_p],
    None,
    '''PlaySoundEffect(effect) -> None

effect SoundEffect'''
)


PlaySoundEffectLoop = _decorate(
    'PlaySoundEffectLoop',
    [c_void_p, c_int],
    None,
    '''PlaySoundEffectLoop(effect, loops) -> None

effect SoundEffect
loops Longint'''
)


PlayMusic = _decorate(
    'PlayMusic',
    [c_void_p, c_int],
    None,
    '''PlayMusic(mus, loops) -> None

mus Music
loops Longint'''
)


IsMusicPlaying = _decorate(
    'IsMusicPlaying',
    [],
    c_int,
    '''IsMusicPlaying() -> c_int

'''
)


IsSoundEffectPlaying = _decorate(
    'IsSoundEffectPlaying',
    [c_void_p],
    c_int,
    '''IsSoundEffectPlaying(effect) -> c_int

effect SoundEffect'''
)


StopSoundEffect = _decorate(
    'StopSoundEffect',
    [c_void_p],
    None,
    '''StopSoundEffect(effect) -> None

effect SoundEffect'''
)


StopMusic = _decorate(
    'StopMusic',
    [],
    None,
    '''StopMusic() -> None

'''
)


LoadFont = _decorate(
    'LoadFont',
    [c_char_p, c_int],
    c_void_p,
    '''LoadFont(fontName, size) -> c_void_p

fontName PChar
size Longint'''
)


SetFontStyle = _decorate(
    'SetFontStyle',
    [c_void_p, FontStyle],
    None,
    '''SetFontStyle(font, style) -> None

font Font
style FontStyle'''
)


FreeFont = _decorate(
    'FreeFont',
    [c_void_p],
    None,
    '''FreeFont(fontToFree) -> None

fontToFree Font'''
)


DrawText = _decorate(
    'DrawText',
    [c_char_p, c_uint32, c_void_p, c_float, c_float],
    None,
    '''DrawText(theText, textColor, theFont, x, y) -> None

theText PChar
textColor Colour
theFont Font
x Single
y Single'''
)


DrawTextLines = _decorate(
    'DrawTextLines',
    [c_char_p, c_uint32, c_uint32, c_void_p, FontAlignment, c_float, c_float, c_int, c_int],
    None,
    '''DrawTextLines(theText, textColor, backColor, theFont, align, x, y, w, h) -> None

theText PChar
textColor Colour
backColor Colour
theFont Font
align FontAlignment
x Single
y Single
w Longint
h Longint'''
)


DrawTextOnScreen = _decorate(
    'DrawTextOnScreen',
    [c_char_p, c_uint32, c_void_p, c_int, c_int],
    None,
    '''DrawTextOnScreen(theText, textColor, theFont, x, y) -> None

theText PChar
textColor Colour
theFont Font
x Longint
y Longint'''
)


DrawTextLinesOnScreen = _decorate(
    'DrawTextLinesOnScreen',
    [c_char_p, c_uint32, c_uint32, c_void_p, FontAlignment, c_int, c_int, c_int, c_int],
    None,
    '''DrawTextLinesOnScreen(theText, textColor, backColor, theFont, align, x, y, w, h) -> None

theText PChar
textColor Colour
backColor Colour
theFont Font
align FontAlignment
x Longint
y Longint
w Longint
h Longint'''
)


DrawTextOnBitmap = _decorate(
    'DrawTextOnBitmap',
    [c_void_p, c_char_p, c_uint32, c_void_p, c_int, c_int],
    None,
    '''DrawTextOnBitmap(dest, theText, textColor, theFont, x, y) -> None

dest Bitmap
theText PChar
textColor Colour
theFont Font
x Longint
y Longint'''
)


DrawTextLinesOnBitmap = _decorate(
    'DrawTextLinesOnBitmap',
    [c_void_p, c_char_p, c_uint32, c_uint32, c_void_p, FontAlignment, c_int, c_int, c_int, c_int],
    None,
    '''DrawTextLinesOnBitmap(dest, theText, textColor, backColor, theFont, align, x, y, w, h) -> None

dest Bitmap
theText PChar
textColor Colour
backColor Colour
theFont Font
align FontAlignment
x Longint
y Longint
w Longint
h Longint'''
)


TextWidth = _decorate(
    'TextWidth',
    [c_char_p, c_void_p],
    c_int,
    '''TextWidth(theText, theFont) -> c_int

theText PChar
theFont Font'''
)


TextHeight = _decorate(
    'TextHeight',
    [c_char_p, c_void_p],
    c_int,
    '''TextHeight(theText, theFont) -> c_int

theText PChar
theFont Font'''
)


DrawFramerate = _decorate(
    'DrawFramerate',
    [c_int, c_int, c_void_p],
    None,
    '''DrawFramerate(x, y, font) -> None

x Longint
y Longint
font Font'''
)


RectangleHasCollidedWithLine = _decorate(
    'RectangleHasCollidedWithLine',
    [Rectangle, LineSegment],
    c_int,
    '''RectangleHasCollidedWithLine(rect, line) -> c_int

rect Rectangle
line LineSegment'''
)


IsSpriteOnScreenAt = _decorate(
    'IsSpriteOnScreenAt',
    [c_void_p, c_int, c_int],
    c_int,
    '''IsSpriteOnScreenAt(theSprite, x, y) -> c_int

theSprite Sprite
x Longint
y Longint'''
)


CircleHasCollidedWithLine = _decorate(
    'CircleHasCollidedWithLine',
    [c_void_p, LineSegment],
    c_int,
    '''CircleHasCollidedWithLine(p1, line) -> c_int

p1 Sprite
line LineSegment'''
)


HasSpriteCollidedX = _decorate(
    'HasSpriteCollidedX',
    [c_void_p, c_int, CollisionDetectionRange],
    c_int,
    '''HasSpriteCollidedX(theSprite, x, range) -> c_int

theSprite Sprite
x Longint
range CollisionDetectionRange'''
)


HasSpriteCollidedY = _decorate(
    'HasSpriteCollidedY',
    [c_void_p, c_int, CollisionDetectionRange],
    c_int,
    '''HasSpriteCollidedY(theSprite, y, range) -> c_int

theSprite Sprite
y Longint
range CollisionDetectionRange'''
)


HasSpriteCollidedWithRect = _decorate(
    'HasSpriteCollidedWithRect',
    [c_void_p, c_float, c_float, c_int, c_int],
    c_int,
    '''HasSpriteCollidedWithRect(theSprite, x, y, width, height) -> c_int

theSprite Sprite
x Single
y Single
width Longint
height Longint'''
)


HaveSpritesCollided = _decorate(
    'HaveSpritesCollided',
    [c_void_p, c_void_p],
    c_int,
    '''HaveSpritesCollided(sprite1, sprite2) -> c_int

sprite1 Sprite
sprite2 Sprite'''
)


HasSpriteCollidedWithBitmap = _decorate(
    'HasSpriteCollidedWithBitmap',
    [c_void_p, c_void_p, c_float, c_float, c_int],
    c_int,
    '''HasSpriteCollidedWithBitmap(theSprite, theBitmap, x, y, bounded) -> c_int

theSprite Sprite
theBitmap Bitmap
x Single
y Single
bounded Longint'''
)


HasSpriteCollidedWithBitmapPart = _decorate(
    'HasSpriteCollidedWithBitmapPart',
    [c_void_p, c_void_p, Point2D, Rectangle, c_int],
    c_int,
    '''HasSpriteCollidedWithBitmapPart(theSprite, theBitmap, pt, src, bounded) -> c_int

theSprite Sprite
theBitmap Bitmap
pt Point2D
src Rectangle
bounded Longint'''
)


HaveBitmapsCollided = _decorate(
    'HaveBitmapsCollided',
    [c_void_p, c_int, c_int, c_int, c_void_p, c_int, c_int, c_int],
    c_int,
    '''HaveBitmapsCollided(image1, x1, y1, bounded1, image2, x2, y2, bounded2) -> c_int

image1 Bitmap
x1 Longint
y1 Longint
bounded1 Longint
image2 Bitmap
x2 Longint
y2 Longint
bounded2 Longint'''
)


HaveBitmapPartsCollided = _decorate(
    'HaveBitmapPartsCollided',
    [c_void_p, Point2D, Rectangle, c_int, c_void_p, Point2D, Rectangle, c_int],
    c_int,
    '''HaveBitmapPartsCollided(image1, pt1, src1, bounded1, image2, pt2, src2, bounded2) -> c_int

image1 Bitmap
pt1 Point2D
src1 Rectangle
bounded1 Longint
image2 Bitmap
pt2 Point2D
src2 Rectangle
bounded2 Longint'''
)


LimitMagnitude = _decorate(
    'LimitMagnitude',
    [Vector, c_float],
    Vector,
    '''LimitMagnitude(theVector, maxMagnitude) -> Vector

theVector Vector
maxMagnitude Single'''
)


GetUnitVector = _decorate(
    'GetUnitVector',
    [Vector],
    Vector,
    '''GetUnitVector(theVector) -> Vector

theVector Vector'''
)


CalculateAngle = _decorate(
    'CalculateAngle',
    [c_float, c_float, c_float, c_float],
    c_float,
    '''CalculateAngle(x1, y1, x2, y2) -> c_float

x1 Single
y1 Single
x2 Single
y2 Single'''
)


TranslationMatrix = _decorate(
    'TranslationMatrix',
    [c_float, c_float],
    c_void_p,
    '''TranslationMatrix(dx, dy) -> c_void_p

dx Single
dy Single'''
)


ScaleMatrix = _decorate(
    'ScaleMatrix',
    [c_float],
    c_void_p,
    '''ScaleMatrix(scale) -> c_void_p

scale Single'''
)


RotationMatrix = _decorate(
    'RotationMatrix',
    [c_float],
    c_void_p,
    '''RotationMatrix(deg) -> c_void_p

deg Single'''
)


MultiplyMatrix2D = _decorate(
    'MultiplyMatrix2D',
    [c_void_p, c_void_p],
    c_void_p,
    '''MultiplyMatrix2D(m1, m2) -> c_void_p

m1 Matrix2DPtr
m2 Matrix2DPtr'''
)


MultiplyMatrix2DAndVector = _decorate(
    'MultiplyMatrix2DAndVector',
    [c_void_p, Vector],
    Vector,
    '''MultiplyMatrix2DAndVector(m, v) -> Vector

m Matrix2DPtr
v Vector'''
)


VectorCollision = _decorate(
    'VectorCollision',
    [c_void_p, c_void_p],
    None,
    '''VectorCollision(p1, p2) -> None

p1 Sprite
p2 Sprite'''
)


CircleCollisionWithLine = _decorate(
    'CircleCollisionWithLine',
    [c_void_p, LineSegment],
    None,
    '''CircleCollisionWithLine(p1, line) -> None

p1 Sprite
line LineSegment'''
)


CircularCollision = _decorate(
    'CircularCollision',
    [c_void_p, c_void_p],
    None,
    '''CircularCollision(p1, p2) -> None

p1 Sprite
p2 Sprite'''
)


GetMatrix2DElement = _decorate(
    'GetMatrix2DElement',
    [c_void_p, c_int, c_int],
    c_float,
    '''GetMatrix2DElement(matrix, x, y) -> c_float

matrix Matrix2DPtr
x Longint
y Longint'''
)


SetMatrix2DElement = _decorate(
    'SetMatrix2DElement',
    [c_void_p, c_int, c_int, c_float],
    None,
    '''SetMatrix2DElement(matrix, x, y, val) -> None

matrix Matrix2DPtr
x Longint
y Longint
val Single'''
)


FreeMatrix2D = _decorate(
    'FreeMatrix2D',
    [c_void_p],
    None,
    '''FreeMatrix2D(matrix) -> None

matrix Matrix2DPtr'''
)


VectorOutOfCircleFromPoint = _decorate(
    'VectorOutOfCircleFromPoint',
    [Point2D, Point2D, c_float, Vector],
    Vector,
    '''VectorOutOfCircleFromPoint(pnt, center, radius, movement) -> Vector

pnt Point2D
center Point2D
radius Single
movement Vector'''
)


VectorOutOfCircleFromCircle = _decorate(
    'VectorOutOfCircleFromCircle',
    [Point2D, c_float, Point2D, c_float, Vector],
    Vector,
    '''VectorOutOfCircleFromCircle(pnt, radius, center, radius2, movement) -> Vector

pnt Point2D
radius Single
center Point2D
radius2 Single
movement Vector'''
)


VectorOutOfRectFromPoint = _decorate(
    'VectorOutOfRectFromPoint',
    [Point2D, Rectangle, Vector],
    Vector,
    '''VectorOutOfRectFromPoint(pnt, rect, movement) -> Vector

pnt Point2D
rect Rectangle
movement Vector'''
)


VectorOutOfRectFromRect = _decorate(
    'VectorOutOfRectFromRect',
    [Rectangle, Rectangle, Vector],
    Vector,
    '''VectorOutOfRectFromRect(srcRect, targetRect, movement) -> Vector

srcRect Rectangle
targetRect Rectangle
movement Vector'''
)


GetPixel = _decorate(
    'GetPixel',
    [c_void_p, c_int, c_int],
    c_uint32,
    '''GetPixel(bmp, x, y) -> c_uint32

bmp Bitmap
x Longint
y Longint'''
)


GetPixelFromScreen = _decorate(
    'GetPixelFromScreen',
    [c_int, c_int],
    c_uint32,
    '''GetPixelFromScreen(x, y) -> c_uint32

x Longint
y Longint'''
)


GetSpriteBitmap = _decorate(
    'GetSpriteBitmap',
    [c_void_p, c_int],
    c_void_p,
    '''GetSpriteBitmap(surface, id) -> c_void_p

surface Sprite
id Longint'''
)


GetSpriteX = _decorate(
    'GetSpriteX',
    [c_void_p],
    c_float,
    '''GetSpriteX(surface) -> c_float

surface Sprite'''
)


SetSpriteX = _decorate(
    'SetSpriteX',
    [c_void_p, c_float],
    None,
    '''SetSpriteX(surface, val) -> None

surface Sprite
val Single'''
)


GetSpriteY = _decorate(
    'GetSpriteY',
    [c_void_p],
    c_float,
    '''GetSpriteY(surface) -> c_float

surface Sprite'''
)


SetSpriteY = _decorate(
    'SetSpriteY',
    [c_void_p, c_float],
    None,
    '''SetSpriteY(surface, val) -> None

surface Sprite
val Single'''
)


GetSpriteCurrentFrame = _decorate(
    'GetSpriteCurrentFrame',
    [c_void_p],
    c_int,
    '''GetSpriteCurrentFrame(surface) -> c_int

surface Sprite'''
)


SetSpriteCurrentFrame = _decorate(
    'SetSpriteCurrentFrame',
    [c_void_p, c_int],
    None,
    '''SetSpriteCurrentFrame(surface, val) -> None

surface Sprite
val Longint'''
)


GetSpriteUsePixelCollision = _decorate(
    'GetSpriteUsePixelCollision',
    [c_void_p],
    c_int,
    '''GetSpriteUsePixelCollision(surface) -> c_int

surface Sprite'''
)


SetSpriteUsePixelCollision = _decorate(
    'SetSpriteUsePixelCollision',
    [c_void_p, c_int],
    None,
    '''SetSpriteUsePixelCollision(surface, val) -> None

surface Sprite
val Longint'''
)


CreateBitmap = _decorate(
    'CreateBitmap',
    [c_int, c_int],
    c_void_p,
    '''CreateBitmap(width, height) -> c_void_p

width Longint
height Longint'''
)


OptimiseBitmap = _decorate(
    'OptimiseBitmap',
    [c_void_p],
    None,
    '''OptimiseBitmap(surface) -> None

surface Bitmap'''
)


LoadBitmapWithTransparentColor = _decorate(
    'LoadBitmapWithTransparentColor',
    [c_char_p, c_int, c_uint32],
    c_void_p,
    '''LoadBitmapWithTransparentColor(pathToBitmap, transparent, transparentColor) -> c_void_p

pathToBitmap PChar
transparent Longint
transparentColor Colour'''
)


LoadTransparentBitmap = _decorate(
    'LoadTransparentBitmap',
    [c_char_p, c_uint32],
    c_void_p,
    '''LoadTransparentBitmap(pathToBitmap, transparentColor) -> c_void_p

pathToBitmap PChar
transparentColor Colour'''
)


FreeBitmap = _decorate(
    'FreeBitmap',
    [c_void_p],
    None,
    '''FreeBitmap(bitmapToFree) -> None

bitmapToFree Bitmap'''
)


GetBitmapWidth = _decorate(
    'GetBitmapWidth',
    [c_void_p],
    c_int,
    '''GetBitmapWidth(targetbitmap) -> c_int

targetbitmap Bitmap'''
)


GetBitmapHeight = _decorate(
    'GetBitmapHeight',
    [c_void_p],
    c_int,
    '''GetBitmapHeight(targetbitmap) -> c_int

targetbitmap Bitmap'''
)


ClearSurfaceWithColor = _decorate(
    'ClearSurfaceWithColor',
    [c_void_p, c_uint32],
    None,
    '''ClearSurfaceWithColor(dest, toColour) -> None

dest Bitmap
toColour Colour'''
)


DrawBitmapWithDestination = _decorate(
    'DrawBitmapWithDestination',
    [c_void_p, c_void_p, c_int, c_int],
    None,
    '''DrawBitmapWithDestination(dest, bitmapToDraw, x, y) -> None

dest Bitmap
bitmapToDraw Bitmap
x Longint
y Longint'''
)


DrawBitmapPartWithDestination = _decorate(
    'DrawBitmapPartWithDestination',
    [c_void_p, c_void_p, c_int, c_int, c_int, c_int, c_int, c_int],
    None,
    '''DrawBitmapPartWithDestination(dest, bitmapToDraw, srcX, srcY, srcW, srcH, x, y) -> None

dest Bitmap
bitmapToDraw Bitmap
srcX Longint
srcY Longint
srcW Longint
srcH Longint
x Longint
y Longint'''
)


DrawPixelWithDestination = _decorate(
    'DrawPixelWithDestination',
    [c_void_p, c_uint32, c_int, c_int],
    None,
    '''DrawPixelWithDestination(dest, theColour, x, y) -> None

dest Bitmap
theColour Colour
x Longint
y Longint'''
)


DrawRectangleWithDestination = _decorate(
    'DrawRectangleWithDestination',
    [c_void_p, c_uint32, c_int, c_int, c_int, c_int, c_int],
    None,
    '''DrawRectangleWithDestination(dest, theColour, filled, xPos, yPos, width, height) -> None

dest Bitmap
theColour Colour
filled Longint
xPos Longint
yPos Longint
width Longint
height Longint'''
)


FillRectangleWithDestination = _decorate(
    'FillRectangleWithDestination',
    [c_void_p, c_uint32, c_int, c_int, c_int, c_int],
    None,
    '''FillRectangleWithDestination(dest, theColour, xPos, yPos, width, height) -> None

dest Bitmap
theColour Colour
xPos Longint
yPos Longint
width Longint
height Longint'''
)


DrawLineWithDestination = _decorate(
    'DrawLineWithDestination',
    [c_void_p, c_uint32, c_int, c_int, c_int, c_int],
    None,
    '''DrawLineWithDestination(dest, theColour, xPosStart, yPosStart, xPosEnd, yPosEnd) -> None

dest Bitmap
theColour Colour
xPosStart Longint
yPosStart Longint
xPosEnd Longint
yPosEnd Longint'''
)


DrawHorizontalLineWithDestination = _decorate(
    'DrawHorizontalLineWithDestination',
    [c_void_p, c_uint32, c_int, c_int, c_int],
    None,
    '''DrawHorizontalLineWithDestination(dest, theColor, y, x1, x2) -> None

dest Bitmap
theColor Color
y Longint
x1 Longint
x2 Longint'''
)


DrawVerticalLineWithDestination = _decorate(
    'DrawVerticalLineWithDestination',
    [c_void_p, c_uint32, c_int, c_int, c_int],
    None,
    '''DrawVerticalLineWithDestination(dest, theColor, x, y1, y2) -> None

dest Bitmap
theColor Color
x Longint
y1 Longint
y2 Longint'''
)


DrawCircleWithDestination = _decorate(
    'DrawCircleWithDestination',
    [c_void_p, c_uint32, c_int, c_int, c_int, c_int],
    None,
    '''DrawCircleWithDestination(dest, theColour, filled, xc, yc, radius) -> None

dest Bitmap
theColour Colour
filled Longint
xc Longint
yc Longint
radius Longint'''
)


DrawEllipseWithDestination = _decorate(
    'DrawEllipseWithDestination',
    [c_void_p, c_uint32, c_int, c_int, c_int, c_int, c_int],
    None,
    '''DrawEllipseWithDestination(dest, theColour, filled, xPos, yPos, width, height) -> None

dest Bitmap
theColour Colour
filled Longint
xPos Longint
yPos Longint
width Longint
height Longint'''
)


ClearScreen = _decorate(
    'ClearScreen',
    [c_uint32],
    None,
    '''ClearScreen(toColour) -> None

toColour Colour'''
)


DrawBitmap = _decorate(
    'DrawBitmap',
    [c_void_p, c_float, c_float],
    None,
    '''DrawBitmap(bitmapToDraw, x, y) -> None

bitmapToDraw Bitmap
x Single
y Single'''
)


DrawBitmapPart = _decorate(
    'DrawBitmapPart',
    [c_void_p, c_int, c_int, c_int, c_int, c_float, c_float],
    None,
    '''DrawBitmapPart(bitmapToDraw, srcX, srcY, srcW, srcH, x, y) -> None

bitmapToDraw Bitmap
srcX Longint
srcY Longint
srcW Longint
srcH Longint
x Single
y Single'''
)


DrawPixel = _decorate(
    'DrawPixel',
    [c_uint32, c_float, c_float],
    None,
    '''DrawPixel(theColour, x, y) -> None

theColour Colour
x Single
y Single'''
)


DrawRectangle = _decorate(
    'DrawRectangle',
    [c_uint32, c_int, c_float, c_float, c_int, c_int],
    None,
    '''DrawRectangle(theColour, filled, xPos, yPos, width, height) -> None

theColour Colour
filled Longint
xPos Single
yPos Single
width Longint
height Longint'''
)


DrawLine = _decorate(
    'DrawLine',
    [c_uint32, c_float, c_float, c_float, c_float],
    None,
    '''DrawLine(theColour, xPosStart, yPosStart, xPosEnd, yPosEnd) -> None

theColour Colour
xPosStart Single
yPosStart Single
xPosEnd Single
yPosEnd Single'''
)


DrawHorizontalLine = _decorate(
    'DrawHorizontalLine',
    [c_uint32, c_float, c_float, c_float],
    None,
    '''DrawHorizontalLine(theColor, y, x1, x2) -> None

theColor Color
y Single
x1 Single
x2 Single'''
)


DrawVerticalLine = _decorate(
    'DrawVerticalLine',
    [c_uint32, c_float, c_float, c_float],
    None,
    '''DrawVerticalLine(theColor, x, y1, y2) -> None

theColor Color
x Single
y1 Single
y2 Single'''
)


DrawCircle = _decorate(
    'DrawCircle',
    [c_uint32, c_int, c_float, c_float, c_int],
    None,
    '''DrawCircle(theColour, filled, xc, yc, radius) -> None

theColour Colour
filled Longint
xc Single
yc Single
radius Longint'''
)


DrawEllipse = _decorate(
    'DrawEllipse',
    [c_uint32, c_int, c_float, c_float, c_int, c_int],
    None,
    '''DrawEllipse(theColour, filled, xPos, yPos, width, height) -> None

theColour Colour
filled Longint
xPos Single
yPos Single
width Longint
height Longint'''
)


DrawTriangle = _decorate(
    'DrawTriangle',
    [c_uint32, c_void_p],
    None,
    '''DrawTriangle(theColour, firstPoint) -> None

theColour Colour
firstPoint Point2DPtr'''
)


CreateSprite = _decorate(
    'CreateSprite',
    [c_void_p],
    c_void_p,
    '''CreateSprite(startBitmap) -> c_void_p

startBitmap Bitmap'''
)


CreateSpriteMultiFPC = _decorate(
    'CreateSpriteMultiFPC',
    [c_void_p, c_int, c_int, c_int, c_int],
    c_void_p,
    '''CreateSpriteMultiFPC(image, framesPerCell, frames, width, height) -> c_void_p

image Bitmap
framesPerCell Longint
frames Longint
width Longint
height Longint'''
)


CreateSpriteArrayFPC = _decorate(
    'CreateSpriteArrayFPC',
    [c_int, c_void_p, c_int, c_int],
    c_void_p,
    '''CreateSpriteArrayFPC(bitLength, bitmaps, framesPerCell, frames) -> c_void_p

bitLength Longint
bitmaps BitmapPtr
framesPerCell Longint
frames Longint'''
)


CreateSpriteMultiEnding = _decorate(
    'CreateSpriteMultiEnding',
    [c_void_p, c_int, c_int, c_void_p, SpriteEndingAction, c_int, c_int],
    c_void_p,
    '''CreateSpriteMultiEnding(image, isMulti, length, framesPerCell, endingAction, width, height) -> c_void_p

image Bitmap
isMulti Longint
length Longint
framesPerCell IntPtr
endingAction SpriteEndingAction
width Longint
height Longint'''
)


CreateSpriteMulti = _decorate(
    'CreateSpriteMulti',
    [c_void_p, c_int, c_int, c_void_p, c_int, c_int],
    c_void_p,
    '''CreateSpriteMulti(image, isMulti, length, framesPerCell, width, height) -> c_void_p

image Bitmap
isMulti Longint
length Longint
framesPerCell IntPtr
width Longint
height Longint'''
)


CreateSpriteArrayEnding = _decorate(
    'CreateSpriteArrayEnding',
    [c_int, c_void_p, c_int, c_void_p, SpriteEndingAction],
    c_void_p,
    '''CreateSpriteArrayEnding(bitLength, bitmaps, length, framesPerCell, endingAction) -> c_void_p

bitLength Longint
bitmaps BitmapPtr
length Longint
framesPerCell IntPtr
endingAction SpriteEndingAction'''
)


CreateSpriteArray = _decorate(
    'CreateSpriteArray',
    [c_int, c_void_p, c_int, c_void_p],
    c_void_p,
    '''CreateSpriteArray(bitlength, bitmaps, length, framesPerCell) -> c_void_p

bitlength Longint
bitmaps BitmapPtr
length Longint
framesPerCell IntPtr'''
)


UpdateSpriteAnimation = _decorate(
    'UpdateSpriteAnimation',
    [c_void_p],
    None,
    '''UpdateSpriteAnimation(spriteToDraw) -> None

spriteToDraw Sprite'''
)


UpdateSprite = _decorate(
    'UpdateSprite',
    [c_void_p],
    None,
    '''UpdateSprite(spriteToDraw) -> None

spriteToDraw Sprite'''
)


GetSpriteKind = _decorate(
    'GetSpriteKind',
    [c_void_p],
    c_int,
    '''GetSpriteKind(surface) -> c_int

surface Sprite'''
)


SetSpriteKind = _decorate(
    'SetSpriteKind',
    [c_void_p, SpriteKind],
    None,
    '''SetSpriteKind(surface, kind) -> None

surface Sprite
kind SpriteKind'''
)


SetSpriteFramesPerCell = _decorate(
    'SetSpriteFramesPerCell',
    [c_void_p, c_void_p, c_int],
    None,
    '''SetSpriteFramesPerCell(surface, framesPerCell, length) -> None

surface Sprite
framesPerCell IntPtr
length Longint'''
)


GetSpriteFramesPerCell = _decorate(
    'GetSpriteFramesPerCell',
    [c_void_p, c_int],
    c_int,
    '''GetSpriteFramesPerCell(surface, ind) -> c_int

surface Sprite
ind Longint'''
)


GetSpriteCols = _decorate(
    'GetSpriteCols',
    [c_void_p],
    c_int,
    '''GetSpriteCols(surface) -> c_int

surface Sprite'''
)


GetSpriteRow = _decorate(
    'GetSpriteRow',
    [c_void_p],
    c_int,
    '''GetSpriteRow(surface) -> c_int

surface Sprite'''
)


GetSpriteFrameCount = _decorate(
    'GetSpriteFrameCount',
    [c_void_p],
    c_int,
    '''GetSpriteFrameCount(surface) -> c_int

surface Sprite'''
)


GetSpriteEndingAction = _decorate(
    'GetSpriteEndingAction',
    [c_void_p],
    c_int,
    '''GetSpriteEndingAction(surface) -> c_int

surface Sprite'''
)


SetSpriteEndingAction = _decorate(
    'SetSpriteEndingAction',
    [c_void_p, SpriteEndingAction],
    None,
    '''SetSpriteEndingAction(surface, endingAction) -> None

surface Sprite
endingAction SpriteEndingAction'''
)


GetSpritehasEnded = _decorate(
    'GetSpritehasEnded',
    [c_void_p],
    c_int,
    '''GetSpritehasEnded(surface) -> c_int

surface Sprite'''
)


GetSpriteReverse = _decorate(
    'GetSpriteReverse',
    [c_void_p],
    c_int,
    '''GetSpriteReverse(surface) -> c_int

surface Sprite'''
)


GetSpriteMass = _decorate(
    'GetSpriteMass',
    [c_void_p],
    c_float,
    '''GetSpriteMass(surface) -> c_float

surface Sprite'''
)


GetSpriteMovement = _decorate(
    'GetSpriteMovement',
    [c_void_p],
    Vector,
    '''GetSpriteMovement(surface) -> Vector

surface Sprite'''
)


SetSpriteMass = _decorate(
    'SetSpriteMass',
    [c_void_p, c_float],
    None,
    '''SetSpriteMass(surface, mass) -> None

surface Sprite
mass Single'''
)


SetSpriteMovement = _decorate(
    'SetSpriteMovement',
    [c_void_p, Vector],
    None,
    '''SetSpriteMovement(surface, v) -> None

surface Sprite
v Vector'''
)


FreeSprite = _decorate(
    'FreeSprite',
    [c_void_p],
    None,
    '''FreeSprite(spriteToFree) -> None

spriteToFree Sprite'''
)


AddBitmapToSprite = _decorate(
    'AddBitmapToSprite',
    [c_void_p, c_void_p],
    c_int,
    '''AddBitmapToSprite(spriteToAddTo, bitmapToAdd) -> c_int

spriteToAddTo Sprite
bitmapToAdd Bitmap'''
)


CurrentHeight = _decorate(
    'CurrentHeight',
    [c_void_p],
    c_int,
    '''CurrentHeight(sprite) -> c_int

sprite Sprite'''
)


CurrentWidth = _decorate(
    'CurrentWidth',
    [c_void_p],
    c_int,
    '''CurrentWidth(sprite) -> c_int

sprite Sprite'''
)


DrawSprite = _decorate(
    'DrawSprite',
    [c_void_p, c_int, c_int],
    None,
    '''DrawSprite(spriteToDraw, xOffset, yOffset) -> None

spriteToDraw Sprite
xOffset Longint
yOffset Longint'''
)


MoveSpriteItself = _decorate(
    'MoveSpriteItself',
    [c_void_p],
    None,
    '''MoveSpriteItself(sprite) -> None

sprite Sprite'''
)


MoveSprite = _decorate(
    'MoveSprite',
    [c_void_p, Vector],
    None,
    '''MoveSprite(spriteToMove, movementVector) -> None

spriteToMove Sprite
movementVector Vector'''
)


MoveSpriteTo = _decorate(
    'MoveSpriteTo',
    [c_void_p, c_int, c_int],
    None,
    '''MoveSpriteTo(spriteToMove, x, y) -> None

spriteToMove Sprite
x Longint
y Longint'''
)


IsSpriteOffscreen = _decorate(
    'IsSpriteOffscreen',
    [c_void_p],
    c_int,
    '''IsSpriteOffscreen(theSprite) -> c_int

theSprite Sprite'''
)


ReplayAnimation = _decorate(
    'ReplayAnimation',
    [c_void_p],
    None,
    '''ReplayAnimation(theSprite) -> None

theSprite Sprite'''
)


DrawBitmapPartOnScreen = _decorate(
    'DrawBitmapPartOnScreen',
    [c_void_p, c_int, c_int, c_int, c_int, c_int, c_int],
    None,
    '''DrawBitmapPartOnScreen(bitmapToDraw, srcX, srcY, srcW, srcH, x, y) -> None

bitmapToDraw Bitmap
srcX Longint
srcY Longint
srcW Longint
srcH Longint
x Longint
y Longint'''
)


DrawBitmapOnScreen = _decorate(
    'DrawBitmapOnScreen',
    [c_void_p, c_int, c_int],
    None,
    '''DrawBitmapOnScreen(bitmapToDraw, x, y) -> None

bitmapToDraw Bitmap
x Longint
y Longint'''
)


DrawPixelOnScreen = _decorate(
    'DrawPixelOnScreen',
    [c_uint32, c_int, c_int],
    None,
    '''DrawPixelOnScreen(theColour, x, y) -> None

theColour Colour
x Longint
y Longint'''
)


DrawRectangleOnScreen = _decorate(
    'DrawRectangleOnScreen',
    [c_uint32, c_int, c_int, c_int, c_int, c_int],
    None,
    '''DrawRectangleOnScreen(theColour, filled, xPos, yPos, width, height) -> None

theColour Colour
filled Longint
xPos Longint
yPos Longint
width Longint
height Longint'''
)


DrawLineOnScreen = _decorate(
    'DrawLineOnScreen',
    [c_uint32, c_int, c_int, c_int, c_int],
    None,
    '''DrawLineOnScreen(theColour, xPosStart, yPosStart, xPosEnd, yPosEnd) -> None

theColour Colour
xPosStart Longint
yPosStart Longint
xPosEnd Longint
yPosEnd Longint'''
)


DrawHorizontalLineOnScreen = _decorate(
    'DrawHorizontalLineOnScreen',
    [c_uint32, c_int, c_int, c_int],
    None,
    '''DrawHorizontalLineOnScreen(theColor, y, x1, x2) -> None

theColor Color
y Longint
x1 Longint
x2 Longint'''
)


DrawVerticalLineOnScreen = _decorate(
    'DrawVerticalLineOnScreen',
    [c_uint32, c_int, c_int, c_int],
    None,
    '''DrawVerticalLineOnScreen(theColor, x, y1, y2) -> None

theColor Color
x Longint
y1 Longint
y2 Longint'''
)


DrawCircleOnScreen = _decorate(
    'DrawCircleOnScreen',
    [c_uint32, c_int, c_int, c_int, c_int],
    None,
    '''DrawCircleOnScreen(theColour, filled, xc, yc, radius) -> None

theColour Colour
filled Longint
xc Longint
yc Longint
radius Longint'''
)


DrawEllipseOnScreen = _decorate(
    'DrawEllipseOnScreen',
    [c_uint32, c_int, c_int, c_int, c_int, c_int],
    None,
    '''DrawEllipseOnScreen(theColour, filled, xPos, yPos, width, height) -> None

theColour Colour
filled Longint
xPos Longint
yPos Longint
width Longint
height Longint'''
)


XOffset = _decorate(
    'XOffset',
    [],
    c_int,
    '''XOffset() -> c_int

'''
)


YOffset = _decorate(
    'YOffset',
    [],
    c_int,
    '''YOffset() -> c_int

'''
)


ScreenX = _decorate(
    'ScreenX',
    [c_float],
    c_int,
    '''ScreenX(x) -> c_int

x Single'''
)


ScreenY = _decorate(
    'ScreenY',
    [c_float],
    c_int,
    '''ScreenY(y) -> c_int

y Single'''
)


GameX = _decorate(
    'GameX',
    [c_int],
    c_float,
    '''GameX(x) -> c_float

x Longint'''
)


GameY = _decorate(
    'GameY',
    [c_int],
    c_float,
    '''GameY(y) -> c_float

y Longint'''
)


ToGameCoordinates = _decorate(
    'ToGameCoordinates',
    [Point2D],
    Point2D,
    '''ToGameCoordinates(screenPoint) -> Point2D

screenPoint Point2D'''
)


MoveVisualArea = _decorate(
    'MoveVisualArea',
    [c_float, c_float],
    None,
    '''MoveVisualArea(dx, dy) -> None

dx Single
dy Single'''
)


SetScreenOffset = _decorate(
    'SetScreenOffset',
    [c_float, c_float],
    None,
    '''SetScreenOffset(x, y) -> None

x Single
y Single'''
)


FollowSprite = _decorate(
    'FollowSprite',
    [c_void_p, c_int, c_int],
    None,
    '''FollowSprite(spr, xOffset, yOffset) -> None

spr Sprite
xOffset Longint
yOffset Longint'''
)


SetClip = _decorate(
    'SetClip',
    [c_void_p, c_int, c_int, c_int, c_int],
    None,
    '''SetClip(bmp, x, y, w, h) -> None

bmp Bitmap
x Longint
y Longint
w Longint
h Longint'''
)


ResetClip = _decorate(
    'ResetClip',
    [c_void_p],
    None,
    '''ResetClip(bmp) -> None

bmp Bitmap'''
)


LoadMap = _decorate(
    'LoadMap',
    [c_char_p, c_char_p],
    c_void_p,
    '''LoadMap(mapFile, imgFile) -> c_void_p

mapFile PChar
imgFile PChar'''
)


DrawMap = _decorate(
    'DrawMap',
    [c_void_p],
    None,
    '''DrawMap(m) -> None

m Map'''
)


CollisionWithMapVector = _decorate(
    'CollisionWithMapVector',
    [c_void_p, c_void_p, Vector],
    CollisionSide,
    '''CollisionWithMapVector(m, spr, vec) -> CollisionSide

m Map
spr Sprite
vec Vector'''
)


EventCount = _decorate(
    'EventCount',
    [c_void_p, EventKind],
    c_int,
    '''EventCount(m, anEvent) -> c_int

m Map
anEvent Event'''
)


EventPositionX = _decorate(
    'EventPositionX',
    [c_void_p, EventKind, c_int],
    c_int,
    '''EventPositionX(m, anEvent, eventnumber) -> c_int

m Map
anEvent Event
eventnumber Longint'''
)


EventPositionY = _decorate(
    'EventPositionY',
    [c_void_p, EventKind, c_int],
    c_int,
    '''EventPositionY(m, anEvent, eventnumber) -> c_int

m Map
anEvent Event
eventnumber Longint'''
)


FreeMap = _decorate(
    'FreeMap',
    [c_void_p],
    None,
    '''FreeMap(m) -> None

m Map'''
)


SpriteHasCollidedWithMapTile = _decorate(
    'SpriteHasCollidedWithMapTile',
    [c_void_p, c_void_p, c_void_p, c_void_p],
    c_int,
    '''SpriteHasCollidedWithMapTile(m, spr, collidedX (out), collidedY (out)) -> c_int

m Map
spr Sprite
collidedX (out) Longint
collidedY (out) Longint
"out" parameters are used as pointers to store the result.
'''
)


WillCollideOnSide = _decorate(
    'WillCollideOnSide',
    [c_void_p, c_void_p],
    CollisionSide,
    '''WillCollideOnSide(m, spr) -> CollisionSide

m Map
spr Sprite'''
)


MoveSpriteOutOfTile = _decorate(
    'MoveSpriteOutOfTile',
    [c_void_p, c_void_p, c_int, c_int],
    None,
    '''MoveSpriteOutOfTile(m, spr, x, y) -> None

m Map
spr Sprite
x Longint
y Longint'''
)


MapWidth = _decorate(
    'MapWidth',
    [c_void_p],
    c_int,
    '''MapWidth(m) -> c_int

m Map'''
)


MapHeight = _decorate(
    'MapHeight',
    [c_void_p],
    c_int,
    '''MapHeight(m) -> c_int

m Map'''
)


BlockWidth = _decorate(
    'BlockWidth',
    [c_void_p],
    c_int,
    '''BlockWidth(m) -> c_int

m Map'''
)


BlockHeight = _decorate(
    'BlockHeight',
    [c_void_p],
    c_int,
    '''BlockHeight(m) -> c_int

m Map'''
)


GapX = _decorate(
    'GapX',
    [c_void_p],
    c_int,
    '''GapX(m) -> c_int

m Map'''
)


GapY = _decorate(
    'GapY',
    [c_void_p],
    c_int,
    '''GapY(m) -> c_int

m Map'''
)


StaggerX = _decorate(
    'StaggerX',
    [c_void_p],
    c_int,
    '''StaggerX(m) -> c_int

m Map'''
)


StaggerY = _decorate(
    'StaggerY',
    [c_void_p],
    c_int,
    '''StaggerY(m) -> c_int

m Map'''
)


GetTileFromPoint = _decorate(
    'GetTileFromPoint',
    [Point2D, c_void_p],
    Tile,
    '''GetTileFromPoint(point, m) -> Tile

point Point2D
m Map'''
)


GetEventAtTile = _decorate(
    'GetEventAtTile',
    [c_void_p, c_int, c_int],
    c_int,
    '''GetEventAtTile(m, xIndex, yIndex) -> c_int

m Map
xIndex Longint
yIndex Longint'''
)


DistancePointToLine = _decorate(
    'DistancePointToLine',
    [c_float, c_float, LineSegment],
    c_float,
    '''DistancePointToLine(x, y, line) -> c_float

x Single
y Single
line LineSegment'''
)


ClosestPointOnLine = _decorate(
    'ClosestPointOnLine',
    [c_float, c_float, LineSegment],
    Point2D,
    '''ClosestPointOnLine(x, y, line) -> Point2D

x Single
y Single
line LineSegment'''
)


CenterPoint = _decorate(
    'CenterPoint',
    [c_void_p],
    Point2D,
    '''CenterPoint(sprt) -> Point2D

sprt Sprite'''
)


IsPointOnLine = _decorate(
    'IsPointOnLine',
    [Point2D, LineSegment],
    c_int,
    '''IsPointOnLine(pnt, line) -> c_int

pnt Point2D
line LineSegment'''
)


GetLineIntersectionPoint = _decorate(
    'GetLineIntersectionPoint',
    [LineSegment, LineSegment, c_void_p],
    c_int,
    '''GetLineIntersectionPoint(line1, line2, pnt (out)) -> c_int

line1 LineSegment
line2 LineSegment
pnt (out) Point2D
"out" parameters are used as pointers to store the result.
'''
)


LineIntersectsWithLines = _decorate(
    'LineIntersectsWithLines',
    [LineSegment, c_int, c_void_p],
    c_int,
    '''LineIntersectsWithLines(target, len, data) -> c_int

target LineSegment
len Longint
data LineSegPtr'''
)


HasBitmapCollidedWithRect = _decorate(
    'HasBitmapCollidedWithRect',
    [c_void_p, c_int, c_int, c_int, c_int, c_int, c_int],
    c_int,
    '''HasBitmapCollidedWithRect(image, x, y, rectX, rectY, rectWidth, rectHeight) -> c_int

image Bitmap
x Longint
y Longint
rectX Longint
rectY Longint
rectWidth Longint
rectHeight Longint'''
)


IsPointInTriangle = _decorate(
    'IsPointInTriangle',
    [Point2D, c_void_p],
    c_int,
    '''IsPointInTriangle(point, inTriangle) -> c_int

point Point2D
inTriangle Point2DPtr'''
)


StartReadingTextWithText = _decorate(
    'StartReadingTextWithText',
    [c_char_p, c_uint32, c_int, c_void_p, c_int, c_int],
    None,
    '''StartReadingTextWithText(text, textColor, maxLength, theFont, x, y) -> None

text PChar
textColor Colour
maxLength Longint
theFont Font
x Longint
y Longint'''
)


DrawSimpleText = _decorate(
    'DrawSimpleText',
    [c_char_p, c_uint32, c_float, c_float],
    None,
    '''DrawSimpleText(theText, textColor, x, y) -> None

theText PChar
textColor Color
x Single
y Single'''
)


DrawSimpleTextOnScreen = _decorate(
    'DrawSimpleTextOnScreen',
    [c_char_p, c_uint32, c_float, c_float],
    None,
    '''DrawSimpleTextOnScreen(theText, textColor, x, y) -> None

theText PChar
textColor Color
x Single
y Single'''
)


DrawSimpleTextOn = _decorate(
    'DrawSimpleTextOn',
    [c_void_p, c_char_p, c_uint32, c_float, c_float],
    None,
    '''DrawSimpleTextOn(dest, theText, textColor, x, y) -> None

dest Bitmap
theText PChar
textColor Color
x Single
y Single'''
)


DrawSimpleFramerate = _decorate(
    'DrawSimpleFramerate',
    [c_int, c_int],
    None,
    '''DrawSimpleFramerate(x, y) -> None

x Longint
y Longint'''
)


DrawTriangleOnScreen = _decorate(
    'DrawTriangleOnScreen',
    [c_uint32, c_void_p],
    None,
    '''DrawTriangleOnScreen(theColour, firstPoint) -> None

theColour Colour
firstPoint Point2DPtr'''
)


DrawTriangleWithDestination = _decorate(
    'DrawTriangleWithDestination',
    [c_void_p, c_uint32, c_void_p],
    None,
    '''DrawTriangleWithDestination(dest, theColour, firstPoint) -> None

dest Bitmap
theColour Colour
firstPoint Point2DPtr'''
)


FillTriangle = _decorate(
    'FillTriangle',
    [c_uint32, c_void_p],
    None,
    '''FillTriangle(theColour, firstPoint) -> None

theColour Colour
firstPoint Point2DPtr'''
)


FillTriangleOnScreen = _decorate(
    'FillTriangleOnScreen',
    [c_uint32, c_void_p],
    None,
    '''FillTriangleOnScreen(theColour, firstPoint) -> None

theColour Colour
firstPoint Point2DPtr'''
)


FillTriangleWithDestination = _decorate(
    'FillTriangleWithDestination',
    [c_void_p, c_uint32, c_void_p],
    None,
    '''FillTriangleWithDestination(dest, theColour, firstPoint) -> None

dest Bitmap
theColour Colour
firstPoint Point2DPtr'''
)


UpdateSpriteAnimationPct = _decorate(
    'UpdateSpriteAnimationPct',
    [c_void_p, c_float],
    None,
    '''UpdateSpriteAnimationPct(spriteToDraw, pct) -> None

spriteToDraw Sprite
pct Single'''
)


UpdateSpritePct = _decorate(
    'UpdateSpritePct',
    [c_void_p, c_float],
    None,
    '''UpdateSpritePct(spriteToDraw, pct) -> None

spriteToDraw Sprite
pct Single'''
)


PlaySoundEffectLoopVolume = _decorate(
    'PlaySoundEffectLoopVolume',
    [c_void_p, c_int, c_float],
    None,
    '''PlaySoundEffectLoopVolume(effect, loops, vol) -> None

effect SoundEffect
loops Longint
vol Single'''
)


SetMusicVolume = _decorate(
    'SetMusicVolume',
    [c_float],
    None,
    '''SetMusicVolume(vol) -> None

vol Single'''
)


MusicVolume = _decorate(
    'MusicVolume',
    [],
    c_float,
    '''MusicVolume() -> c_float

'''
)


MakeOpaque = _decorate(
    'MakeOpaque',
    [c_void_p],
    None,
    '''MakeOpaque(bmp) -> None

bmp Bitmap'''
)


MakeTransparent = _decorate(
    'MakeTransparent',
    [c_void_p],
    None,
    '''MakeTransparent(bmp) -> None

bmp Bitmap'''
)


RotateZoomBitmap = _decorate(
    'RotateZoomBitmap',
    [c_void_p, c_float, c_float],
    c_void_p,
    '''RotateZoomBitmap(src, degRot, zoom) -> c_void_p

src Bitmap
degRot Single
zoom Single'''
)


SetupBitmapForCollisions = _decorate(
    'SetupBitmapForCollisions',
    [c_void_p],
    None,
    '''SetupBitmapForCollisions(src) -> None

src Bitmap'''
)


AKeyWasPressed = _decorate(
    'AKeyWasPressed',
    [],
    c_int,
    '''AKeyWasPressed() -> c_int

'''
)


TriangleBarycenter = _decorate(
    'TriangleBarycenter',
    [c_void_p],
    Point2D,
    '''TriangleBarycenter(firstPoint) -> Point2D

firstPoint Point2DPtr'''
)


ApplyMatrixToTriangle = _decorate(
    'ApplyMatrixToTriangle',
    [c_void_p, c_void_p, c_void_p, c_void_p, c_void_p],
    None,
    '''ApplyMatrixToTriangle(m, pnt, pA (out), pB (out), pC (out)) -> None

m Matrix2DPtr
pnt Point2DPtr
pA (out) Point2D
pB (out) Point2D
pC (out) Point2D
"out" parameters are used as pointers to store the result.
'''
)


SetSpriteRotation = _decorate(
    'SetSpriteRotation',
    [c_void_p, c_float],
    None,
    '''SetSpriteRotation(s, rot) -> None

s Sprite
rot Single'''
)


GetSpriteRotation = _decorate(
    'GetSpriteRotation',
    [c_void_p],
    c_float,
    '''GetSpriteRotation(s) -> c_float

s Sprite'''
)


SetSpriteZoom = _decorate(
    'SetSpriteZoom',
    [c_void_p, c_float],
    None,
    '''SetSpriteZoom(s, zoom) -> None

s Sprite
zoom Single'''
)


GetSpriteZoom = _decorate(
    'GetSpriteZoom',
    [c_void_p],
    c_float,
    '''GetSpriteZoom(s) -> c_float

s Sprite'''
)


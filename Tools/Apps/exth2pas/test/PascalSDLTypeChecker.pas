
// pascal Code  Auto-Generated by create_sdl_typeChecker.py
library PascalSDLTypeChecker;
uses SDL, SysUtils;
type IntPtr = ^LongInt;

procedure PascalCheckEnum_SDL_bool(ptr: IntPtr); cdecl; export;
var
 _SDL_bool : SDL_bool;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_bool) then WriteLn('Different size for SDL_bool!');
 cptr += 1;
 
 for _SDL_bool := Low(SDL_bool) to High(SDL_bool) do
 begin
    try
        WriteStr(name, _SDL_bool);
        if cptr^ <> LongInt(_SDL_bool) then
            WriteLn('Values differ in SDL_bool for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_bool));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_DUMMY_ENUM(ptr: IntPtr); cdecl; export;
var
 _SDL_DUMMY_ENUM : SDL_DUMMY_ENUM;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_DUMMY_ENUM) then WriteLn('Different size for SDL_DUMMY_ENUM!');
 cptr += 1;
 
 for _SDL_DUMMY_ENUM := Low(SDL_DUMMY_ENUM) to High(SDL_DUMMY_ENUM) do
 begin
    try
        WriteStr(name, _SDL_DUMMY_ENUM);
        if cptr^ <> LongInt(_SDL_DUMMY_ENUM) then
            WriteLn('Values differ in SDL_DUMMY_ENUM for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_DUMMY_ENUM));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_assert_state(ptr: IntPtr); cdecl; export;
var
 _SDL_assert_state : SDL_assert_state;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_assert_state) then WriteLn('Different size for SDL_assert_state!');
 cptr += 1;
 
 for _SDL_assert_state := Low(SDL_assert_state) to High(SDL_assert_state) do
 begin
    try
        WriteStr(name, _SDL_assert_state);
        if cptr^ <> LongInt(_SDL_assert_state) then
            WriteLn('Values differ in SDL_assert_state for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_assert_state));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_errorcode(ptr: IntPtr); cdecl; export;
var
 _SDL_errorcode : SDL_errorcode;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_errorcode) then WriteLn('Different size for SDL_errorcode!');
 cptr += 1;
 
 for _SDL_errorcode := Low(SDL_errorcode) to High(SDL_errorcode) do
 begin
    try
        WriteStr(name, _SDL_errorcode);
        if cptr^ <> LongInt(_SDL_errorcode) then
            WriteLn('Values differ in SDL_errorcode for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_errorcode));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_ThreadPriority(ptr: IntPtr); cdecl; export;
var
 _SDL_ThreadPriority : SDL_ThreadPriority;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_ThreadPriority) then WriteLn('Different size for SDL_ThreadPriority!');
 cptr += 1;
 
 for _SDL_ThreadPriority := Low(SDL_ThreadPriority) to High(SDL_ThreadPriority) do
 begin
    try
        WriteStr(name, _SDL_ThreadPriority);
        if cptr^ <> LongInt(_SDL_ThreadPriority) then
            WriteLn('Values differ in SDL_ThreadPriority for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_ThreadPriority));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_AudioStatus(ptr: IntPtr); cdecl; export;
var
 _SDL_AudioStatus : SDL_AudioStatus;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_AudioStatus) then WriteLn('Different size for SDL_AudioStatus!');
 cptr += 1;
 
 for _SDL_AudioStatus := Low(SDL_AudioStatus) to High(SDL_AudioStatus) do
 begin
    try
        WriteStr(name, _SDL_AudioStatus);
        if cptr^ <> LongInt(_SDL_AudioStatus) then
            WriteLn('Values differ in SDL_AudioStatus for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_AudioStatus));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_BlendMode(ptr: IntPtr); cdecl; export;
var
 _SDL_BlendMode : SDL_BlendMode;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_BlendMode) then WriteLn('Different size for SDL_BlendMode!');
 cptr += 1;
 
 for _SDL_BlendMode := Low(SDL_BlendMode) to High(SDL_BlendMode) do
 begin
    try
        WriteStr(name, _SDL_BlendMode);
        if cptr^ <> LongInt(_SDL_BlendMode) then
            WriteLn('Values differ in SDL_BlendMode for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_BlendMode));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_WindowFlags(ptr: IntPtr); cdecl; export;
var
 _SDL_WindowFlags : SDL_WindowFlags;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_WindowFlags) then WriteLn('Different size for SDL_WindowFlags!');
 cptr += 1;
 
 for _SDL_WindowFlags := Low(SDL_WindowFlags) to High(SDL_WindowFlags) do
 begin
    try
        WriteStr(name, _SDL_WindowFlags);
        if cptr^ <> LongInt(_SDL_WindowFlags) then
            WriteLn('Values differ in SDL_WindowFlags for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_WindowFlags));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_WindowEventID(ptr: IntPtr); cdecl; export;
var
 _SDL_WindowEventID : SDL_WindowEventID;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_WindowEventID) then WriteLn('Different size for SDL_WindowEventID!');
 cptr += 1;
 
 for _SDL_WindowEventID := Low(SDL_WindowEventID) to High(SDL_WindowEventID) do
 begin
    try
        WriteStr(name, _SDL_WindowEventID);
        if cptr^ <> LongInt(_SDL_WindowEventID) then
            WriteLn('Values differ in SDL_WindowEventID for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_WindowEventID));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_GLattr(ptr: IntPtr); cdecl; export;
var
 _SDL_GLattr : SDL_GLattr;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_GLattr) then WriteLn('Different size for SDL_GLattr!');
 cptr += 1;
 
 for _SDL_GLattr := Low(SDL_GLattr) to High(SDL_GLattr) do
 begin
    try
        WriteStr(name, _SDL_GLattr);
        if cptr^ <> LongInt(_SDL_GLattr) then
            WriteLn('Values differ in SDL_GLattr for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_GLattr));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_Scancode(ptr: IntPtr); cdecl; export;
var
 _SDL_Scancode : SDL_Scancode;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_Scancode) then WriteLn('Different size for SDL_Scancode!');
 cptr += 1;
 
 for _SDL_Scancode := Low(SDL_Scancode) to High(SDL_Scancode) do
 begin
    try
        WriteStr(name, _SDL_Scancode);
        if cptr^ <> LongInt(_SDL_Scancode) then
            WriteLn('Values differ in SDL_Scancode for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_Scancode));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_Keymod(ptr: IntPtr); cdecl; export;
var
 _SDL_Keymod : SDL_Keymod;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_Keymod) then WriteLn('Different size for SDL_Keymod!');
 cptr += 1;
 
 for _SDL_Keymod := Low(SDL_Keymod) to High(SDL_Keymod) do
 begin
    try
        WriteStr(name, _SDL_Keymod);
        if cptr^ <> LongInt(_SDL_Keymod) then
            WriteLn('Values differ in SDL_Keymod for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_Keymod));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_EventType(ptr: IntPtr); cdecl; export;
var
 _SDL_EventType : SDL_EventType;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_EventType) then WriteLn('Different size for SDL_EventType!');
 cptr += 1;
 
 for _SDL_EventType := Low(SDL_EventType) to High(SDL_EventType) do
 begin
    try
        WriteStr(name, _SDL_EventType);
        if cptr^ <> LongInt(_SDL_EventType) then
            WriteLn('Values differ in SDL_EventType for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_EventType));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_eventaction(ptr: IntPtr); cdecl; export;
var
 _SDL_eventaction : SDL_eventaction;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_eventaction) then WriteLn('Different size for SDL_eventaction!');
 cptr += 1;
 
 for _SDL_eventaction := Low(SDL_eventaction) to High(SDL_eventaction) do
 begin
    try
        WriteStr(name, _SDL_eventaction);
        if cptr^ <> LongInt(_SDL_eventaction) then
            WriteLn('Values differ in SDL_eventaction for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_eventaction));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_HintPriority(ptr: IntPtr); cdecl; export;
var
 _SDL_HintPriority : SDL_HintPriority;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_HintPriority) then WriteLn('Different size for SDL_HintPriority!');
 cptr += 1;
 
 for _SDL_HintPriority := Low(SDL_HintPriority) to High(SDL_HintPriority) do
 begin
    try
        WriteStr(name, _SDL_HintPriority);
        if cptr^ <> LongInt(_SDL_HintPriority) then
            WriteLn('Values differ in SDL_HintPriority for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_HintPriority));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_LogPriority(ptr: IntPtr); cdecl; export;
var
 _SDL_LogPriority : SDL_LogPriority;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_LogPriority) then WriteLn('Different size for SDL_LogPriority!');
 cptr += 1;
 
 for _SDL_LogPriority := Low(SDL_LogPriority) to High(SDL_LogPriority) do
 begin
    try
        WriteStr(name, _SDL_LogPriority);
        if cptr^ <> LongInt(_SDL_LogPriority) then
            WriteLn('Values differ in SDL_LogPriority for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_LogPriority));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_PowerState(ptr: IntPtr); cdecl; export;
var
 _SDL_PowerState : SDL_PowerState;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_PowerState) then WriteLn('Different size for SDL_PowerState!');
 cptr += 1;
 
 for _SDL_PowerState := Low(SDL_PowerState) to High(SDL_PowerState) do
 begin
    try
        WriteStr(name, _SDL_PowerState);
        if cptr^ <> LongInt(_SDL_PowerState) then
            WriteLn('Values differ in SDL_PowerState for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_PowerState));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_RendererFlags(ptr: IntPtr); cdecl; export;
var
 _SDL_RendererFlags : SDL_RendererFlags;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_RendererFlags) then WriteLn('Different size for SDL_RendererFlags!');
 cptr += 1;
 
 for _SDL_RendererFlags := Low(SDL_RendererFlags) to High(SDL_RendererFlags) do
 begin
    try
        WriteStr(name, _SDL_RendererFlags);
        if cptr^ <> LongInt(_SDL_RendererFlags) then
            WriteLn('Values differ in SDL_RendererFlags for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_RendererFlags));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_TextureAccess(ptr: IntPtr); cdecl; export;
var
 _SDL_TextureAccess : SDL_TextureAccess;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_TextureAccess) then WriteLn('Different size for SDL_TextureAccess!');
 cptr += 1;
 
 for _SDL_TextureAccess := Low(SDL_TextureAccess) to High(SDL_TextureAccess) do
 begin
    try
        WriteStr(name, _SDL_TextureAccess);
        if cptr^ <> LongInt(_SDL_TextureAccess) then
            WriteLn('Values differ in SDL_TextureAccess for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_TextureAccess));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_TextureModulate(ptr: IntPtr); cdecl; export;
var
 _SDL_TextureModulate : SDL_TextureModulate;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_TextureModulate) then WriteLn('Different size for SDL_TextureModulate!');
 cptr += 1;
 
 for _SDL_TextureModulate := Low(SDL_TextureModulate) to High(SDL_TextureModulate) do
 begin
    try
        WriteStr(name, _SDL_TextureModulate);
        if cptr^ <> LongInt(_SDL_TextureModulate) then
            WriteLn('Values differ in SDL_TextureModulate for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_TextureModulate));
        cptr += 1;
    except
    end;
 end;
end;
    

procedure PascalCheckEnum_SDL_GrabMode(ptr: IntPtr); cdecl; export;
var
 _SDL_GrabMode : SDL_GrabMode;
 cptr: IntPtr;
 name: String;
begin 
 cptr := ptr;
 if cptr^ <> sizeof(SDL_GrabMode) then WriteLn('Different size for SDL_GrabMode!');
 cptr += 1;
 
 for _SDL_GrabMode := Low(SDL_GrabMode) to High(SDL_GrabMode) do
 begin
    try
        WriteStr(name, _SDL_GrabMode);
        if cptr^ <> LongInt(_SDL_GrabMode) then
            WriteLn('Values differ in SDL_GrabMode for ', name, ' C Value: ', cptr^, ' Pas Value:', LongInt(_SDL_GrabMode));
        cptr += 1;
    except
    end;
 end;
end;
    


procedure PascalCheckRecord_SDL_assert_data(ptr : IntPtr); cdecl; export; 
var
  _SDL_assert_data : SDL_assert_data;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_assert_data) then WriteLn('Different size for SDL_assert_data! c: ',cSize, ' pascal: ',sizeof(SDL_assert_data));
  
      
  offset := Cardinal(@_SDL_assert_data.always_ignore) - Cardinal(@_SDL_assert_data);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_assert_data for SDL_assert_data.always_ignore, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_assert_data.trigger_count) - Cardinal(@_SDL_assert_data);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_assert_data for SDL_assert_data.trigger_count, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_assert_data.condition) - Cardinal(@_SDL_assert_data);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_assert_data for SDL_assert_data.condition, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_assert_data.filename) - Cardinal(@_SDL_assert_data);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_assert_data for SDL_assert_data.filename, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_assert_data.linenum) - Cardinal(@_SDL_assert_data);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_assert_data for SDL_assert_data.linenum, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_assert_data._function) - Cardinal(@_SDL_assert_data);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_assert_data for SDL_assert_data._function, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_assert_data.next) - Cardinal(@_SDL_assert_data);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_assert_data for SDL_assert_data.next, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_atomic_t(ptr : IntPtr); cdecl; export; 
var
  _SDL_atomic_t : SDL_atomic_t;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_atomic_t) then WriteLn('Different size for SDL_atomic_t! c: ',cSize, ' pascal: ',sizeof(SDL_atomic_t));
  
      
  offset := Cardinal(@_SDL_atomic_t.value) - Cardinal(@_SDL_atomic_t);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_atomic_t for SDL_atomic_t.value, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_RWops(ptr : IntPtr); cdecl; export; 
var
  _SDL_RWops : SDL_RWops;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_RWops) then WriteLn('Different size for SDL_RWops! c: ',cSize, ' pascal: ',sizeof(SDL_RWops));
  
      
  offset := Cardinal(@_SDL_RWops.seek) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.seek, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.read) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.read, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.write) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.write, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.close) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.close, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops._type) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.stdio) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.stdio, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.stdio.autoclose) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.stdio.autoclose, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.stdio.fp) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.stdio.fp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.mem) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.mem, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.mem.base) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.mem.base, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.mem.here) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.mem.here, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.mem.stop) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.mem.stop, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.unknown) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.unknown, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RWops.hidden.unknown.data1) - Cardinal(@_SDL_RWops);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RWops for SDL_RWops.hidden.unknown.data1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_AudioSpec(ptr : IntPtr); cdecl; export; 
var
  _SDL_AudioSpec : SDL_AudioSpec;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_AudioSpec) then WriteLn('Different size for SDL_AudioSpec! c: ',cSize, ' pascal: ',sizeof(SDL_AudioSpec));
  
      
  offset := Cardinal(@_SDL_AudioSpec.freq) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.freq, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioSpec.format) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.format, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioSpec.channels) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.channels, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioSpec.silence) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.silence, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioSpec.samples) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.samples, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioSpec.padding) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.padding, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioSpec.size) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.size, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioSpec.callback) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.callback, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioSpec.userdata) - Cardinal(@_SDL_AudioSpec);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioSpec for SDL_AudioSpec.userdata, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_AudioCVT(ptr : IntPtr); cdecl; export; 
var
  _SDL_AudioCVT : SDL_AudioCVT;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_AudioCVT) then WriteLn('Different size for SDL_AudioCVT! c: ',cSize, ' pascal: ',sizeof(SDL_AudioCVT));
  
      
  offset := Cardinal(@_SDL_AudioCVT.needed) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.needed, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.src_format) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.src_format, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.dst_format) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.dst_format, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.rate_incr) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.rate_incr, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.buf) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.buf, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.len) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.len, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.len_cvt) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.len_cvt, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.len_mult) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.len_mult, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.len_ratio) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.len_ratio, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.filters) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.filters, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_AudioCVT.filter_index) - Cardinal(@_SDL_AudioCVT);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_AudioCVT for SDL_AudioCVT.filter_index, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Color(ptr : IntPtr); cdecl; export; 
var
  _SDL_Color : SDL_Color;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Color) then WriteLn('Different size for SDL_Color! c: ',cSize, ' pascal: ',sizeof(SDL_Color));
  
      
  offset := Cardinal(@_SDL_Color.r) - Cardinal(@_SDL_Color);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Color for SDL_Color.r, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Color.g) - Cardinal(@_SDL_Color);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Color for SDL_Color.g, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Color.b) - Cardinal(@_SDL_Color);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Color for SDL_Color.b, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Color.unused) - Cardinal(@_SDL_Color);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Color for SDL_Color.unused, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Palette(ptr : IntPtr); cdecl; export; 
var
  _SDL_Palette : SDL_Palette;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Palette) then WriteLn('Different size for SDL_Palette! c: ',cSize, ' pascal: ',sizeof(SDL_Palette));
  
      
  offset := Cardinal(@_SDL_Palette.ncolors) - Cardinal(@_SDL_Palette);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Palette for SDL_Palette.ncolors, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Palette.colors) - Cardinal(@_SDL_Palette);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Palette for SDL_Palette.colors, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Palette.version) - Cardinal(@_SDL_Palette);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Palette for SDL_Palette.version, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Palette.refcount) - Cardinal(@_SDL_Palette);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Palette for SDL_Palette.refcount, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_PixelFormat(ptr : IntPtr); cdecl; export; 
var
  _SDL_PixelFormat : SDL_PixelFormat;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_PixelFormat) then WriteLn('Different size for SDL_PixelFormat! c: ',cSize, ' pascal: ',sizeof(SDL_PixelFormat));
  
      
  offset := Cardinal(@_SDL_PixelFormat.format) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.format, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.palette) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.palette, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.BitsPerPixel) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.BitsPerPixel, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.BytesPerPixel) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.BytesPerPixel, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.padding) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.padding, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Rmask) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Rmask, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Gmask) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Gmask, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Bmask) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Bmask, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Amask) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Amask, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Rloss) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Rloss, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Gloss) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Gloss, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Bloss) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Bloss, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Aloss) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Aloss, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Rshift) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Rshift, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Gshift) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Gshift, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Bshift) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Bshift, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.Ashift) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.Ashift, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.refcount) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.refcount, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_PixelFormat.next) - Cardinal(@_SDL_PixelFormat);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_PixelFormat for SDL_PixelFormat.next, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Point(ptr : IntPtr); cdecl; export; 
var
  _SDL_Point : SDL_Point;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Point) then WriteLn('Different size for SDL_Point! c: ',cSize, ' pascal: ',sizeof(SDL_Point));
  
      
  offset := Cardinal(@_SDL_Point.x) - Cardinal(@_SDL_Point);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Point for SDL_Point.x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Point.y) - Cardinal(@_SDL_Point);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Point for SDL_Point.y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Rect(ptr : IntPtr); cdecl; export; 
var
  _SDL_Rect : SDL_Rect;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Rect) then WriteLn('Different size for SDL_Rect! c: ',cSize, ' pascal: ',sizeof(SDL_Rect));
  
      
  offset := Cardinal(@_SDL_Rect.x) - Cardinal(@_SDL_Rect);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Rect for SDL_Rect.x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Rect.y) - Cardinal(@_SDL_Rect);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Rect for SDL_Rect.y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Rect.w) - Cardinal(@_SDL_Rect);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Rect for SDL_Rect.w, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Rect.h) - Cardinal(@_SDL_Rect);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Rect for SDL_Rect.h, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Surface(ptr : IntPtr); cdecl; export; 
var
  _SDL_Surface : SDL_Surface;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Surface) then WriteLn('Different size for SDL_Surface! c: ',cSize, ' pascal: ',sizeof(SDL_Surface));
  
      
  offset := Cardinal(@_SDL_Surface.flags) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.flags, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.format) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.format, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.w) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.w, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.h) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.h, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.pitch) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.pitch, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.pixels) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.pixels, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.userdata) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.userdata, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.locked) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.locked, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.lock_data) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.lock_data, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.clip_rect) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.clip_rect, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.map) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.map, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Surface.refcount) - Cardinal(@_SDL_Surface);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Surface for SDL_Surface.refcount, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_DisplayMode(ptr : IntPtr); cdecl; export; 
var
  _SDL_DisplayMode : SDL_DisplayMode;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_DisplayMode) then WriteLn('Different size for SDL_DisplayMode! c: ',cSize, ' pascal: ',sizeof(SDL_DisplayMode));
  
      
  offset := Cardinal(@_SDL_DisplayMode.format) - Cardinal(@_SDL_DisplayMode);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DisplayMode for SDL_DisplayMode.format, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DisplayMode.w) - Cardinal(@_SDL_DisplayMode);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DisplayMode for SDL_DisplayMode.w, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DisplayMode.h) - Cardinal(@_SDL_DisplayMode);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DisplayMode for SDL_DisplayMode.h, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DisplayMode.refresh_rate) - Cardinal(@_SDL_DisplayMode);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DisplayMode for SDL_DisplayMode.refresh_rate, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DisplayMode.driverdata) - Cardinal(@_SDL_DisplayMode);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DisplayMode for SDL_DisplayMode.driverdata, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Keysym(ptr : IntPtr); cdecl; export; 
var
  _SDL_Keysym : SDL_Keysym;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Keysym) then WriteLn('Different size for SDL_Keysym! c: ',cSize, ' pascal: ',sizeof(SDL_Keysym));
  
      
  offset := Cardinal(@_SDL_Keysym.scancode) - Cardinal(@_SDL_Keysym);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Keysym for SDL_Keysym.scancode, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Keysym.sym) - Cardinal(@_SDL_Keysym);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Keysym for SDL_Keysym.sym, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Keysym.kmod) - Cardinal(@_SDL_Keysym);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Keysym for SDL_Keysym.kmod, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Keysym.unicode) - Cardinal(@_SDL_Keysym);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Keysym for SDL_Keysym.unicode, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Finger(ptr : IntPtr); cdecl; export; 
var
  _SDL_Finger : SDL_Finger;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Finger) then WriteLn('Different size for SDL_Finger! c: ',cSize, ' pascal: ',sizeof(SDL_Finger));
  
      
  offset := Cardinal(@_SDL_Finger.id) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.id, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.x) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.y) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.pressure) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.pressure, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.xdelta) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.xdelta, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.ydelta) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.ydelta, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.last_x) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.last_x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.last_y) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.last_y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.last_pressure) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.last_pressure, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Finger.down) - Cardinal(@_SDL_Finger);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Finger for SDL_Finger.down, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Touch(ptr : IntPtr); cdecl; export; 
var
  _SDL_Touch : SDL_Touch;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Touch) then WriteLn('Different size for SDL_Touch! c: ',cSize, ' pascal: ',sizeof(SDL_Touch));
  
      
  offset := Cardinal(@_SDL_Touch.FreeTouch) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.FreeTouch, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.pressure_max) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.pressure_max, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.pressure_min) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.pressure_min, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.x_max) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.x_max, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.x_min) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.x_min, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.y_max) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.y_max, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.y_min) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.y_min, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.xres) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.xres, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.yres) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.yres, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.pressureres) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.pressureres, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.native_xres) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.native_xres, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.native_yres) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.native_yres, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.native_pressureres) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.native_pressureres, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.tilt) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.tilt, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.rotation) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.rotation, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.id) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.id, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.focus) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.focus, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.name) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.name, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.buttonstate) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.buttonstate, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.relative_mode) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.relative_mode, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.flush_motion) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.flush_motion, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.num_fingers) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.num_fingers, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.max_fingers) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.max_fingers, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.fingers) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.fingers, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Touch.driverdata) - Cardinal(@_SDL_Touch);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Touch for SDL_Touch.driverdata, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_WindowEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_WindowEvent : SDL_WindowEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_WindowEvent) then WriteLn('Different size for SDL_WindowEvent! c: ',cSize, ' pascal: ',sizeof(SDL_WindowEvent));
  
      
  offset := Cardinal(@_SDL_WindowEvent._type) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_WindowEvent.timestamp) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_WindowEvent.windowID) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_WindowEvent.event) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent.event, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_WindowEvent.padding1) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_WindowEvent.padding2) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent.padding2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_WindowEvent.padding3) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent.padding3, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_WindowEvent.data1) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent.data1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_WindowEvent.data2) - Cardinal(@_SDL_WindowEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_WindowEvent for SDL_WindowEvent.data2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_KeyboardEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_KeyboardEvent : SDL_KeyboardEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_KeyboardEvent) then WriteLn('Different size for SDL_KeyboardEvent! c: ',cSize, ' pascal: ',sizeof(SDL_KeyboardEvent));
  
      
  offset := Cardinal(@_SDL_KeyboardEvent._type) - Cardinal(@_SDL_KeyboardEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_KeyboardEvent for SDL_KeyboardEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_KeyboardEvent.timestamp) - Cardinal(@_SDL_KeyboardEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_KeyboardEvent for SDL_KeyboardEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_KeyboardEvent.windowID) - Cardinal(@_SDL_KeyboardEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_KeyboardEvent for SDL_KeyboardEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_KeyboardEvent.state) - Cardinal(@_SDL_KeyboardEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_KeyboardEvent for SDL_KeyboardEvent.state, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_KeyboardEvent._repeat) - Cardinal(@_SDL_KeyboardEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_KeyboardEvent for SDL_KeyboardEvent._repeat, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_KeyboardEvent.padding2) - Cardinal(@_SDL_KeyboardEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_KeyboardEvent for SDL_KeyboardEvent.padding2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_KeyboardEvent.padding3) - Cardinal(@_SDL_KeyboardEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_KeyboardEvent for SDL_KeyboardEvent.padding3, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_KeyboardEvent.keysym) - Cardinal(@_SDL_KeyboardEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_KeyboardEvent for SDL_KeyboardEvent.keysym, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_TextEditingEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_TextEditingEvent : SDL_TextEditingEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_TextEditingEvent) then WriteLn('Different size for SDL_TextEditingEvent! c: ',cSize, ' pascal: ',sizeof(SDL_TextEditingEvent));
  
      
  offset := Cardinal(@_SDL_TextEditingEvent._type) - Cardinal(@_SDL_TextEditingEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextEditingEvent for SDL_TextEditingEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TextEditingEvent.timestamp) - Cardinal(@_SDL_TextEditingEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextEditingEvent for SDL_TextEditingEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TextEditingEvent.windowID) - Cardinal(@_SDL_TextEditingEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextEditingEvent for SDL_TextEditingEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TextEditingEvent.text) - Cardinal(@_SDL_TextEditingEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextEditingEvent for SDL_TextEditingEvent.text, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TextEditingEvent.start) - Cardinal(@_SDL_TextEditingEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextEditingEvent for SDL_TextEditingEvent.start, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TextEditingEvent.length) - Cardinal(@_SDL_TextEditingEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextEditingEvent for SDL_TextEditingEvent.length, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_TextInputEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_TextInputEvent : SDL_TextInputEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_TextInputEvent) then WriteLn('Different size for SDL_TextInputEvent! c: ',cSize, ' pascal: ',sizeof(SDL_TextInputEvent));
  
      
  offset := Cardinal(@_SDL_TextInputEvent._type) - Cardinal(@_SDL_TextInputEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextInputEvent for SDL_TextInputEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TextInputEvent.timestamp) - Cardinal(@_SDL_TextInputEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextInputEvent for SDL_TextInputEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TextInputEvent.windowID) - Cardinal(@_SDL_TextInputEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextInputEvent for SDL_TextInputEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TextInputEvent.text) - Cardinal(@_SDL_TextInputEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TextInputEvent for SDL_TextInputEvent.text, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_MouseMotionEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_MouseMotionEvent : SDL_MouseMotionEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_MouseMotionEvent) then WriteLn('Different size for SDL_MouseMotionEvent! c: ',cSize, ' pascal: ',sizeof(SDL_MouseMotionEvent));
  
      
  offset := Cardinal(@_SDL_MouseMotionEvent._type) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.timestamp) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.windowID) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.state) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.state, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.padding1) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.padding2) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.padding2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.padding3) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.padding3, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.x) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.y) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.xrel) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.xrel, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseMotionEvent.yrel) - Cardinal(@_SDL_MouseMotionEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseMotionEvent for SDL_MouseMotionEvent.yrel, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_MouseButtonEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_MouseButtonEvent : SDL_MouseButtonEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_MouseButtonEvent) then WriteLn('Different size for SDL_MouseButtonEvent! c: ',cSize, ' pascal: ',sizeof(SDL_MouseButtonEvent));
  
      
  offset := Cardinal(@_SDL_MouseButtonEvent._type) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseButtonEvent.timestamp) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseButtonEvent.windowID) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseButtonEvent.button) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent.button, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseButtonEvent.state) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent.state, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseButtonEvent.padding1) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseButtonEvent.padding2) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent.padding2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseButtonEvent.x) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent.x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseButtonEvent.y) - Cardinal(@_SDL_MouseButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseButtonEvent for SDL_MouseButtonEvent.y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_MouseWheelEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_MouseWheelEvent : SDL_MouseWheelEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_MouseWheelEvent) then WriteLn('Different size for SDL_MouseWheelEvent! c: ',cSize, ' pascal: ',sizeof(SDL_MouseWheelEvent));
  
      
  offset := Cardinal(@_SDL_MouseWheelEvent._type) - Cardinal(@_SDL_MouseWheelEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseWheelEvent for SDL_MouseWheelEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseWheelEvent.timestamp) - Cardinal(@_SDL_MouseWheelEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseWheelEvent for SDL_MouseWheelEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseWheelEvent.windowID) - Cardinal(@_SDL_MouseWheelEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseWheelEvent for SDL_MouseWheelEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseWheelEvent.x) - Cardinal(@_SDL_MouseWheelEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseWheelEvent for SDL_MouseWheelEvent.x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MouseWheelEvent.y) - Cardinal(@_SDL_MouseWheelEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MouseWheelEvent for SDL_MouseWheelEvent.y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_JoyAxisEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_JoyAxisEvent : SDL_JoyAxisEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_JoyAxisEvent) then WriteLn('Different size for SDL_JoyAxisEvent! c: ',cSize, ' pascal: ',sizeof(SDL_JoyAxisEvent));
  
      
  offset := Cardinal(@_SDL_JoyAxisEvent._type) - Cardinal(@_SDL_JoyAxisEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyAxisEvent for SDL_JoyAxisEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyAxisEvent.timestamp) - Cardinal(@_SDL_JoyAxisEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyAxisEvent for SDL_JoyAxisEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyAxisEvent.which) - Cardinal(@_SDL_JoyAxisEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyAxisEvent for SDL_JoyAxisEvent.which, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyAxisEvent.axis) - Cardinal(@_SDL_JoyAxisEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyAxisEvent for SDL_JoyAxisEvent.axis, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyAxisEvent.padding1) - Cardinal(@_SDL_JoyAxisEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyAxisEvent for SDL_JoyAxisEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyAxisEvent.padding2) - Cardinal(@_SDL_JoyAxisEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyAxisEvent for SDL_JoyAxisEvent.padding2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyAxisEvent.value) - Cardinal(@_SDL_JoyAxisEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyAxisEvent for SDL_JoyAxisEvent.value, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_JoyBallEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_JoyBallEvent : SDL_JoyBallEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_JoyBallEvent) then WriteLn('Different size for SDL_JoyBallEvent! c: ',cSize, ' pascal: ',sizeof(SDL_JoyBallEvent));
  
      
  offset := Cardinal(@_SDL_JoyBallEvent._type) - Cardinal(@_SDL_JoyBallEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyBallEvent for SDL_JoyBallEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyBallEvent.timestamp) - Cardinal(@_SDL_JoyBallEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyBallEvent for SDL_JoyBallEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyBallEvent.which) - Cardinal(@_SDL_JoyBallEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyBallEvent for SDL_JoyBallEvent.which, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyBallEvent.ball) - Cardinal(@_SDL_JoyBallEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyBallEvent for SDL_JoyBallEvent.ball, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyBallEvent.padding1) - Cardinal(@_SDL_JoyBallEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyBallEvent for SDL_JoyBallEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyBallEvent.padding2) - Cardinal(@_SDL_JoyBallEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyBallEvent for SDL_JoyBallEvent.padding2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyBallEvent.xrel) - Cardinal(@_SDL_JoyBallEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyBallEvent for SDL_JoyBallEvent.xrel, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyBallEvent.yrel) - Cardinal(@_SDL_JoyBallEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyBallEvent for SDL_JoyBallEvent.yrel, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_JoyHatEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_JoyHatEvent : SDL_JoyHatEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_JoyHatEvent) then WriteLn('Different size for SDL_JoyHatEvent! c: ',cSize, ' pascal: ',sizeof(SDL_JoyHatEvent));
  
      
  offset := Cardinal(@_SDL_JoyHatEvent._type) - Cardinal(@_SDL_JoyHatEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyHatEvent for SDL_JoyHatEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyHatEvent.timestamp) - Cardinal(@_SDL_JoyHatEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyHatEvent for SDL_JoyHatEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyHatEvent.which) - Cardinal(@_SDL_JoyHatEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyHatEvent for SDL_JoyHatEvent.which, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyHatEvent.hat) - Cardinal(@_SDL_JoyHatEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyHatEvent for SDL_JoyHatEvent.hat, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyHatEvent.value) - Cardinal(@_SDL_JoyHatEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyHatEvent for SDL_JoyHatEvent.value, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyHatEvent.padding1) - Cardinal(@_SDL_JoyHatEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyHatEvent for SDL_JoyHatEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_JoyButtonEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_JoyButtonEvent : SDL_JoyButtonEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_JoyButtonEvent) then WriteLn('Different size for SDL_JoyButtonEvent! c: ',cSize, ' pascal: ',sizeof(SDL_JoyButtonEvent));
  
      
  offset := Cardinal(@_SDL_JoyButtonEvent._type) - Cardinal(@_SDL_JoyButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyButtonEvent for SDL_JoyButtonEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyButtonEvent.timestamp) - Cardinal(@_SDL_JoyButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyButtonEvent for SDL_JoyButtonEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyButtonEvent.which) - Cardinal(@_SDL_JoyButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyButtonEvent for SDL_JoyButtonEvent.which, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyButtonEvent.button) - Cardinal(@_SDL_JoyButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyButtonEvent for SDL_JoyButtonEvent.button, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyButtonEvent.state) - Cardinal(@_SDL_JoyButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyButtonEvent for SDL_JoyButtonEvent.state, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_JoyButtonEvent.padding1) - Cardinal(@_SDL_JoyButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_JoyButtonEvent for SDL_JoyButtonEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_TouchFingerEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_TouchFingerEvent : SDL_TouchFingerEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_TouchFingerEvent) then WriteLn('Different size for SDL_TouchFingerEvent! c: ',cSize, ' pascal: ',sizeof(SDL_TouchFingerEvent));
  
      
  offset := Cardinal(@_SDL_TouchFingerEvent._type) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.timestamp) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.windowID) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.touchId) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.touchId, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.fingerId) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.fingerId, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.state) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.state, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.padding1) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.padding2) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.padding2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.padding3) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.padding3, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.x) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.y) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.dx) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.dx, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.dy) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.dy, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchFingerEvent.pressure) - Cardinal(@_SDL_TouchFingerEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchFingerEvent for SDL_TouchFingerEvent.pressure, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_TouchButtonEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_TouchButtonEvent : SDL_TouchButtonEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_TouchButtonEvent) then WriteLn('Different size for SDL_TouchButtonEvent! c: ',cSize, ' pascal: ',sizeof(SDL_TouchButtonEvent));
  
      
  offset := Cardinal(@_SDL_TouchButtonEvent._type) - Cardinal(@_SDL_TouchButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchButtonEvent for SDL_TouchButtonEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchButtonEvent.timestamp) - Cardinal(@_SDL_TouchButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchButtonEvent for SDL_TouchButtonEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchButtonEvent.windowID) - Cardinal(@_SDL_TouchButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchButtonEvent for SDL_TouchButtonEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchButtonEvent.touchId) - Cardinal(@_SDL_TouchButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchButtonEvent for SDL_TouchButtonEvent.touchId, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchButtonEvent.state) - Cardinal(@_SDL_TouchButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchButtonEvent for SDL_TouchButtonEvent.state, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchButtonEvent.button) - Cardinal(@_SDL_TouchButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchButtonEvent for SDL_TouchButtonEvent.button, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchButtonEvent.padding1) - Cardinal(@_SDL_TouchButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchButtonEvent for SDL_TouchButtonEvent.padding1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_TouchButtonEvent.padding2) - Cardinal(@_SDL_TouchButtonEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_TouchButtonEvent for SDL_TouchButtonEvent.padding2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_MultiGestureEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_MultiGestureEvent : SDL_MultiGestureEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_MultiGestureEvent) then WriteLn('Different size for SDL_MultiGestureEvent! c: ',cSize, ' pascal: ',sizeof(SDL_MultiGestureEvent));
  
      
  offset := Cardinal(@_SDL_MultiGestureEvent._type) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.timestamp) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.windowID) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.touchId) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.touchId, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.dTheta) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.dTheta, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.dDist) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.dDist, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.x) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.x, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.y) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.y, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.numFingers) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.numFingers, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_MultiGestureEvent.padding) - Cardinal(@_SDL_MultiGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_MultiGestureEvent for SDL_MultiGestureEvent.padding, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_DollarGestureEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_DollarGestureEvent : SDL_DollarGestureEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_DollarGestureEvent) then WriteLn('Different size for SDL_DollarGestureEvent! c: ',cSize, ' pascal: ',sizeof(SDL_DollarGestureEvent));
  
      
  offset := Cardinal(@_SDL_DollarGestureEvent._type) - Cardinal(@_SDL_DollarGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DollarGestureEvent for SDL_DollarGestureEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DollarGestureEvent.timestamp) - Cardinal(@_SDL_DollarGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DollarGestureEvent for SDL_DollarGestureEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DollarGestureEvent.windowID) - Cardinal(@_SDL_DollarGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DollarGestureEvent for SDL_DollarGestureEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DollarGestureEvent.touchId) - Cardinal(@_SDL_DollarGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DollarGestureEvent for SDL_DollarGestureEvent.touchId, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DollarGestureEvent.gestureId) - Cardinal(@_SDL_DollarGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DollarGestureEvent for SDL_DollarGestureEvent.gestureId, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DollarGestureEvent.numFingers) - Cardinal(@_SDL_DollarGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DollarGestureEvent for SDL_DollarGestureEvent.numFingers, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DollarGestureEvent.error) - Cardinal(@_SDL_DollarGestureEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DollarGestureEvent for SDL_DollarGestureEvent.error, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_DropEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_DropEvent : SDL_DropEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_DropEvent) then WriteLn('Different size for SDL_DropEvent! c: ',cSize, ' pascal: ',sizeof(SDL_DropEvent));
  
      
  offset := Cardinal(@_SDL_DropEvent._type) - Cardinal(@_SDL_DropEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DropEvent for SDL_DropEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DropEvent.timestamp) - Cardinal(@_SDL_DropEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DropEvent for SDL_DropEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_DropEvent._file) - Cardinal(@_SDL_DropEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_DropEvent for SDL_DropEvent._file, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_QuitEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_QuitEvent : SDL_QuitEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_QuitEvent) then WriteLn('Different size for SDL_QuitEvent! c: ',cSize, ' pascal: ',sizeof(SDL_QuitEvent));
  
      
  offset := Cardinal(@_SDL_QuitEvent._type) - Cardinal(@_SDL_QuitEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_QuitEvent for SDL_QuitEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_QuitEvent.timestamp) - Cardinal(@_SDL_QuitEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_QuitEvent for SDL_QuitEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_UserEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_UserEvent : SDL_UserEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_UserEvent) then WriteLn('Different size for SDL_UserEvent! c: ',cSize, ' pascal: ',sizeof(SDL_UserEvent));
  
      
  offset := Cardinal(@_SDL_UserEvent._type) - Cardinal(@_SDL_UserEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_UserEvent for SDL_UserEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_UserEvent.timestamp) - Cardinal(@_SDL_UserEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_UserEvent for SDL_UserEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_UserEvent.windowID) - Cardinal(@_SDL_UserEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_UserEvent for SDL_UserEvent.windowID, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_UserEvent.code) - Cardinal(@_SDL_UserEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_UserEvent for SDL_UserEvent.code, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_UserEvent.data1) - Cardinal(@_SDL_UserEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_UserEvent for SDL_UserEvent.data1, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_UserEvent.data2) - Cardinal(@_SDL_UserEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_UserEvent for SDL_UserEvent.data2, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_SysWMEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_SysWMEvent : SDL_SysWMEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_SysWMEvent) then WriteLn('Different size for SDL_SysWMEvent! c: ',cSize, ' pascal: ',sizeof(SDL_SysWMEvent));
  
      
  offset := Cardinal(@_SDL_SysWMEvent._type) - Cardinal(@_SDL_SysWMEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_SysWMEvent for SDL_SysWMEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_SysWMEvent.timestamp) - Cardinal(@_SDL_SysWMEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_SysWMEvent for SDL_SysWMEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_SysWMEvent.msg) - Cardinal(@_SDL_SysWMEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_SysWMEvent for SDL_SysWMEvent.msg, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_ActiveEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_ActiveEvent : SDL_ActiveEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_ActiveEvent) then WriteLn('Different size for SDL_ActiveEvent! c: ',cSize, ' pascal: ',sizeof(SDL_ActiveEvent));
  
      
  offset := Cardinal(@_SDL_ActiveEvent._type) - Cardinal(@_SDL_ActiveEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_ActiveEvent for SDL_ActiveEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_ActiveEvent.timestamp) - Cardinal(@_SDL_ActiveEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_ActiveEvent for SDL_ActiveEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_ActiveEvent.gain) - Cardinal(@_SDL_ActiveEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_ActiveEvent for SDL_ActiveEvent.gain, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_ActiveEvent.state) - Cardinal(@_SDL_ActiveEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_ActiveEvent for SDL_ActiveEvent.state, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_ResizeEvent(ptr : IntPtr); cdecl; export; 
var
  _SDL_ResizeEvent : SDL_ResizeEvent;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_ResizeEvent) then WriteLn('Different size for SDL_ResizeEvent! c: ',cSize, ' pascal: ',sizeof(SDL_ResizeEvent));
  
      
  offset := Cardinal(@_SDL_ResizeEvent._type) - Cardinal(@_SDL_ResizeEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_ResizeEvent for SDL_ResizeEvent._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_ResizeEvent.timestamp) - Cardinal(@_SDL_ResizeEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_ResizeEvent for SDL_ResizeEvent.timestamp, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_ResizeEvent.w) - Cardinal(@_SDL_ResizeEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_ResizeEvent for SDL_ResizeEvent.w, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_ResizeEvent.h) - Cardinal(@_SDL_ResizeEvent);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_ResizeEvent for SDL_ResizeEvent.h, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Event(ptr : IntPtr); cdecl; export; 
var
  _SDL_Event : SDL_Event;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Event) then WriteLn('Different size for SDL_Event! c: ',cSize, ' pascal: ',sizeof(SDL_Event));
  
      
  offset := Cardinal(@_SDL_Event._type) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event._type, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.window) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.window, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.key) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.key, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.edit) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.edit, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.text) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.text, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.motion) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.motion, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.button) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.button, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.wheel) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.wheel, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.jaxis) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.jaxis, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.jball) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.jball, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.jhat) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.jhat, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.jbutton) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.jbutton, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.quit) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.quit, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.user) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.user, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.syswm) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.syswm, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.tfinger) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.tfinger, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.tbutton) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.tbutton, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.mgesture) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.mgesture, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.dgesture) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.dgesture, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.drop) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.drop, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.active) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.active, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Event.resize) - Cardinal(@_SDL_Event);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Event for SDL_Event.resize, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_RendererInfo(ptr : IntPtr); cdecl; export; 
var
  _SDL_RendererInfo : SDL_RendererInfo;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_RendererInfo) then WriteLn('Different size for SDL_RendererInfo! c: ',cSize, ' pascal: ',sizeof(SDL_RendererInfo));
  
      
  offset := Cardinal(@_SDL_RendererInfo.name) - Cardinal(@_SDL_RendererInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RendererInfo for SDL_RendererInfo.name, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RendererInfo.flags) - Cardinal(@_SDL_RendererInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RendererInfo for SDL_RendererInfo.flags, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RendererInfo.num_texture_formats) - Cardinal(@_SDL_RendererInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RendererInfo for SDL_RendererInfo.num_texture_formats, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RendererInfo.texture_formats) - Cardinal(@_SDL_RendererInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RendererInfo for SDL_RendererInfo.texture_formats, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RendererInfo.max_texture_width) - Cardinal(@_SDL_RendererInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RendererInfo for SDL_RendererInfo.max_texture_width, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_RendererInfo.max_texture_height) - Cardinal(@_SDL_RendererInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_RendererInfo for SDL_RendererInfo.max_texture_height, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_version(ptr : IntPtr); cdecl; export; 
var
  _SDL_version : SDL_version;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_version) then WriteLn('Different size for SDL_version! c: ',cSize, ' pascal: ',sizeof(SDL_version));
  
      
  offset := Cardinal(@_SDL_version.major) - Cardinal(@_SDL_version);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_version for SDL_version.major, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_version.minor) - Cardinal(@_SDL_version);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_version for SDL_version.minor, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_version.patch) - Cardinal(@_SDL_version);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_version for SDL_version.patch, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_VideoInfo(ptr : IntPtr); cdecl; export; 
var
  _SDL_VideoInfo : SDL_VideoInfo;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_VideoInfo) then WriteLn('Different size for SDL_VideoInfo! c: ',cSize, ' pascal: ',sizeof(SDL_VideoInfo));
  
      
  offset := Cardinal(@_SDL_VideoInfo.flag0) - Cardinal(@_SDL_VideoInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_VideoInfo for SDL_VideoInfo.flag0, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_VideoInfo.video_mem) - Cardinal(@_SDL_VideoInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_VideoInfo for SDL_VideoInfo.video_mem, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_VideoInfo.vfmt) - Cardinal(@_SDL_VideoInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_VideoInfo for SDL_VideoInfo.vfmt, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_VideoInfo.current_w) - Cardinal(@_SDL_VideoInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_VideoInfo for SDL_VideoInfo.current_w, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_VideoInfo.current_h) - Cardinal(@_SDL_VideoInfo);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_VideoInfo for SDL_VideoInfo.current_h, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;

procedure PascalCheckRecord_SDL_Overlay(ptr : IntPtr); cdecl; export; 
var
  _SDL_Overlay : SDL_Overlay;
  cptr : IntPtr;
  cSize : Cardinal = 0;
  offset : Cardinal = 0;
begin
  cptr := ptr;
  cSize := cptr^;
  
  if cSize <> sizeof(SDL_Overlay) then WriteLn('Different size for SDL_Overlay! c: ',cSize, ' pascal: ',sizeof(SDL_Overlay));
  
      
  offset := Cardinal(@_SDL_Overlay.format) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.format, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Overlay.w) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.w, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Overlay.h) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.h, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Overlay.planes) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.planes, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Overlay.pitches) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.pitches, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Overlay.pixels) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.pixels, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Overlay.hwfuncs) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.hwfuncs, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Overlay.hwdata) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.hwdata, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));

  offset := Cardinal(@_SDL_Overlay.flag0) - Cardinal(@_SDL_Overlay);
  cPtr +=1;
  
  if Cardinal(cPtr^) <> offset then
    WriteLn('Offset Differs in SDL_Overlay for SDL_Overlay.flag0, C Offset : ', Cardinal(cPtr^), ' Pascal Offset : ',    IntToStr(offset));
end;exports
     PascalCheckEnum_SDL_bool,
     PascalCheckEnum_SDL_DUMMY_ENUM,
     PascalCheckEnum_SDL_assert_state,
     PascalCheckEnum_SDL_errorcode,
     PascalCheckEnum_SDL_ThreadPriority,
     PascalCheckEnum_SDL_AudioStatus,
     PascalCheckEnum_SDL_BlendMode,
     PascalCheckEnum_SDL_WindowFlags,
     PascalCheckEnum_SDL_WindowEventID,
     PascalCheckEnum_SDL_GLattr,
     PascalCheckEnum_SDL_Scancode,
     PascalCheckEnum_SDL_Keymod,
     PascalCheckEnum_SDL_EventType,
     PascalCheckEnum_SDL_eventaction,
     PascalCheckEnum_SDL_HintPriority,
     PascalCheckEnum_SDL_LogPriority,
     PascalCheckEnum_SDL_PowerState,
     PascalCheckEnum_SDL_RendererFlags,
     PascalCheckEnum_SDL_TextureAccess,
     PascalCheckEnum_SDL_TextureModulate,
     PascalCheckEnum_SDL_GrabMode,
     PascalCheckRecord_SDL_assert_data,
     PascalCheckRecord_SDL_atomic_t,
     PascalCheckRecord_SDL_RWops,
     PascalCheckRecord_SDL_AudioSpec,
     PascalCheckRecord_SDL_AudioCVT,
     PascalCheckRecord_SDL_Color,
     PascalCheckRecord_SDL_Palette,
     PascalCheckRecord_SDL_PixelFormat,
     PascalCheckRecord_SDL_Point,
     PascalCheckRecord_SDL_Rect,
     PascalCheckRecord_SDL_Surface,
     PascalCheckRecord_SDL_DisplayMode,
     PascalCheckRecord_SDL_Keysym,
     PascalCheckRecord_SDL_Finger,
     PascalCheckRecord_SDL_Touch,
     PascalCheckRecord_SDL_WindowEvent,
     PascalCheckRecord_SDL_KeyboardEvent,
     PascalCheckRecord_SDL_TextEditingEvent,
     PascalCheckRecord_SDL_TextInputEvent,
     PascalCheckRecord_SDL_MouseMotionEvent,
     PascalCheckRecord_SDL_MouseButtonEvent,
     PascalCheckRecord_SDL_MouseWheelEvent,
     PascalCheckRecord_SDL_JoyAxisEvent,
     PascalCheckRecord_SDL_JoyBallEvent,
     PascalCheckRecord_SDL_JoyHatEvent,
     PascalCheckRecord_SDL_JoyButtonEvent,
     PascalCheckRecord_SDL_TouchFingerEvent,
     PascalCheckRecord_SDL_TouchButtonEvent,
     PascalCheckRecord_SDL_MultiGestureEvent,
     PascalCheckRecord_SDL_DollarGestureEvent,
     PascalCheckRecord_SDL_DropEvent,
     PascalCheckRecord_SDL_QuitEvent,
     PascalCheckRecord_SDL_UserEvent,
     PascalCheckRecord_SDL_SysWMEvent,
     PascalCheckRecord_SDL_ActiveEvent,
     PascalCheckRecord_SDL_ResizeEvent,
     PascalCheckRecord_SDL_Event,
     PascalCheckRecord_SDL_RendererInfo,
     PascalCheckRecord_SDL_version,
     PascalCheckRecord_SDL_VideoInfo,
     PascalCheckRecord_SDL_Overlay;
end.
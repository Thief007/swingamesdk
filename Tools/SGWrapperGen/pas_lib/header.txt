//
// Generated by SGWrapperGen - DO NOT EDIT!
//
// SwinGame exported library
//


library %(name)s;
  uses SysUtils, Strings, sgTrace, sgShared,
    %(uses)s
  
  type 
    LongintPtr      = ^Longint;
    StringPtr       = ^String;
    SinglePtr       = ^Single;
    Point2DPtr      = ^Point2D;
    LineSegmentPtr  = ^LineSegment;
    BitmapPtr       = ^Bitmap;
    TrianglePtr     = ^Triangle;
  
  
  // The exception trap is used to ensure that exceptions do not propagate beyond the
  // library boundary.
  procedure TrapException(exc: Exception; fromMethod: String);
  begin
    HasException := true;
    
    if Assigned(exc) then
      ErrorMessage := 'Error from ' + fromMethod + ' - ' + exc.Message
    else
      ErrorMessage := 'Unknown error from ' + fromMethod;
    
    try
        WriteLn(ErrorMessage);
    except
    end;
    
    {$IFDEF TRACE}
      Trace('SGSDK.dll', 'Error', fromMethod, ErrorMessage);
    {$ENDIF}
  end;
  
  // procedure MatrixCopyToPtr(matrix: SinglePtr; const fromMatrix: Matrix2D);
  // var
  //   i, j: Longint;
  // begin
  //   //WriteLn('************************');
  //   for i := 0 to 2 do
  //   begin
  //     //Write('|  ');
  //     for j := 0 to 2 do
  //     begin
  //       //Write(fromMatrix[i,j]:4:2, '  ');
  //       (matrix + (i * 3) + j)^ := fromMatrix[i,j];
  //       //matrix[i,j] := fromMatrix[i,j];
  //     end;
  //     //Writeln('|');
  //   end;
  //   //WriteLn('************************');
  // end;
  // 
  // procedure MatrixCopyFromPtr(var toMatrix: Matrix2D; matrix: SinglePtr);
  // var
  //   i, j: Longint;
  // begin
  //   //WriteLn('************************');
  //   for i := 0 to 2 do
  //   begin
  //     //Write('|  ');
  //     for j := 0 to 2 do
  //     begin
  //       toMatrix[i,j] := (matrix + (i * 3) + j)^;
  //       //toMatrix[i,j] := matrix[i,j];
  //       
  //       //Write(toMatrix[i,j]:4:2, '  ');
  //     end;
  //     //Writeln('|');
  //   end;
  //   //WriteLn('************************');
  // end;
  
  procedure LineCopyFromPtr(data: LineSegmentPtr; len: Longint; out arr: LinesArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure LineCopyToPtr(const arr: LinesArray; len: Longint; data: LineSegmentPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure TriangleCopyFromPtr(data: TrianglePtr; len: Longint; out arr: TriangleArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
        arr[i] := (data + i)^;
    end;
  end;
  
  procedure TriangleCopyToPtr(const arr: TriangleArray; len: Longint; data: TrianglePtr);
  var
    i: Longint;
  begin
    // len is number of triangles expected
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
        (data + i)^ := arr[i];
    end;
  end;
  
  procedure BmpCopyFromPtr(bmp: BitmapPtr; len: Longint; out arr: BitmapArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (bmp + i)^;
    end;
  end;
  
  procedure BmpCopyToPtr(const arr: BitmapArray; len: Longint; bmp: BitmapPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (bmp + i)^ := arr[i];
    end;
  end;
  
  procedure LongintCopyFromPtr(data: LongintPtr; len: Longint; out arr: LongintArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure LongintCopyToPtr(const arr: LongintArray; len: Longint; data: LongintPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure Point2DCopyFromPtr(data: Point2DPtr; len: Longint; out arr: Point2DArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');
    
    SetLength(arr, len);
    
    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure Point2DCopyToPtr(const arr: Point2DArray; len: Longint; data: Point2DPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure StringCopyFromPtr(str: StringPtr; len: Longint; out arr: StringArray);
  var
    i: Longint;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');
    
    SetLength(arr, len);
    
    for i := 0 to len - 1 do
    begin
      StrCopy(PChar(arr[i]), PChar((str + i)^));
    end;
  end;
  
  procedure StringCopyToPtr(const arr: StringArray; len: Longint; str: StringPtr);
  var
    i: Longint;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      StrCopy(PChar((str + i)^), PChar(arr[i]));
    end;
  end;
  
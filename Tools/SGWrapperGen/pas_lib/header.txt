//
// Generated by SGWrapperGen - DO NOT EDIT!
//
// SwinGame exported library
//
{$I SwinGame.inc}

library %(name)s;
  uses SysUtils, Strings, SwinGameTrace, sg_Shared,
    SGSDK_Input, SGSDK_Font, SGSDK_Physics, SGSDK_Graphics,
    SDL_TTF, SGSDK_Camera, SGSDK_MappyLoader,
    %(uses)s
  
  procedure TrapException(exc: Exception; fromMethod: String);
  begin
    HasException := true;
    
    if Assigned(exc) then
      ErrorMessage := 'Error from ' + fromMethod + ' - ' + exc.Message
    else
      ErrorMessage := 'Unknown error from ' + fromMethod;
      
    {$IFDEF TRACE}
      Trace('SGSDK.dll', 'Error', fromMethod, ErrorMessage);
    {$ENDIF}
  end;
  
  procedure TriCopyToPtr(tri: Point2DPtr; const fromTri: Triangle);
  var
    i: LongInt;
  begin
    for i := 0 to 2 do
    begin
      (tri + i)^ := fromTri[i];
    end;
  end;
  
  procedure TriCopyFromPtr(var fromTri: Triangle; tri: Point2DPtr);
  var
    i: LongInt;
  begin
    for i := 0 to 2 do
    begin
      fromTri[i] := (tri + i)^;
    end;
  end;
  
  procedure LineCopyFromPtr(data: LineSegmentPtr; len: LongInt; out arr: LinesArray);
  var
    i: LongInt;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure LineCopyToPtr(const arr: LinesArray; len: LongInt; data: LineSegmentPtr);
  var
    i: LongInt;
  begin
    if len <> Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  

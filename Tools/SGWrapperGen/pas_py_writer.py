from pas_reader import ReadPasFile
from datetime import date
#from sgsdk_types import sgsdk_types

SGSDK_VERSION = '2.0 (200000)'
WRAPPER_DATE = '%s (1.3)' % str(date.today()) 

# Any methods to exclude? Useful for development/tests, but not normally needed.
EXCLUDE_LIST = []
ERROR_EXCLUDE_LIST = ['ExceptionOccured', 'GetExceptionMessage']
ERROR_EXCLUDE_STR = str(ERROR_EXCLUDE_LIST)

HEADER = '''"""
This file has been generated by pas_py_writer.py. Do not edit by hand! :)
SGSDK Version %s
Wrapper Date %s
"""

from ctypes import (c_int, c_float, c_char_p, c_byte, c_uint32, c_uint16, 
                    c_void_p, CDLL, create_string_buffer)  

#pylint: disable-msg=W0614,E0602
from types import * 

#==============================================================================

if __name__ != '__main__':
    import sys, os
    
    if os.path.isdir("sgsdk"):
        os.chdir("./sgsdk")  

    if sys.platform == "win32":
        lib = CDLL("SGSDK.dll")   #to check
    elif sys.platform == "darwin":
        lib = CDLL("libSGSDK.dylib")
    else: #assume linux
        lib = CDLL("libSGSDK.so")   #to check
else:
    lib = None
    
#==============================================================================

class SGSDKException(Exception):
    pass

def _sg_errcheck(result, func, args):
    # ask the SGSDK if there was an error, raise exception if so...
    if ExceptionOccured() == sgTrue.value:
        msg = create_string_buffer(" "*1023) # + 1 null termination char
        GetExceptionMessage(msg)
        raise SGSDKException(msg.value)
    return result
        

def _decorate(name, argtypes, restype, doc=''):
    # use the name to get the function pointer from the current library
    func = getattr(lib, name)
    # decorate with _sg_errcheck if needed for debug 
    if sg_options['debug']:
        if name not in %s:
            func.errcheck = _sg_errcheck
    # set arguments
    func.argtypes = argtypes
    # set return type
    func.restype = restype
    # add docstring if provided
    if doc != '': 
        func.__doc__ = doc
    # return the new function pointer
    return func
    
''' % (SGSDK_VERSION, WRAPPER_DATE, ERROR_EXCLUDE_STR)


DECORATE = '''
%(name)s = _decorate(
    '%(name)s',
    [%(argtypes)s],
    %(restype)s,
    \'''%(doc)s\'''
)

'''


#==============================================================================
# Mapping of Pascal Types (dll types) to Python Types (using ctypes)
#==============================================================================
    
# define a dictionary mapping swingame types to appropriate types/ctypes
sgsdk_types = {
    'Bitmap': 'c_void_p', # ^BitmapData (pointer)
    'BitmapPtr': 'c_void_p',
    'Byte': 'c_byte',
    'CollisionDetectionRange': 'CollisionDetectionRange', #enum
    'CollisionSide': 'CollisionSide', #enum
    'Colour': 'c_uint32', # RGBA c_byte*4
    'Color': 'c_uint32', # same as Colour
    'Event': 'EventKind', 
    'Font': 'c_void_p', # PTTF_Font
    'FontAlignment': 'FontAlignment', #enum (specified values)
    'FontStyle': 'FontStyle', #enum
    'IntPtr': 'c_void_p', # ^Integer (pointer)
    'LineSegment': 'LineSegment', # record
    'LineSegPtr': 'c_void_p',
    'LongInt': 'c_int', # replaces old Integer type
    'Map': 'c_void_p', # ^MapRecord (pointer)
    'Matrix2DPtr': 'c_void_p',
    'MouseButton': 'MouseButton', #enum
    'Music': 'c_void_p', # PMix_Music
    'PChar': 'c_char_p', # null terminated string
    'Point2D': 'Point2D', # record
    'Pointer': 'c_void_p',
    'ResourceKind': 'ResourceKind', #enum
    'Rectangle': 'Rectangle', # record
    'SoundEffect': 'c_void_p', #PMix_Chunk               
    'SpriteEndingAction': 'SpriteEndingAction', #enum
    'Sprite': 'c_void_p', # ^SpriteData (pointer)
    'SpriteKind': 'SpriteKind', #enum
    'Single': 'c_float',
    'TSDL_Color': 'c_uint32',
    'Tile': 'Tile', # record
    'Timer': 'c_void_p', # ^TimerData (pointer)
    'Triangle': 'Triangle', # record
    'UInt16': 'c_uint16',
    'UInt32': 'c_uint32',
    'Vector': 'Vector', #record
    'None': 'None',
    # new marshalled type stuff...
    'Point2DPtr': 'c_void_p', # Point2D[]',
    'IntPtr': 'c_void_p', # ^Integer (pointer)
    'BitmapPtr': 'c_void_p', #IntPtr[]',
    'LineSegPtr': 'c_void_p', #LineSegment[]'
    # handle all out types as pointers?
    'out': 'c_void_p',
 }

#==============================================================================

def CreatePyFile(filename, sigs, pas_types):
    # Assumes that the module global dictionary of sgsdk_types is ready!
    
    # 1. Map pas types to the required python types
    for sig in sigs:
        # return type
        sig['return'] = sgsdk_types[sig['return']]
        # argument types
        arg_names = []
        new_args = []
        out_flag = False
        for arg in sig['params']: 
            name, old_type, mod = arg
            # (NAME, TYPE, NEW_TYPE, MOD)
            if mod == 'out':
                name = name + ' (out)'
                new_type = 'c_void_p'
                out_flag = True 
            else: 
                new_type = sgsdk_types[old_type]
            new_args.append((name, old_type, new_type, mod))
        sig['params'] = new_args
        sig['out'] = out_flag
    
    # 2. Start the output file the standard header text.
    f = open(filename, 'w')
    f.write(HEADER)
    
    # 3. Create and write each signatures details
    #    FuncName = _decorate('<name>', <argtypes>, <restype>, <doc>)    
    names = []
    for sig in sigs:
        if sig['name'] not in EXCLUDE_LIST:
            # note the name for later
            names.append(sig['name'])            
            # format the string of argument types
            arg_types = ', '.join(['%s' % t[2] for t in sig['params']])            
            # Construct a detailed docstring  
            # name([arg_names]) -> return type
            # description
            arg_names = ', '.join(['%s' % t[0] for t in sig['params']])
            doc = '%s(%s) -> %s\n\n' % (sig['name'], arg_names, sig['return'])
            doc += '\n'.join(['%s %s' % (t[0],t[1]) for t in sig['params']])
            if sig['out']:
                doc += '\n"out" parameters are used as pointers to store the result.\n'              
            # construct the full decorate call string and write it to file,    
            tmp = {
                'name': sig['name'],
                'argtypes': arg_types,
                'restype': sig['return'],
                'doc': doc,
            }             
            f.write(DECORATE % tmp)
    f.close()
   


#==============================================================================


def main(argv):
    # default file?
    input = 'SGSDK.pas' if len(argv) != 2 else argv[1]
    # read the pas file.
    sigs, pas_types = ReadPasFile(input)
    #save python output file
    output = 'sgsdk_new.py' if len(argv) != 3 else argv[2]
    CreatePyFile(output, sigs, pas_types)
    
    print 'Done.'

if __name__ == '__main__':
    import sys
    main(sys.argv) 

    
